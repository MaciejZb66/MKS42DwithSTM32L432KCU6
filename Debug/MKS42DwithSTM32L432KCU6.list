
MKS42DwithSTM32L432KCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba0  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d2c  08003d2c  00013d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d74  08003d74  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d74  08003d74  00013d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d7c  08003d7c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d7c  08003d7c  00013d7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d80  08003d80  00013d80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003d90  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003d90  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5d4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e45  00000000  00000000  0002c610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d8  00000000  00000000  0002e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000910  00000000  00000000  0002ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f759  00000000  00000000  0002f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d88c  00000000  00000000  0004ee99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd310  00000000  00000000  0005c725  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119a35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026c0  00000000  00000000  00119a88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003d14 	.word	0x08003d14

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003d14 	.word	0x08003d14

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_GPIO_Init+0x2c>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <MX_GPIO_Init+0x2c>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_GPIO_Init+0x2c>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <HAL_UART_RxCpltCallback>:
int32_t read_rotation = 0;
float angle = 0;
int16_t read_error = 0;
float angle_err = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]

}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <CRC_calc>:

uint8_t CRC_calc(uint8_t length){
 8000514:	b480      	push	{r7}
 8000516:	b085      	sub	sp, #20
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
	uint8_t sum = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length; i++){
 8000522:	2300      	movs	r3, #0
 8000524:	60bb      	str	r3, [r7, #8]
 8000526:	e009      	b.n	800053c <CRC_calc+0x28>
		sum += transmit[i];
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <CRC_calc+0x40>)
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	4413      	add	r3, r2
 800052e:	781a      	ldrb	r2, [r3, #0]
 8000530:	7bfb      	ldrb	r3, [r7, #15]
 8000532:	4413      	add	r3, r2
 8000534:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length; i++){
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	3301      	adds	r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	68ba      	ldr	r2, [r7, #8]
 8000540:	429a      	cmp	r2, r3
 8000542:	dbf1      	blt.n	8000528 <CRC_calc+0x14>
	}
	return sum;
 8000544:	7bfb      	ldrb	r3, [r7, #15]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	2000002c 	.word	0x2000002c

08000558 <MKS_read_param>:


void MKS_read_param(uint8_t param, uint8_t length_of_param){
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	460a      	mov	r2, r1
 8000562:	71fb      	strb	r3, [r7, #7]
 8000564:	4613      	mov	r3, r2
 8000566:	71bb      	strb	r3, [r7, #6]
	transmit[0] = Address;
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <MKS_read_param+0x50>)
 800056a:	22e0      	movs	r2, #224	; 0xe0
 800056c:	701a      	strb	r2, [r3, #0]
	transmit[1] = param;
 800056e:	4a0e      	ldr	r2, [pc, #56]	; (80005a8 <MKS_read_param+0x50>)
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	7053      	strb	r3, [r2, #1]
	transmit[2] = CRC_calc(2);
 8000574:	2002      	movs	r0, #2
 8000576:	f7ff ffcd 	bl	8000514 <CRC_calc>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	4b0a      	ldr	r3, [pc, #40]	; (80005a8 <MKS_read_param+0x50>)
 8000580:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit_IT(&huart1, transmit, 3);
 8000582:	2203      	movs	r2, #3
 8000584:	4908      	ldr	r1, [pc, #32]	; (80005a8 <MKS_read_param+0x50>)
 8000586:	4809      	ldr	r0, [pc, #36]	; (80005ac <MKS_read_param+0x54>)
 8000588:	f002 f862 	bl	8002650 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, &receive[0], length_of_param);
 800058c:	79bb      	ldrb	r3, [r7, #6]
 800058e:	b29b      	uxth	r3, r3
 8000590:	461a      	mov	r2, r3
 8000592:	4907      	ldr	r1, [pc, #28]	; (80005b0 <MKS_read_param+0x58>)
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <MKS_read_param+0x54>)
 8000596:	f002 f8c9 	bl	800272c <HAL_UART_Receive_IT>
	HAL_Delay(10);
 800059a:	200a      	movs	r0, #10
 800059c:	f000 fb68 	bl	8000c70 <HAL_Delay>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	2000002c 	.word	0x2000002c
 80005ac:	20000058 	.word	0x20000058
 80005b0:	20000034 	.word	0x20000034

080005b4 <MKS_set_param>:
		HAL_UART_Transmit_IT(&huart1, transmit, 3);
		HAL_UART_Receive_IT(&huart1, receive, length_of_param);
	}while(receive[length_of_param] != CRC_calc(length_of_param));
}

void MKS_set_param(uint8_t param, uint8_t value){
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	460a      	mov	r2, r1
 80005be:	71fb      	strb	r3, [r7, #7]
 80005c0:	4613      	mov	r3, r2
 80005c2:	71bb      	strb	r3, [r7, #6]
	transmit[0] = Address;
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <MKS_set_param+0x4c>)
 80005c6:	22e0      	movs	r2, #224	; 0xe0
 80005c8:	701a      	strb	r2, [r3, #0]
	transmit[1] = param;
 80005ca:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <MKS_set_param+0x4c>)
 80005cc:	79fb      	ldrb	r3, [r7, #7]
 80005ce:	7053      	strb	r3, [r2, #1]
	transmit[2] = value;
 80005d0:	4a0b      	ldr	r2, [pc, #44]	; (8000600 <MKS_set_param+0x4c>)
 80005d2:	79bb      	ldrb	r3, [r7, #6]
 80005d4:	7093      	strb	r3, [r2, #2]
	transmit[3] = CRC_calc(3);
 80005d6:	2003      	movs	r0, #3
 80005d8:	f7ff ff9c 	bl	8000514 <CRC_calc>
 80005dc:	4603      	mov	r3, r0
 80005de:	461a      	mov	r2, r3
 80005e0:	4b07      	ldr	r3, [pc, #28]	; (8000600 <MKS_set_param+0x4c>)
 80005e2:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit_IT(&huart1, transmit, 4);
 80005e4:	2204      	movs	r2, #4
 80005e6:	4906      	ldr	r1, [pc, #24]	; (8000600 <MKS_set_param+0x4c>)
 80005e8:	4806      	ldr	r0, [pc, #24]	; (8000604 <MKS_set_param+0x50>)
 80005ea:	f002 f831 	bl	8002650 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, receive, 3);
 80005ee:	2203      	movs	r2, #3
 80005f0:	4905      	ldr	r1, [pc, #20]	; (8000608 <MKS_set_param+0x54>)
 80005f2:	4804      	ldr	r0, [pc, #16]	; (8000604 <MKS_set_param+0x50>)
 80005f4:	f002 f89a 	bl	800272c <HAL_UART_Receive_IT>
}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	2000002c 	.word	0x2000002c
 8000604:	20000058 	.word	0x20000058
 8000608:	20000034 	.word	0x20000034

0800060c <MKS_set_rotation_speed>:
	transmit[7] = CRC_calc(7);
	HAL_UART_Transmit_IT(&huart1, transmit, 8);
	HAL_UART_Receive_IT(&huart1, receive, 3);
}

void MKS_set_rotation_speed(uint8_t speed, bool clockwise){
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	460a      	mov	r2, r1
 8000616:	71fb      	strb	r3, [r7, #7]
 8000618:	4613      	mov	r3, r2
 800061a:	71bb      	strb	r3, [r7, #6]
	if(clockwise){
 800061c:	79bb      	ldrb	r3, [r7, #6]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <MKS_set_rotation_speed+0x20>
		speed &= 0x7F;
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000628:	71fb      	strb	r3, [r7, #7]
 800062a:	e003      	b.n	8000634 <MKS_set_rotation_speed+0x28>
	}else{
		speed |= 0x80;
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000632:	71fb      	strb	r3, [r7, #7]
	}
	transmit[0] = Address;
 8000634:	4b09      	ldr	r3, [pc, #36]	; (800065c <MKS_set_rotation_speed+0x50>)
 8000636:	22e0      	movs	r2, #224	; 0xe0
 8000638:	701a      	strb	r2, [r3, #0]
	transmit[1] = Set_rotation;
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <MKS_set_rotation_speed+0x50>)
 800063c:	22f6      	movs	r2, #246	; 0xf6
 800063e:	705a      	strb	r2, [r3, #1]
	transmit[2] = (uint8_t)speed;
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <MKS_set_rotation_speed+0x50>)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	7093      	strb	r3, [r2, #2]
	transmit[3] = CRC_calc(3);
 8000646:	2003      	movs	r0, #3
 8000648:	f7ff ff64 	bl	8000514 <CRC_calc>
 800064c:	4603      	mov	r3, r0
 800064e:	461a      	mov	r2, r3
 8000650:	4b02      	ldr	r3, [pc, #8]	; (800065c <MKS_set_rotation_speed+0x50>)
 8000652:	70da      	strb	r2, [r3, #3]
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000002c 	.word	0x2000002c

08000660 <MKS_stop>:

void MKS_stop(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	transmit[0] = Address;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MKS_stop+0x38>)
 8000666:	22e0      	movs	r2, #224	; 0xe0
 8000668:	701a      	strb	r2, [r3, #0]
	transmit[1] = Stop;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MKS_stop+0x38>)
 800066c:	22f7      	movs	r2, #247	; 0xf7
 800066e:	705a      	strb	r2, [r3, #1]
	transmit[2] = CRC_calc(2);
 8000670:	2002      	movs	r0, #2
 8000672:	f7ff ff4f 	bl	8000514 <CRC_calc>
 8000676:	4603      	mov	r3, r0
 8000678:	461a      	mov	r2, r3
 800067a:	4b07      	ldr	r3, [pc, #28]	; (8000698 <MKS_stop+0x38>)
 800067c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit_IT(&huart1, transmit, 3);
 800067e:	2203      	movs	r2, #3
 8000680:	4905      	ldr	r1, [pc, #20]	; (8000698 <MKS_stop+0x38>)
 8000682:	4806      	ldr	r0, [pc, #24]	; (800069c <MKS_stop+0x3c>)
 8000684:	f001 ffe4 	bl	8002650 <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart1, receive, 3);
 8000688:	2203      	movs	r2, #3
 800068a:	4905      	ldr	r1, [pc, #20]	; (80006a0 <MKS_stop+0x40>)
 800068c:	4803      	ldr	r0, [pc, #12]	; (800069c <MKS_stop+0x3c>)
 800068e:	f002 f84d 	bl	800272c <HAL_UART_Receive_IT>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000002c 	.word	0x2000002c
 800069c:	20000058 	.word	0x20000058
 80006a0:	20000034 	.word	0x20000034

080006a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a8:	f000 fa6d 	bl	8000b86 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ac:	f000 f8f0 	bl	8000890 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b0:	f7ff ff0e 	bl	80004d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006b4:	f000 f9ae 	bl	8000a14 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart1);
 80006b8:	4865      	ldr	r0, [pc, #404]	; (8000850 <main+0x1ac>)
 80006ba:	f001 ff7b 	bl	80025b4 <HAL_UART_Init>
  flag = true;
 80006be:	4b65      	ldr	r3, [pc, #404]	; (8000854 <main+0x1b0>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	701a      	strb	r2, [r3, #0]
  MKS_set_param(0x90, 0x02);
 80006c4:	2102      	movs	r1, #2
 80006c6:	2090      	movs	r0, #144	; 0x90
 80006c8:	f7ff ff74 	bl	80005b4 <MKS_set_param>
  MKS_set_param(Enable_move, 0x01);
 80006cc:	2101      	movs	r1, #1
 80006ce:	20f3      	movs	r0, #243	; 0xf3
 80006d0:	f7ff ff70 	bl	80005b4 <MKS_set_param>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(read_rotation < 400000 && read_rotation > -400000){
 80006d4:	4b60      	ldr	r3, [pc, #384]	; (8000858 <main+0x1b4>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a60      	ldr	r2, [pc, #384]	; (800085c <main+0x1b8>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	dc0a      	bgt.n	80006f4 <main+0x50>
 80006de:	4b5e      	ldr	r3, [pc, #376]	; (8000858 <main+0x1b4>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a5f      	ldr	r2, [pc, #380]	; (8000860 <main+0x1bc>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	db05      	blt.n	80006f4 <main+0x50>
		  //MKS_rotate(18, 15, flag);
		  MKS_set_rotation_speed(10, flag);
 80006e8:	4b5a      	ldr	r3, [pc, #360]	; (8000854 <main+0x1b0>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	4619      	mov	r1, r3
 80006ee:	200a      	movs	r0, #10
 80006f0:	f7ff ff8c 	bl	800060c <MKS_set_rotation_speed>
	  }
	  HAL_Delay(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f000 fabb 	bl	8000c70 <HAL_Delay>
	  MKS_read_param(Position_angle, Position_angle_length);
 80006fa:	2106      	movs	r1, #6
 80006fc:	2036      	movs	r0, #54	; 0x36
 80006fe:	f7ff ff2b 	bl	8000558 <MKS_read_param>
	  MKS_read_param(Position_angle, Position_angle_length);
 8000702:	2106      	movs	r1, #6
 8000704:	2036      	movs	r0, #54	; 0x36
 8000706:	f7ff ff27 	bl	8000558 <MKS_read_param>
	  read_rotation = (int32_t)((receive[1] << 24) + (receive[2] << 16) + (receive[3] << 8) + receive[4]);
 800070a:	4b56      	ldr	r3, [pc, #344]	; (8000864 <main+0x1c0>)
 800070c:	785b      	ldrb	r3, [r3, #1]
 800070e:	061a      	lsls	r2, r3, #24
 8000710:	4b54      	ldr	r3, [pc, #336]	; (8000864 <main+0x1c0>)
 8000712:	789b      	ldrb	r3, [r3, #2]
 8000714:	041b      	lsls	r3, r3, #16
 8000716:	441a      	add	r2, r3
 8000718:	4b52      	ldr	r3, [pc, #328]	; (8000864 <main+0x1c0>)
 800071a:	78db      	ldrb	r3, [r3, #3]
 800071c:	021b      	lsls	r3, r3, #8
 800071e:	4413      	add	r3, r2
 8000720:	4a50      	ldr	r2, [pc, #320]	; (8000864 <main+0x1c0>)
 8000722:	7912      	ldrb	r2, [r2, #4]
 8000724:	4413      	add	r3, r2
 8000726:	4a4c      	ldr	r2, [pc, #304]	; (8000858 <main+0x1b4>)
 8000728:	6013      	str	r3, [r2, #0]
	  angle = (float)(read_rotation)/(encoder_quality/one_rotation_in_degrees);
 800072a:	4b4b      	ldr	r3, [pc, #300]	; (8000858 <main+0x1b4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	ee07 3a90 	vmov	s15, r3
 8000732:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000736:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8000868 <main+0x1c4>
 800073a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800073e:	4b4b      	ldr	r3, [pc, #300]	; (800086c <main+0x1c8>)
 8000740:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(10);
 8000744:	200a      	movs	r0, #10
 8000746:	f000 fa93 	bl	8000c70 <HAL_Delay>
	  MKS_read_param(Position_error, Position_error_length);
 800074a:	2104      	movs	r1, #4
 800074c:	2039      	movs	r0, #57	; 0x39
 800074e:	f7ff ff03 	bl	8000558 <MKS_read_param>
	  MKS_read_param(Position_error, Position_error_length);
 8000752:	2104      	movs	r1, #4
 8000754:	2039      	movs	r0, #57	; 0x39
 8000756:	f7ff feff 	bl	8000558 <MKS_read_param>
	  read_error = (int16_t)((receive[1] << 8) + (receive[2]));
 800075a:	4b42      	ldr	r3, [pc, #264]	; (8000864 <main+0x1c0>)
 800075c:	785b      	ldrb	r3, [r3, #1]
 800075e:	b29b      	uxth	r3, r3
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b29a      	uxth	r2, r3
 8000764:	4b3f      	ldr	r3, [pc, #252]	; (8000864 <main+0x1c0>)
 8000766:	789b      	ldrb	r3, [r3, #2]
 8000768:	b29b      	uxth	r3, r3
 800076a:	4413      	add	r3, r2
 800076c:	b29b      	uxth	r3, r3
 800076e:	b21a      	sxth	r2, r3
 8000770:	4b3f      	ldr	r3, [pc, #252]	; (8000870 <main+0x1cc>)
 8000772:	801a      	strh	r2, [r3, #0]
	  angle_err = (float)(read_error)/(encoder_quality/one_rotation_in_degrees);
 8000774:	4b3e      	ldr	r3, [pc, #248]	; (8000870 <main+0x1cc>)
 8000776:	f9b3 3000 	ldrsh.w	r3, [r3]
 800077a:	ee07 3a90 	vmov	s15, r3
 800077e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000782:	eddf 6a39 	vldr	s13, [pc, #228]	; 8000868 <main+0x1c4>
 8000786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800078a:	4b3a      	ldr	r3, [pc, #232]	; (8000874 <main+0x1d0>)
 800078c:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(10);
 8000790:	200a      	movs	r0, #10
 8000792:	f000 fa6d 	bl	8000c70 <HAL_Delay>
	  MKS_read_param(En_value, En_value_length);
 8000796:	2109      	movs	r1, #9
 8000798:	2030      	movs	r0, #48	; 0x30
 800079a:	f7ff fedd 	bl	8000558 <MKS_read_param>
	  MKS_read_param(En_value, En_value_length);
 800079e:	2109      	movs	r1, #9
 80007a0:	2030      	movs	r0, #48	; 0x30
 80007a2:	f7ff fed9 	bl	8000558 <MKS_read_param>
	  encoder_rotations = (int32_t)((receive[1] << 24) + (receive[2] << 16) + (receive[3] << 8) + receive[4]);
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <main+0x1c0>)
 80007a8:	785b      	ldrb	r3, [r3, #1]
 80007aa:	061a      	lsls	r2, r3, #24
 80007ac:	4b2d      	ldr	r3, [pc, #180]	; (8000864 <main+0x1c0>)
 80007ae:	789b      	ldrb	r3, [r3, #2]
 80007b0:	041b      	lsls	r3, r3, #16
 80007b2:	441a      	add	r2, r3
 80007b4:	4b2b      	ldr	r3, [pc, #172]	; (8000864 <main+0x1c0>)
 80007b6:	78db      	ldrb	r3, [r3, #3]
 80007b8:	021b      	lsls	r3, r3, #8
 80007ba:	4413      	add	r3, r2
 80007bc:	4a29      	ldr	r2, [pc, #164]	; (8000864 <main+0x1c0>)
 80007be:	7912      	ldrb	r2, [r2, #4]
 80007c0:	4413      	add	r3, r2
 80007c2:	4a2d      	ldr	r2, [pc, #180]	; (8000878 <main+0x1d4>)
 80007c4:	6013      	str	r3, [r2, #0]
	  encoder_value = (uint16_t)((receive[5] << 8) + receive[6]);
 80007c6:	4b27      	ldr	r3, [pc, #156]	; (8000864 <main+0x1c0>)
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <main+0x1c0>)
 80007d2:	799b      	ldrb	r3, [r3, #6]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	4413      	add	r3, r2
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b28      	ldr	r3, [pc, #160]	; (800087c <main+0x1d8>)
 80007dc:	801a      	strh	r2, [r3, #0]
	  angle_en = (float)(encoder_value)/(encoder_quality/one_rotation_in_degrees);
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <main+0x1d8>)
 80007e0:	881b      	ldrh	r3, [r3, #0]
 80007e2:	ee07 3a90 	vmov	s15, r3
 80007e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80007ea:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8000868 <main+0x1c4>
 80007ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f2:	4b23      	ldr	r3, [pc, #140]	; (8000880 <main+0x1dc>)
 80007f4:	edc3 7a00 	vstr	s15, [r3]
	  tester = 0;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <main+0x1e0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(400);
 80007fe:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000802:	f000 fa35 	bl	8000c70 <HAL_Delay>
//	  }
//	  if(angle < -180){
//		  flag = false;
//	  }

	  if(encoder_rotations >= 1){
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <main+0x1d4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	dd04      	ble.n	8000818 <main+0x174>
		  flag = true;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <main+0x1b0>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
		  MKS_stop();
 8000814:	f7ff ff24 	bl	8000660 <MKS_stop>
	  }
	  if(encoder_rotations <= -1){
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <main+0x1d4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	da04      	bge.n	800082a <main+0x186>
		  flag = false;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <main+0x1b0>)
 8000822:	2200      	movs	r2, #0
 8000824:	701a      	strb	r2, [r3, #0]
		  MKS_stop();
 8000826:	f7ff ff1b 	bl	8000660 <MKS_stop>
	  }
	  if(read_rotation > 800000 || read_rotation < -800000){
 800082a:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <main+0x1b4>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	4a16      	ldr	r2, [pc, #88]	; (8000888 <main+0x1e4>)
 8000830:	4293      	cmp	r3, r2
 8000832:	dc05      	bgt.n	8000840 <main+0x19c>
 8000834:	4b08      	ldr	r3, [pc, #32]	; (8000858 <main+0x1b4>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a14      	ldr	r2, [pc, #80]	; (800088c <main+0x1e8>)
 800083a:	4293      	cmp	r3, r2
 800083c:	f6bf af4a 	bge.w	80006d4 <main+0x30>
		  MKS_stop();
 8000840:	f7ff ff0e 	bl	8000660 <MKS_stop>
		  MKS_set_param(Enable_move, 0);
 8000844:	2100      	movs	r1, #0
 8000846:	20f3      	movs	r0, #243	; 0xf3
 8000848:	f7ff feb4 	bl	80005b4 <MKS_set_param>
	  if(read_rotation < 400000 && read_rotation > -400000){
 800084c:	e742      	b.n	80006d4 <main+0x30>
 800084e:	bf00      	nop
 8000850:	20000058 	.word	0x20000058
 8000854:	20000028 	.word	0x20000028
 8000858:	20000048 	.word	0x20000048
 800085c:	00061a7f 	.word	0x00061a7f
 8000860:	fff9e581 	.word	0xfff9e581
 8000864:	20000034 	.word	0x20000034
 8000868:	43360b61 	.word	0x43360b61
 800086c:	2000004c 	.word	0x2000004c
 8000870:	20000050 	.word	0x20000050
 8000874:	20000054 	.word	0x20000054
 8000878:	20000040 	.word	0x20000040
 800087c:	2000003c 	.word	0x2000003c
 8000880:	20000044 	.word	0x20000044
 8000884:	20000029 	.word	0x20000029
 8000888:	000c3500 	.word	0x000c3500
 800088c:	fff3cb00 	.word	0xfff3cb00

08000890 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b096      	sub	sp, #88	; 0x58
 8000894:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	2244      	movs	r2, #68	; 0x44
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fa30 	bl	8003d04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a4:	463b      	mov	r3, r7
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008b6:	f000 fd07 	bl	80012c8 <HAL_PWREx_ControlVoltageScaling>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008c0:	f000 f838 	bl	8000934 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008c4:	2310      	movs	r3, #16
 80008c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008c8:	2301      	movs	r3, #1
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d4:	2302      	movs	r3, #2
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008d8:	2301      	movs	r3, #1
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008dc:	2301      	movs	r3, #1
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80008e0:	2328      	movs	r3, #40	; 0x28
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008e4:	2307      	movs	r3, #7
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f000 fd3d 	bl	8001374 <HAL_RCC_OscConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000900:	f000 f818 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000904:	230f      	movs	r3, #15
 8000906:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000908:	2303      	movs	r3, #3
 800090a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	2104      	movs	r1, #4
 800091c:	4618      	mov	r0, r3
 800091e:	f001 f93d 	bl	8001b9c <HAL_RCC_ClockConfig>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000928:	f000 f804 	bl	8000934 <Error_Handler>
  }
}
 800092c:	bf00      	nop
 800092e:	3758      	adds	r7, #88	; 0x58
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <HAL_MspInit+0x44>)
 8000948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094a:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <HAL_MspInit+0x44>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6613      	str	r3, [r2, #96]	; 0x60
 8000952:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <HAL_MspInit+0x44>)
 8000954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <HAL_MspInit+0x44>)
 8000960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000962:	4a08      	ldr	r2, [pc, #32]	; (8000984 <HAL_MspInit+0x44>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6593      	str	r3, [r2, #88]	; 0x58
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HAL_MspInit+0x44>)
 800096c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009d4:	f000 f92c 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d8:	bf00      	nop
 80009da:	bd80      	pop	{r7, pc}

080009dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009e0:	4802      	ldr	r0, [pc, #8]	; (80009ec <USART1_IRQHandler+0x10>)
 80009e2:	f001 fef9 	bl	80027d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009e6:	bf00      	nop
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	20000058 	.word	0x20000058

080009f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009f4:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <SystemInit+0x20>)
 80009f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fa:	4a05      	ldr	r2, [pc, #20]	; (8000a10 <SystemInit+0x20>)
 80009fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a1a:	4a15      	ldr	r2, [pc, #84]	; (8000a70 <MX_USART1_UART_Init+0x5c>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a50:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_USART1_UART_Init+0x58>)
 8000a58:	f001 fdac 	bl	80025b4 <HAL_UART_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a62:	f7ff ff67 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000058 	.word	0x20000058
 8000a70:	40013800 	.word	0x40013800

08000a74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b09e      	sub	sp, #120	; 0x78
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2254      	movs	r2, #84	; 0x54
 8000a92:	2100      	movs	r1, #0
 8000a94:	4618      	mov	r0, r3
 8000a96:	f003 f935 	bl	8003d04 <memset>
  if(uartHandle->Instance==USART1)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <HAL_UART_MspInit+0xb8>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d13f      	bne.n	8000b24 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f001 fa97 	bl	8001fe4 <HAL_RCCEx_PeriphCLKConfig>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000abc:	f7ff ff3a 	bl	8000934 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ac0:	4b1b      	ldr	r3, [pc, #108]	; (8000b30 <HAL_UART_MspInit+0xbc>)
 8000ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac4:	4a1a      	ldr	r2, [pc, #104]	; (8000b30 <HAL_UART_MspInit+0xbc>)
 8000ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aca:	6613      	str	r3, [r2, #96]	; 0x60
 8000acc:	4b18      	ldr	r3, [pc, #96]	; (8000b30 <HAL_UART_MspInit+0xbc>)
 8000ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <HAL_UART_MspInit+0xbc>)
 8000ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000adc:	4a14      	ldr	r2, [pc, #80]	; (8000b30 <HAL_UART_MspInit+0xbc>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_UART_MspInit+0xbc>)
 8000ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000af0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000af4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b02:	2307      	movs	r3, #7
 8000b04:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b10:	f000 fa62 	bl	8000fd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8000b14:	2200      	movs	r2, #0
 8000b16:	210a      	movs	r1, #10
 8000b18:	2025      	movs	r0, #37	; 0x25
 8000b1a:	f000 f9a8 	bl	8000e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b1e:	2025      	movs	r0, #37	; 0x25
 8000b20:	f000 f9c1 	bl	8000ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b24:	bf00      	nop
 8000b26:	3778      	adds	r7, #120	; 0x78
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40013800 	.word	0x40013800
 8000b30:	40021000 	.word	0x40021000

08000b34 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b6c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b38:	f7ff ff5a 	bl	80009f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b3c:	480c      	ldr	r0, [pc, #48]	; (8000b70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b3e:	490d      	ldr	r1, [pc, #52]	; (8000b74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <LoopForever+0xe>)
  movs r3, #0
 8000b42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b44:	e002      	b.n	8000b4c <LoopCopyDataInit>

08000b46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4a:	3304      	adds	r3, #4

08000b4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b50:	d3f9      	bcc.n	8000b46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b54:	4c0a      	ldr	r4, [pc, #40]	; (8000b80 <LoopForever+0x16>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b58:	e001      	b.n	8000b5e <LoopFillZerobss>

08000b5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b5c:	3204      	adds	r2, #4

08000b5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b60:	d3fb      	bcc.n	8000b5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b62:	f003 f8ab 	bl	8003cbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b66:	f7ff fd9d 	bl	80006a4 <main>

08000b6a <LoopForever>:

LoopForever:
    b LoopForever
 8000b6a:	e7fe      	b.n	8000b6a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b74:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b78:	08003d84 	.word	0x08003d84
  ldr r2, =_sbss
 8000b7c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b80:	200000e0 	.word	0x200000e0

08000b84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b84:	e7fe      	b.n	8000b84 <ADC1_IRQHandler>

08000b86 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f961 	bl	8000e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b96:	200f      	movs	r0, #15
 8000b98:	f000 f80e 	bl	8000bb8 <HAL_InitTick>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d002      	beq.n	8000ba8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	71fb      	strb	r3, [r7, #7]
 8000ba6:	e001      	b.n	8000bac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba8:	f7ff feca 	bl	8000940 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bac:	79fb      	ldrb	r3, [r7, #7]
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_InitTick+0x6c>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d023      	beq.n	8000c14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_InitTick+0x70>)
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x6c>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f96d 	bl	8000ec2 <HAL_SYSTICK_Config>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d10f      	bne.n	8000c0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	2b0f      	cmp	r3, #15
 8000bf2:	d809      	bhi.n	8000c08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bfc:	f000 f937 	bl	8000e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c00:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_InitTick+0x74>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6013      	str	r3, [r2, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e004      	b.n	8000c18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
 8000c12:	e001      	b.n	8000c18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c14:	2301      	movs	r3, #1
 8000c16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c34:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x20>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x24>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4413      	add	r3, r2
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_IncTick+0x24>)
 8000c42:	6013      	str	r3, [r2, #0]
}
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	20000008 	.word	0x20000008
 8000c54:	200000dc 	.word	0x200000dc

08000c58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c5c:	4b03      	ldr	r3, [pc, #12]	; (8000c6c <HAL_GetTick+0x14>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	200000dc 	.word	0x200000dc

08000c70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c78:	f7ff ffee 	bl	8000c58 <HAL_GetTick>
 8000c7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c88:	d005      	beq.n	8000c96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <HAL_Delay+0x44>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	4413      	add	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c96:	bf00      	nop
 8000c98:	f7ff ffde 	bl	8000c58 <HAL_GetTick>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	1ad3      	subs	r3, r2, r3
 8000ca2:	68fa      	ldr	r2, [r7, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d8f7      	bhi.n	8000c98 <HAL_Delay+0x28>
  {
  }
}
 8000ca8:	bf00      	nop
 8000caa:	bf00      	nop
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
	...

08000e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e24:	d301      	bcc.n	8000e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00f      	b.n	8000e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e2a:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <SysTick_Config+0x40>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e32:	210f      	movs	r1, #15
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f7ff ff8e 	bl	8000d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e3c:	4b05      	ldr	r3, [pc, #20]	; (8000e54 <SysTick_Config+0x40>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e42:	4b04      	ldr	r3, [pc, #16]	; (8000e54 <SysTick_Config+0x40>)
 8000e44:	2207      	movs	r2, #7
 8000e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	e000e010 	.word	0xe000e010

08000e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f7ff ff29 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b086      	sub	sp, #24
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	4603      	mov	r3, r0
 8000e76:	60b9      	str	r1, [r7, #8]
 8000e78:	607a      	str	r2, [r7, #4]
 8000e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e80:	f7ff ff3e 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e84:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e86:	687a      	ldr	r2, [r7, #4]
 8000e88:	68b9      	ldr	r1, [r7, #8]
 8000e8a:	6978      	ldr	r0, [r7, #20]
 8000e8c:	f7ff ff8e 	bl	8000dac <NVIC_EncodePriority>
 8000e90:	4602      	mov	r2, r0
 8000e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e96:	4611      	mov	r1, r2
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff5d 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e9e:	bf00      	nop
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff31 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ffa2 	bl	8000e14 <SysTick_Config>
 8000ed0:	4603      	mov	r3, r0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d008      	beq.n	8000f04 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2204      	movs	r2, #4
 8000ef6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e022      	b.n	8000f4a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 020e 	bic.w	r2, r2, #14
 8000f12:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0201 	bic.w	r2, r2, #1
 8000f22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f28:	f003 021c 	and.w	r2, r3, #28
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f30:	2101      	movs	r1, #1
 8000f32:	fa01 f202 	lsl.w	r2, r1, r2
 8000f36:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b084      	sub	sp, #16
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d005      	beq.n	8000f7a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2204      	movs	r2, #4
 8000f72:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e029      	b.n	8000fce <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 020e 	bic.w	r2, r2, #14
 8000f88:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f022 0201 	bic.w	r2, r2, #1
 8000f98:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f003 021c 	and.w	r2, r3, #28
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	4798      	blx	r3
    }
  }
  return status;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b087      	sub	sp, #28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe6:	e148      	b.n	800127a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	f000 813a 	beq.w	8001274 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f003 0303 	and.w	r3, r3, #3
 8001008:	2b01      	cmp	r3, #1
 800100a:	d005      	beq.n	8001018 <HAL_GPIO_Init+0x40>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d130      	bne.n	800107a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43db      	mvns	r3, r3
 800102a:	693a      	ldr	r2, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800104e:	2201      	movs	r2, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	fa02 f303 	lsl.w	r3, r2, r3
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	f003 0201 	and.w	r2, r3, #1
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b03      	cmp	r3, #3
 8001084:	d017      	beq.n	80010b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	43db      	mvns	r3, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d123      	bne.n	800110a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	6939      	ldr	r1, [r7, #16]
 8001106:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43db      	mvns	r3, r3
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0203 	and.w	r2, r3, #3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 8094 	beq.w	8001274 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800114c:	4b52      	ldr	r3, [pc, #328]	; (8001298 <HAL_GPIO_Init+0x2c0>)
 800114e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001150:	4a51      	ldr	r2, [pc, #324]	; (8001298 <HAL_GPIO_Init+0x2c0>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6613      	str	r3, [r2, #96]	; 0x60
 8001158:	4b4f      	ldr	r3, [pc, #316]	; (8001298 <HAL_GPIO_Init+0x2c0>)
 800115a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001164:	4a4d      	ldr	r2, [pc, #308]	; (800129c <HAL_GPIO_Init+0x2c4>)
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	220f      	movs	r2, #15
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800118e:	d00d      	beq.n	80011ac <HAL_GPIO_Init+0x1d4>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a43      	ldr	r2, [pc, #268]	; (80012a0 <HAL_GPIO_Init+0x2c8>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d007      	beq.n	80011a8 <HAL_GPIO_Init+0x1d0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a42      	ldr	r2, [pc, #264]	; (80012a4 <HAL_GPIO_Init+0x2cc>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d101      	bne.n	80011a4 <HAL_GPIO_Init+0x1cc>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e004      	b.n	80011ae <HAL_GPIO_Init+0x1d6>
 80011a4:	2307      	movs	r3, #7
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x1d6>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_GPIO_Init+0x1d6>
 80011ac:	2300      	movs	r3, #0
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011be:	4937      	ldr	r1, [pc, #220]	; (800129c <HAL_GPIO_Init+0x2c4>)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011cc:	4b36      	ldr	r3, [pc, #216]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011f0:	4a2d      	ldr	r2, [pc, #180]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011f6:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001220:	4b21      	ldr	r3, [pc, #132]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001238:	2b00      	cmp	r3, #0
 800123a:	d003      	beq.n	8001244 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	43db      	mvns	r3, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	4313      	orrs	r3, r2
 800126c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_GPIO_Init+0x2d0>)
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	fa22 f303 	lsr.w	r3, r2, r3
 8001284:	2b00      	cmp	r3, #0
 8001286:	f47f aeaf 	bne.w	8000fe8 <HAL_GPIO_Init+0x10>
  }
}
 800128a:	bf00      	nop
 800128c:	bf00      	nop
 800128e:	371c      	adds	r7, #28
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	40021000 	.word	0x40021000
 800129c:	40010000 	.word	0x40010000
 80012a0:	48000400 	.word	0x48000400
 80012a4:	48000800 	.word	0x48000800
 80012a8:	40010400 	.word	0x40010400

080012ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012b0:	4b04      	ldr	r3, [pc, #16]	; (80012c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	40007000 	.word	0x40007000

080012c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012d6:	d130      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012d8:	4b23      	ldr	r3, [pc, #140]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e4:	d038      	beq.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ee:	4a1e      	ldr	r2, [pc, #120]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2232      	movs	r2, #50	; 0x32
 80012fc:	fb02 f303 	mul.w	r3, r2, r3
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001302:	fba2 2303 	umull	r2, r3, r2, r3
 8001306:	0c9b      	lsrs	r3, r3, #18
 8001308:	3301      	adds	r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130c:	e002      	b.n	8001314 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3b01      	subs	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001314:	4b14      	ldr	r3, [pc, #80]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001316:	695b      	ldr	r3, [r3, #20]
 8001318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001320:	d102      	bne.n	8001328 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1f2      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001334:	d110      	bne.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e00f      	b.n	800135a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800133a:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001346:	d007      	beq.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001348:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001350:	4a05      	ldr	r2, [pc, #20]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001356:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40007000 	.word	0x40007000
 800136c:	20000000 	.word	0x20000000
 8001370:	431bde83 	.word	0x431bde83

08001374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b088      	sub	sp, #32
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001382:	2301      	movs	r3, #1
 8001384:	f000 bc02 	b.w	8001b8c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001388:	4b96      	ldr	r3, [pc, #600]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
 8001390:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001392:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0310 	and.w	r3, r3, #16
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 80e4 	beq.w	8001572 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d007      	beq.n	80013c0 <HAL_RCC_OscConfig+0x4c>
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	f040 808b 	bne.w	80014ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	f040 8087 	bne.w	80014ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013c0:	4b88      	ldr	r3, [pc, #544]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0302 	and.w	r3, r3, #2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_OscConfig+0x64>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e3d9      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1a      	ldr	r2, [r3, #32]
 80013dc:	4b81      	ldr	r3, [pc, #516]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0308 	and.w	r3, r3, #8
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <HAL_RCC_OscConfig+0x7e>
 80013e8:	4b7e      	ldr	r3, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013f0:	e005      	b.n	80013fe <HAL_RCC_OscConfig+0x8a>
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80013f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f8:	091b      	lsrs	r3, r3, #4
 80013fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013fe:	4293      	cmp	r3, r2
 8001400:	d223      	bcs.n	800144a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
 8001406:	4618      	mov	r0, r3
 8001408:	f000 fd8c 	bl	8001f24 <RCC_SetFlashLatencyFromMSIRange>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e3ba      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001416:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a72      	ldr	r2, [pc, #456]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800141c:	f043 0308 	orr.w	r3, r3, #8
 8001420:	6013      	str	r3, [r2, #0]
 8001422:	4b70      	ldr	r3, [pc, #448]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	496d      	ldr	r1, [pc, #436]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001434:	4b6b      	ldr	r3, [pc, #428]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	69db      	ldr	r3, [r3, #28]
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	4968      	ldr	r1, [pc, #416]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001444:	4313      	orrs	r3, r2
 8001446:	604b      	str	r3, [r1, #4]
 8001448:	e025      	b.n	8001496 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800144a:	4b66      	ldr	r3, [pc, #408]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a65      	ldr	r2, [pc, #404]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b63      	ldr	r3, [pc, #396]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4960      	ldr	r1, [pc, #384]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001464:	4313      	orrs	r3, r2
 8001466:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001468:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	495b      	ldr	r1, [pc, #364]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001478:	4313      	orrs	r3, r2
 800147a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d109      	bne.n	8001496 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a1b      	ldr	r3, [r3, #32]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fd4c 	bl	8001f24 <RCC_SetFlashLatencyFromMSIRange>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001492:	2301      	movs	r3, #1
 8001494:	e37a      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001496:	f000 fc81 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 800149a:	4602      	mov	r2, r0
 800149c:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	091b      	lsrs	r3, r3, #4
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	4950      	ldr	r1, [pc, #320]	; (80015e8 <HAL_RCC_OscConfig+0x274>)
 80014a8:	5ccb      	ldrb	r3, [r1, r3]
 80014aa:	f003 031f 	and.w	r3, r3, #31
 80014ae:	fa22 f303 	lsr.w	r3, r2, r3
 80014b2:	4a4e      	ldr	r2, [pc, #312]	; (80015ec <HAL_RCC_OscConfig+0x278>)
 80014b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014b6:	4b4e      	ldr	r3, [pc, #312]	; (80015f0 <HAL_RCC_OscConfig+0x27c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fb7c 	bl	8000bb8 <HAL_InitTick>
 80014c0:	4603      	mov	r3, r0
 80014c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d052      	beq.n	8001570 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014ca:	7bfb      	ldrb	r3, [r7, #15]
 80014cc:	e35e      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d032      	beq.n	800153c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a42      	ldr	r2, [pc, #264]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80014dc:	f043 0301 	orr.w	r3, r3, #1
 80014e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014e2:	f7ff fbb9 	bl	8000c58 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014e8:	e008      	b.n	80014fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ea:	f7ff fbb5 	bl	8000c58 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d901      	bls.n	80014fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e347      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fc:	4b39      	ldr	r3, [pc, #228]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0302 	and.w	r3, r3, #2
 8001504:	2b00      	cmp	r3, #0
 8001506:	d0f0      	beq.n	80014ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001508:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a35      	ldr	r2, [pc, #212]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800150e:	f043 0308 	orr.w	r3, r3, #8
 8001512:	6013      	str	r3, [r2, #0]
 8001514:	4b33      	ldr	r3, [pc, #204]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	4930      	ldr	r1, [pc, #192]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001522:	4313      	orrs	r3, r2
 8001524:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001526:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	021b      	lsls	r3, r3, #8
 8001534:	492b      	ldr	r1, [pc, #172]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001536:	4313      	orrs	r3, r2
 8001538:	604b      	str	r3, [r1, #4]
 800153a:	e01a      	b.n	8001572 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800153c:	4b29      	ldr	r3, [pc, #164]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a28      	ldr	r2, [pc, #160]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001542:	f023 0301 	bic.w	r3, r3, #1
 8001546:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001548:	f7ff fb86 	bl	8000c58 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001550:	f7ff fb82 	bl	8000c58 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e314      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001562:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d1f0      	bne.n	8001550 <HAL_RCC_OscConfig+0x1dc>
 800156e:	e000      	b.n	8001572 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	2b00      	cmp	r3, #0
 800157c:	d073      	beq.n	8001666 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b08      	cmp	r3, #8
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x21c>
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d10e      	bne.n	80015a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	2b03      	cmp	r3, #3
 800158e:	d10b      	bne.n	80015a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d063      	beq.n	8001664 <HAL_RCC_OscConfig+0x2f0>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d15f      	bne.n	8001664 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015a4:	2301      	movs	r3, #1
 80015a6:	e2f1      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015b0:	d106      	bne.n	80015c0 <HAL_RCC_OscConfig+0x24c>
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a0b      	ldr	r2, [pc, #44]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	e025      	b.n	800160c <HAL_RCC_OscConfig+0x298>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015c8:	d114      	bne.n	80015f4 <HAL_RCC_OscConfig+0x280>
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b03      	ldr	r3, [pc, #12]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a02      	ldr	r2, [pc, #8]	; (80015e4 <HAL_RCC_OscConfig+0x270>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	e013      	b.n	800160c <HAL_RCC_OscConfig+0x298>
 80015e4:	40021000 	.word	0x40021000
 80015e8:	08003d2c 	.word	0x08003d2c
 80015ec:	20000000 	.word	0x20000000
 80015f0:	20000004 	.word	0x20000004
 80015f4:	4ba0      	ldr	r3, [pc, #640]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a9f      	ldr	r2, [pc, #636]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80015fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015fe:	6013      	str	r3, [r2, #0]
 8001600:	4b9d      	ldr	r3, [pc, #628]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a9c      	ldr	r2, [pc, #624]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001606:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d013      	beq.n	800163c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fb20 	bl	8000c58 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800161c:	f7ff fb1c 	bl	8000c58 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	; 0x64
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e2ae      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800162e:	4b92      	ldr	r3, [pc, #584]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d0f0      	beq.n	800161c <HAL_RCC_OscConfig+0x2a8>
 800163a:	e014      	b.n	8001666 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fb0c 	bl	8000c58 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fb08 	bl	8000c58 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e29a      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001656:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f0      	bne.n	8001644 <HAL_RCC_OscConfig+0x2d0>
 8001662:	e000      	b.n	8001666 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001664:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d060      	beq.n	8001734 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001672:	69bb      	ldr	r3, [r7, #24]
 8001674:	2b04      	cmp	r3, #4
 8001676:	d005      	beq.n	8001684 <HAL_RCC_OscConfig+0x310>
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b0c      	cmp	r3, #12
 800167c:	d119      	bne.n	80016b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	2b02      	cmp	r3, #2
 8001682:	d116      	bne.n	80016b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	4b7c      	ldr	r3, [pc, #496]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800168c:	2b00      	cmp	r3, #0
 800168e:	d005      	beq.n	800169c <HAL_RCC_OscConfig+0x328>
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e277      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b76      	ldr	r3, [pc, #472]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	4973      	ldr	r1, [pc, #460]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b0:	e040      	b.n	8001734 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d023      	beq.n	8001702 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ba:	4b6f      	ldr	r3, [pc, #444]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a6e      	ldr	r2, [pc, #440]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80016c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fac7 	bl	8000c58 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fac3 	bl	8000c58 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e255      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e0:	4b65      	ldr	r3, [pc, #404]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	4b62      	ldr	r3, [pc, #392]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	495f      	ldr	r1, [pc, #380]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
 8001700:	e018      	b.n	8001734 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001702:	4b5d      	ldr	r3, [pc, #372]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a5c      	ldr	r2, [pc, #368]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800170c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170e:	f7ff faa3 	bl	8000c58 <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001716:	f7ff fa9f 	bl	8000c58 <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e231      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f0      	bne.n	8001716 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d03c      	beq.n	80017ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d01c      	beq.n	8001782 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001748:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 800174a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174e:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001750:	f043 0301 	orr.w	r3, r3, #1
 8001754:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fa7e 	bl	8000c58 <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fa7a 	bl	8000c58 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e20c      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001772:	4b41      	ldr	r3, [pc, #260]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d0ef      	beq.n	8001760 <HAL_RCC_OscConfig+0x3ec>
 8001780:	e01b      	b.n	80017ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001782:	4b3d      	ldr	r3, [pc, #244]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001784:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001788:	4a3b      	ldr	r2, [pc, #236]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 800178a:	f023 0301 	bic.w	r3, r3, #1
 800178e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fa61 	bl	8000c58 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fa5d 	bl	8000c58 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e1ef      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017ac:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80017ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1ef      	bne.n	800179a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f000 80a6 	beq.w	8001914 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017cc:	4b2a      	ldr	r3, [pc, #168]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80017ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10d      	bne.n	80017f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d8:	4b27      	ldr	r3, [pc, #156]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80017da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017dc:	4a26      	ldr	r2, [pc, #152]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80017de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e2:	6593      	str	r3, [r2, #88]	; 0x58
 80017e4:	4b24      	ldr	r3, [pc, #144]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 80017e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017f0:	2301      	movs	r3, #1
 80017f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f4:	4b21      	ldr	r3, [pc, #132]	; (800187c <HAL_RCC_OscConfig+0x508>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d118      	bne.n	8001832 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001800:	4b1e      	ldr	r3, [pc, #120]	; (800187c <HAL_RCC_OscConfig+0x508>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1d      	ldr	r2, [pc, #116]	; (800187c <HAL_RCC_OscConfig+0x508>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180c:	f7ff fa24 	bl	8000c58 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001814:	f7ff fa20 	bl	8000c58 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e1b2      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001826:	4b15      	ldr	r3, [pc, #84]	; (800187c <HAL_RCC_OscConfig+0x508>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d0f0      	beq.n	8001814 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d108      	bne.n	800184c <HAL_RCC_OscConfig+0x4d8>
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 800183c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800184a:	e029      	b.n	80018a0 <HAL_RCC_OscConfig+0x52c>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	2b05      	cmp	r3, #5
 8001852:	d115      	bne.n	8001880 <HAL_RCC_OscConfig+0x50c>
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186a:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_RCC_OscConfig+0x504>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001874:	e014      	b.n	80018a0 <HAL_RCC_OscConfig+0x52c>
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000
 800187c:	40007000 	.word	0x40007000
 8001880:	4b9a      	ldr	r3, [pc, #616]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a99      	ldr	r2, [pc, #612]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001888:	f023 0301 	bic.w	r3, r3, #1
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	4b96      	ldr	r3, [pc, #600]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001896:	4a95      	ldr	r2, [pc, #596]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001898:	f023 0304 	bic.w	r3, r3, #4
 800189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d016      	beq.n	80018d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a8:	f7ff f9d6 	bl	8000c58 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff f9d2 	bl	8000c58 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e162      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018c6:	4b89      	ldr	r3, [pc, #548]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 80018c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ed      	beq.n	80018b0 <HAL_RCC_OscConfig+0x53c>
 80018d4:	e015      	b.n	8001902 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff f9bf 	bl	8000c58 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff f9bb 	bl	8000c58 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e14b      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f4:	4b7d      	ldr	r3, [pc, #500]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ed      	bne.n	80018de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001902:	7ffb      	ldrb	r3, [r7, #31]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001908:	4b78      	ldr	r3, [pc, #480]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 800190a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190c:	4a77      	ldr	r2, [pc, #476]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 800190e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001912:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b00      	cmp	r3, #0
 800191e:	d03c      	beq.n	800199a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01c      	beq.n	8001962 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001928:	4b70      	ldr	r3, [pc, #448]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 800192a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192e:	4a6f      	ldr	r2, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff f98e 	bl	8000c58 <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800193e:	e008      	b.n	8001952 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001940:	f7ff f98a 	bl	8000c58 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	2b02      	cmp	r3, #2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e11c      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001952:	4b66      	ldr	r3, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d0ef      	beq.n	8001940 <HAL_RCC_OscConfig+0x5cc>
 8001960:	e01b      	b.n	800199a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001962:	4b62      	ldr	r3, [pc, #392]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001964:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001968:	4a60      	ldr	r2, [pc, #384]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 800196a:	f023 0301 	bic.w	r3, r3, #1
 800196e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001972:	f7ff f971 	bl	8000c58 <HAL_GetTick>
 8001976:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001978:	e008      	b.n	800198c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800197a:	f7ff f96d 	bl	8000c58 <HAL_GetTick>
 800197e:	4602      	mov	r2, r0
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	2b02      	cmp	r3, #2
 8001986:	d901      	bls.n	800198c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e0ff      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800198c:	4b57      	ldr	r3, [pc, #348]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 800198e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1ef      	bne.n	800197a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199e:	2b00      	cmp	r3, #0
 80019a0:	f000 80f3 	beq.w	8001b8a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	f040 80c9 	bne.w	8001b40 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ae:	4b4f      	ldr	r3, [pc, #316]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 80019b0:	68db      	ldr	r3, [r3, #12]
 80019b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f003 0203 	and.w	r2, r3, #3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019be:	429a      	cmp	r2, r3
 80019c0:	d12c      	bne.n	8001a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019cc:	3b01      	subs	r3, #1
 80019ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d123      	bne.n	8001a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d11b      	bne.n	8001a1c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d113      	bne.n	8001a1c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	085b      	lsrs	r3, r3, #1
 8001a00:	3b01      	subs	r3, #1
 8001a02:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d109      	bne.n	8001a1c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	3b01      	subs	r3, #1
 8001a16:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d06b      	beq.n	8001af4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	2b0c      	cmp	r3, #12
 8001a20:	d062      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0ac      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a2d      	ldr	r2, [pc, #180]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001a38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a3c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a3e:	f7ff f90b 	bl	8000c58 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f907 	bl	8000c58 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e099      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a58:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d1f0      	bne.n	8001a46 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a64:	4b21      	ldr	r3, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_RCC_OscConfig+0x77c>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a74:	3a01      	subs	r2, #1
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	4311      	orrs	r1, r2
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a7e:	0212      	lsls	r2, r2, #8
 8001a80:	4311      	orrs	r1, r2
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a86:	0852      	lsrs	r2, r2, #1
 8001a88:	3a01      	subs	r2, #1
 8001a8a:	0552      	lsls	r2, r2, #21
 8001a8c:	4311      	orrs	r1, r2
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a92:	0852      	lsrs	r2, r2, #1
 8001a94:	3a01      	subs	r2, #1
 8001a96:	0652      	lsls	r2, r2, #25
 8001a98:	4311      	orrs	r1, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a9e:	06d2      	lsls	r2, r2, #27
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	4912      	ldr	r1, [pc, #72]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ab2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001abe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ac0:	f7ff f8ca 	bl	8000c58 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff f8c6 	bl	8000c58 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e058      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_OscConfig+0x778>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d0f0      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ae6:	e050      	b.n	8001b8a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e04f      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
 8001aec:	40021000 	.word	0x40021000
 8001af0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af4:	4b27      	ldr	r3, [pc, #156]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d144      	bne.n	8001b8a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b00:	4b24      	ldr	r3, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a23      	ldr	r2, [pc, #140]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b16:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b18:	f7ff f89e 	bl	8000c58 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f89a 	bl	8000c58 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e02c      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b32:	4b18      	ldr	r3, [pc, #96]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x7ac>
 8001b3e:	e024      	b.n	8001b8a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	2b0c      	cmp	r3, #12
 8001b44:	d01f      	beq.n	8001b86 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b4c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b52:	f7ff f881 	bl	8000c58 <HAL_GetTick>
 8001b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b5a:	f7ff f87d 	bl	8000c58 <HAL_GetTick>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e00f      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1f0      	bne.n	8001b5a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	4905      	ldr	r1, [pc, #20]	; (8001b94 <HAL_RCC_OscConfig+0x820>)
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x824>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	60cb      	str	r3, [r1, #12]
 8001b84:	e001      	b.n	8001b8a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e000      	b.n	8001b8c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3720      	adds	r7, #32
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	feeefffc 	.word	0xfeeefffc

08001b9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d101      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0e7      	b.n	8001d80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb0:	4b75      	ldr	r3, [pc, #468]	; (8001d88 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d910      	bls.n	8001be0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bbe:	4b72      	ldr	r3, [pc, #456]	; (8001d88 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f023 0207 	bic.w	r2, r3, #7
 8001bc6:	4970      	ldr	r1, [pc, #448]	; (8001d88 <HAL_RCC_ClockConfig+0x1ec>)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bce:	4b6e      	ldr	r3, [pc, #440]	; (8001d88 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0cf      	b.n	8001d80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d010      	beq.n	8001c0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4b66      	ldr	r3, [pc, #408]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d908      	bls.n	8001c0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bfc:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4960      	ldr	r1, [pc, #384]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d04c      	beq.n	8001cb4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d107      	bne.n	8001c32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	4b5a      	ldr	r3, [pc, #360]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d121      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e0a6      	b.n	8001d80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b02      	cmp	r3, #2
 8001c38:	d107      	bne.n	8001c4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3a:	4b54      	ldr	r3, [pc, #336]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d115      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e09a      	b.n	8001d80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c52:	4b4e      	ldr	r3, [pc, #312]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d109      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e08e      	b.n	8001d80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c62:	4b4a      	ldr	r3, [pc, #296]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e086      	b.n	8001d80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c72:	4b46      	ldr	r3, [pc, #280]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f023 0203 	bic.w	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4943      	ldr	r1, [pc, #268]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c84:	f7fe ffe8 	bl	8000c58 <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c8c:	f7fe ffe4 	bl	8000c58 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e06e      	b.n	8001d80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ca2:	4b3a      	ldr	r3, [pc, #232]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 020c 	and.w	r2, r3, #12
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d1eb      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0302 	and.w	r3, r3, #2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d208      	bcs.n	8001ce2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cd0:	4b2e      	ldr	r3, [pc, #184]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	492b      	ldr	r1, [pc, #172]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce2:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_RCC_ClockConfig+0x1ec>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d210      	bcs.n	8001d12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cf0:	4b25      	ldr	r3, [pc, #148]	; (8001d88 <HAL_RCC_ClockConfig+0x1ec>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f023 0207 	bic.w	r2, r3, #7
 8001cf8:	4923      	ldr	r1, [pc, #140]	; (8001d88 <HAL_RCC_ClockConfig+0x1ec>)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <HAL_RCC_ClockConfig+0x1ec>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	683a      	ldr	r2, [r7, #0]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d001      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e036      	b.n	8001d80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d008      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d1e:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	4918      	ldr	r1, [pc, #96]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d009      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4910      	ldr	r1, [pc, #64]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d50:	f000 f824 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <HAL_RCC_ClockConfig+0x1f0>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	490b      	ldr	r1, [pc, #44]	; (8001d90 <HAL_RCC_ClockConfig+0x1f4>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	4a09      	ldr	r2, [pc, #36]	; (8001d94 <HAL_RCC_ClockConfig+0x1f8>)
 8001d6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1fc>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe ff1f 	bl	8000bb8 <HAL_InitTick>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40022000 	.word	0x40022000
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	08003d2c 	.word	0x08003d2c
 8001d94:	20000000 	.word	0x20000000
 8001d98:	20000004 	.word	0x20000004

08001d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001daa:	4b3e      	ldr	r3, [pc, #248]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	f003 0303 	and.w	r3, r3, #3
 8001dbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d121      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d11e      	bne.n	8001e0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001dd0:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de2:	0a1b      	lsrs	r3, r3, #8
 8001de4:	f003 030f 	and.w	r3, r3, #15
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	e005      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dec:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 030f 	and.w	r3, r3, #15
 8001df6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001df8:	4a2b      	ldr	r2, [pc, #172]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d10d      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e14:	4b25      	ldr	r3, [pc, #148]	; (8001eac <HAL_RCC_GetSysClockFreq+0x110>)
 8001e16:	61bb      	str	r3, [r7, #24]
 8001e18:	e004      	b.n	8001e24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	2b08      	cmp	r3, #8
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d134      	bne.n	8001e94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d003      	beq.n	8001e42 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d003      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0xac>
 8001e40:	e005      	b.n	8001e4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e42:	4b1a      	ldr	r3, [pc, #104]	; (8001eac <HAL_RCC_GetSysClockFreq+0x110>)
 8001e44:	617b      	str	r3, [r7, #20]
      break;
 8001e46:	e005      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e48:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e4a:	617b      	str	r3, [r7, #20]
      break;
 8001e4c:	e002      	b.n	8001e54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	617b      	str	r3, [r7, #20]
      break;
 8001e52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	3301      	adds	r3, #1
 8001e60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	fb03 f202 	mul.w	r2, r3, r2
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e7a:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	0e5b      	lsrs	r3, r3, #25
 8001e80:	f003 0303 	and.w	r3, r3, #3
 8001e84:	3301      	adds	r3, #1
 8001e86:	005b      	lsls	r3, r3, #1
 8001e88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e94:	69bb      	ldr	r3, [r7, #24]
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	08003d44 	.word	0x08003d44
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	007a1200 	.word	0x007a1200

08001eb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ed0:	f7ff fff0 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4904      	ldr	r1, [pc, #16]	; (8001ef4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08003d3c 	.word	0x08003d3c

08001ef8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001efc:	f7ff ffda 	bl	8001eb4 <HAL_RCC_GetHCLKFreq>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	0adb      	lsrs	r3, r3, #11
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	4904      	ldr	r1, [pc, #16]	; (8001f20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f0e:	5ccb      	ldrb	r3, [r1, r3]
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	08003d3c 	.word	0x08003d3c

08001f24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f30:	4b2a      	ldr	r3, [pc, #168]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f3c:	f7ff f9b6 	bl	80012ac <HAL_PWREx_GetVoltageRange>
 8001f40:	6178      	str	r0, [r7, #20]
 8001f42:	e014      	b.n	8001f6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f44:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f48:	4a24      	ldr	r2, [pc, #144]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f50:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f5c:	f7ff f9a6 	bl	80012ac <HAL_PWREx_GetVoltageRange>
 8001f60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f62:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f74:	d10b      	bne.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b80      	cmp	r3, #128	; 0x80
 8001f7a:	d919      	bls.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2ba0      	cmp	r3, #160	; 0xa0
 8001f80:	d902      	bls.n	8001f88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f82:	2302      	movs	r3, #2
 8001f84:	613b      	str	r3, [r7, #16]
 8001f86:	e013      	b.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f88:	2301      	movs	r3, #1
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	e010      	b.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b80      	cmp	r3, #128	; 0x80
 8001f92:	d902      	bls.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f94:	2303      	movs	r3, #3
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	e00a      	b.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b80      	cmp	r3, #128	; 0x80
 8001f9e:	d102      	bne.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	e004      	b.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b70      	cmp	r3, #112	; 0x70
 8001faa:	d101      	bne.n	8001fb0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f023 0207 	bic.w	r2, r3, #7
 8001fb8:	4909      	ldr	r1, [pc, #36]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fc0:	4b07      	ldr	r3, [pc, #28]	; (8001fe0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d001      	beq.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	40022000 	.word	0x40022000

08001fe4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001fec:	2300      	movs	r3, #0
 8001fee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d031      	beq.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002004:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002008:	d01a      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800200a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800200e:	d814      	bhi.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002010:	2b00      	cmp	r3, #0
 8002012:	d009      	beq.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002014:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002018:	d10f      	bne.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800201a:	4b5d      	ldr	r3, [pc, #372]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	4a5c      	ldr	r2, [pc, #368]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002026:	e00c      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3304      	adds	r3, #4
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f9ce 	bl	80023d0 <RCCEx_PLLSAI1_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002038:	e003      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	74fb      	strb	r3, [r7, #19]
      break;
 800203e:	e000      	b.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002042:	7cfb      	ldrb	r3, [r7, #19]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d10b      	bne.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002048:	4b51      	ldr	r3, [pc, #324]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002056:	494e      	ldr	r1, [pc, #312]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800205e:	e001      	b.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 809e 	beq.w	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002076:	4b46      	ldr	r3, [pc, #280]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002086:	2300      	movs	r3, #0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00d      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800208c:	4b40      	ldr	r3, [pc, #256]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002090:	4a3f      	ldr	r2, [pc, #252]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002096:	6593      	str	r3, [r2, #88]	; 0x58
 8002098:	4b3d      	ldr	r3, [pc, #244]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a0:	60bb      	str	r3, [r7, #8]
 80020a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020a4:	2301      	movs	r3, #1
 80020a6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020a8:	4b3a      	ldr	r3, [pc, #232]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a39      	ldr	r2, [pc, #228]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020b4:	f7fe fdd0 	bl	8000c58 <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020ba:	e009      	b.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020bc:	f7fe fdcc 	bl	8000c58 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d902      	bls.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	74fb      	strb	r3, [r7, #19]
        break;
 80020ce:	e005      	b.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020d0:	4b30      	ldr	r3, [pc, #192]	; (8002194 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d0ef      	beq.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d15a      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80020e2:	4b2b      	ldr	r3, [pc, #172]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01e      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d019      	beq.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80020fe:	4b24      	ldr	r3, [pc, #144]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002108:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800210a:	4b21      	ldr	r3, [pc, #132]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	4a1f      	ldr	r2, [pc, #124]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800211a:	4b1d      	ldr	r3, [pc, #116]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	4a1b      	ldr	r2, [pc, #108]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002122:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800212a:	4a19      	ldr	r2, [pc, #100]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	d016      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800213c:	f7fe fd8c 	bl	8000c58 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002142:	e00b      	b.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002144:	f7fe fd88 	bl	8000c58 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d902      	bls.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	74fb      	strb	r3, [r7, #19]
            break;
 800215a:	e006      	b.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002162:	f003 0302 	and.w	r3, r3, #2
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0ec      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d10b      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002176:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	4904      	ldr	r1, [pc, #16]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002180:	4313      	orrs	r3, r2
 8002182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002186:	e009      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002188:	7cfb      	ldrb	r3, [r7, #19]
 800218a:	74bb      	strb	r3, [r7, #18]
 800218c:	e006      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002198:	7cfb      	ldrb	r3, [r7, #19]
 800219a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800219c:	7c7b      	ldrb	r3, [r7, #17]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d105      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a2:	4b8a      	ldr	r3, [pc, #552]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	4a89      	ldr	r2, [pc, #548]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00a      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021ba:	4b84      	ldr	r3, [pc, #528]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c0:	f023 0203 	bic.w	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4980      	ldr	r1, [pc, #512]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00a      	beq.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021dc:	4b7b      	ldr	r3, [pc, #492]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e2:	f023 020c 	bic.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	4978      	ldr	r1, [pc, #480]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0320 	and.w	r3, r3, #32
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00a      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80021fe:	4b73      	ldr	r3, [pc, #460]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002204:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220c:	496f      	ldr	r1, [pc, #444]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220e:	4313      	orrs	r3, r2
 8002210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221c:	2b00      	cmp	r3, #0
 800221e:	d00a      	beq.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002220:	4b6a      	ldr	r3, [pc, #424]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222e:	4967      	ldr	r1, [pc, #412]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002230:	4313      	orrs	r3, r2
 8002232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002242:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	495e      	ldr	r1, [pc, #376]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002264:	4b59      	ldr	r3, [pc, #356]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	4956      	ldr	r1, [pc, #344]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002274:	4313      	orrs	r3, r2
 8002276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002286:	4b51      	ldr	r3, [pc, #324]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	494d      	ldr	r1, [pc, #308]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002296:	4313      	orrs	r3, r2
 8002298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d028      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022a8:	4b48      	ldr	r3, [pc, #288]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4945      	ldr	r1, [pc, #276]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022c6:	d106      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022c8:	4b40      	ldr	r3, [pc, #256]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a3f      	ldr	r2, [pc, #252]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022d2:	60d3      	str	r3, [r2, #12]
 80022d4:	e011      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022de:	d10c      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	2101      	movs	r1, #1
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 f872 	bl	80023d0 <RCCEx_PLLSAI1_Config>
 80022ec:	4603      	mov	r3, r0
 80022ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d028      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002308:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	492d      	ldr	r1, [pc, #180]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002316:	4313      	orrs	r3, r2
 8002318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002320:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002324:	d106      	bne.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	4a28      	ldr	r2, [pc, #160]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800232c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002330:	60d3      	str	r3, [r2, #12]
 8002332:	e011      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800233c:	d10c      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3304      	adds	r3, #4
 8002342:	2101      	movs	r1, #1
 8002344:	4618      	mov	r0, r3
 8002346:	f000 f843 	bl	80023d0 <RCCEx_PLLSAI1_Config>
 800234a:	4603      	mov	r3, r0
 800234c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002354:	7cfb      	ldrb	r3, [r7, #19]
 8002356:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01c      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002372:	4916      	ldr	r1, [pc, #88]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002374:	4313      	orrs	r3, r2
 8002376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002382:	d10c      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	2102      	movs	r1, #2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f820 	bl	80023d0 <RCCEx_PLLSAI1_Config>
 8002390:	4603      	mov	r3, r0
 8002392:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002394:	7cfb      	ldrb	r3, [r7, #19]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b8:	4904      	ldr	r1, [pc, #16]	; (80023cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3718      	adds	r7, #24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000

080023d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80023da:	2300      	movs	r3, #0
 80023dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023de:	4b74      	ldr	r3, [pc, #464]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d018      	beq.n	800241c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023ea:	4b71      	ldr	r3, [pc, #452]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	f003 0203 	and.w	r2, r3, #3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d10d      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
       ||
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d009      	beq.n	8002416 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002402:	4b6b      	ldr	r3, [pc, #428]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	091b      	lsrs	r3, r3, #4
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
       ||
 8002412:	429a      	cmp	r2, r3
 8002414:	d047      	beq.n	80024a6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	73fb      	strb	r3, [r7, #15]
 800241a:	e044      	b.n	80024a6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d018      	beq.n	8002456 <RCCEx_PLLSAI1_Config+0x86>
 8002424:	2b03      	cmp	r3, #3
 8002426:	d825      	bhi.n	8002474 <RCCEx_PLLSAI1_Config+0xa4>
 8002428:	2b01      	cmp	r3, #1
 800242a:	d002      	beq.n	8002432 <RCCEx_PLLSAI1_Config+0x62>
 800242c:	2b02      	cmp	r3, #2
 800242e:	d009      	beq.n	8002444 <RCCEx_PLLSAI1_Config+0x74>
 8002430:	e020      	b.n	8002474 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002432:	4b5f      	ldr	r3, [pc, #380]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d11d      	bne.n	800247a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002442:	e01a      	b.n	800247a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002444:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800244c:	2b00      	cmp	r3, #0
 800244e:	d116      	bne.n	800247e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002454:	e013      	b.n	800247e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002456:	4b56      	ldr	r3, [pc, #344]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10f      	bne.n	8002482 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002462:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002472:	e006      	b.n	8002482 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      break;
 8002478:	e004      	b.n	8002484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800247a:	bf00      	nop
 800247c:	e002      	b.n	8002484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800247e:	bf00      	nop
 8002480:	e000      	b.n	8002484 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002482:	bf00      	nop
    }

    if(status == HAL_OK)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10d      	bne.n	80024a6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800248a:	4b49      	ldr	r3, [pc, #292]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	3b01      	subs	r3, #1
 800249c:	011b      	lsls	r3, r3, #4
 800249e:	430b      	orrs	r3, r1
 80024a0:	4943      	ldr	r1, [pc, #268]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024a6:	7bfb      	ldrb	r3, [r7, #15]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d17c      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024ac:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a3f      	ldr	r2, [pc, #252]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80024b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b8:	f7fe fbce 	bl	8000c58 <HAL_GetTick>
 80024bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024be:	e009      	b.n	80024d4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024c0:	f7fe fbca 	bl	8000c58 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d902      	bls.n	80024d4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	73fb      	strb	r3, [r7, #15]
        break;
 80024d2:	e005      	b.n	80024e0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80024d4:	4b36      	ldr	r3, [pc, #216]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1ef      	bne.n	80024c0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d15f      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d110      	bne.n	800250e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024ec:	4b30      	ldr	r3, [pc, #192]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ee:	691b      	ldr	r3, [r3, #16]
 80024f0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024f4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6892      	ldr	r2, [r2, #8]
 80024fc:	0211      	lsls	r1, r2, #8
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	68d2      	ldr	r2, [r2, #12]
 8002502:	06d2      	lsls	r2, r2, #27
 8002504:	430a      	orrs	r2, r1
 8002506:	492a      	ldr	r1, [pc, #168]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002508:	4313      	orrs	r3, r2
 800250a:	610b      	str	r3, [r1, #16]
 800250c:	e027      	b.n	800255e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d112      	bne.n	800253a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002514:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800251c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	6892      	ldr	r2, [r2, #8]
 8002524:	0211      	lsls	r1, r2, #8
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6912      	ldr	r2, [r2, #16]
 800252a:	0852      	lsrs	r2, r2, #1
 800252c:	3a01      	subs	r2, #1
 800252e:	0552      	lsls	r2, r2, #21
 8002530:	430a      	orrs	r2, r1
 8002532:	491f      	ldr	r1, [pc, #124]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	610b      	str	r3, [r1, #16]
 8002538:	e011      	b.n	800255e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800253a:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002542:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	6892      	ldr	r2, [r2, #8]
 800254a:	0211      	lsls	r1, r2, #8
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6952      	ldr	r2, [r2, #20]
 8002550:	0852      	lsrs	r2, r2, #1
 8002552:	3a01      	subs	r2, #1
 8002554:	0652      	lsls	r2, r2, #25
 8002556:	430a      	orrs	r2, r1
 8002558:	4915      	ldr	r1, [pc, #84]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800255a:	4313      	orrs	r3, r2
 800255c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800255e:	4b14      	ldr	r3, [pc, #80]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002564:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002568:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fb75 	bl	8000c58 <HAL_GetTick>
 800256e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002570:	e009      	b.n	8002586 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002572:	f7fe fb71 	bl	8000c58 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d902      	bls.n	8002586 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	73fb      	strb	r3, [r7, #15]
          break;
 8002584:	e005      	b.n	8002592 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002586:	4b0a      	ldr	r3, [pc, #40]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0ef      	beq.n	8002572 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002592:	7bfb      	ldrb	r3, [r7, #15]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d106      	bne.n	80025a6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002598:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800259a:	691a      	ldr	r2, [r3, #16]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4903      	ldr	r1, [pc, #12]	; (80025b0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40021000 	.word	0x40021000

080025b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d101      	bne.n	80025c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e040      	b.n	8002648 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d106      	bne.n	80025dc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7fe fa4c 	bl	8000a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2224      	movs	r2, #36	; 0x24
 80025e0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0201 	bic.w	r2, r2, #1
 80025f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 fbf2 	bl	8002ddc <UART_SetConfig>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e022      	b.n	8002648 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fe12 	bl	8003234 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800261e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800262e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0201 	orr.w	r2, r2, #1
 800263e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fe99 	bl	8003378 <UART_CheckIdleState>
 8002646:	4603      	mov	r3, r0
}
 8002648:	4618      	mov	r0, r3
 800264a:	3708      	adds	r7, #8
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002650:	b480      	push	{r7}
 8002652:	b08b      	sub	sp, #44	; 0x2c
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002662:	2b20      	cmp	r3, #32
 8002664:	d156      	bne.n	8002714 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <HAL_UART_Transmit_IT+0x22>
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e04f      	b.n	8002716 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_UART_Transmit_IT+0x34>
 8002680:	2302      	movs	r3, #2
 8002682:	e048      	b.n	8002716 <HAL_UART_Transmit_IT+0xc6>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	88fa      	ldrh	r2, [r7, #6]
 8002696:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	88fa      	ldrh	r2, [r7, #6]
 800269e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2221      	movs	r2, #33	; 0x21
 80026b4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026be:	d107      	bne.n	80026d0 <HAL_UART_Transmit_IT+0x80>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	691b      	ldr	r3, [r3, #16]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d103      	bne.n	80026d0 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <HAL_UART_Transmit_IT+0xd4>)
 80026cc:	669a      	str	r2, [r3, #104]	; 0x68
 80026ce:	e002      	b.n	80026d6 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4a15      	ldr	r2, [pc, #84]	; (8002728 <HAL_UART_Transmit_IT+0xd8>)
 80026d4:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	e853 3f00 	ldrex	r3, [r3]
 80026ea:	613b      	str	r3, [r7, #16]
   return(result);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	461a      	mov	r2, r3
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002700:	69f9      	ldr	r1, [r7, #28]
 8002702:	6a3a      	ldr	r2, [r7, #32]
 8002704:	e841 2300 	strex	r3, r2, [r1]
 8002708:	61bb      	str	r3, [r7, #24]
   return(result);
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1e6      	bne.n	80026de <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002710:	2300      	movs	r3, #0
 8002712:	e000      	b.n	8002716 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002714:	2302      	movs	r3, #2
  }
}
 8002716:	4618      	mov	r0, r3
 8002718:	372c      	adds	r7, #44	; 0x2c
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	080038d3 	.word	0x080038d3
 8002728:	0800381b 	.word	0x0800381b

0800272c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08a      	sub	sp, #40	; 0x28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	4613      	mov	r3, r2
 8002738:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800273e:	2b20      	cmp	r3, #32
 8002740:	d142      	bne.n	80027c8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d002      	beq.n	800274e <HAL_UART_Receive_IT+0x22>
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e03b      	b.n	80027ca <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_UART_Receive_IT+0x34>
 800275c:	2302      	movs	r3, #2
 800275e:	e034      	b.n	80027ca <HAL_UART_Receive_IT+0x9e>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2200      	movs	r2, #0
 800276c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a18      	ldr	r2, [pc, #96]	; (80027d4 <HAL_UART_Receive_IT+0xa8>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d01f      	beq.n	80027b8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d018      	beq.n	80027b8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	e853 3f00 	ldrex	r3, [r3]
 8002792:	613b      	str	r3, [r7, #16]
   return(result);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	461a      	mov	r2, r3
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	623b      	str	r3, [r7, #32]
 80027a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027a8:	69f9      	ldr	r1, [r7, #28]
 80027aa:	6a3a      	ldr	r2, [r7, #32]
 80027ac:	e841 2300 	strex	r3, r2, [r1]
 80027b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e6      	bne.n	8002786 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	461a      	mov	r2, r3
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 fee8 	bl	8003594 <UART_Start_Receive_IT>
 80027c4:	4603      	mov	r3, r0
 80027c6:	e000      	b.n	80027ca <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80027c8:	2302      	movs	r3, #2
  }
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3728      	adds	r7, #40	; 0x28
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40008000 	.word	0x40008000

080027d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b0ba      	sub	sp, #232	; 0xe8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80027fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002802:	f640 030f 	movw	r3, #2063	; 0x80f
 8002806:	4013      	ands	r3, r2
 8002808:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800280c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002810:	2b00      	cmp	r3, #0
 8002812:	d115      	bne.n	8002840 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002814:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00f      	beq.n	8002840 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002824:	f003 0320 	and.w	r3, r3, #32
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 82a6 	beq.w	8002d82 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
      }
      return;
 800283e:	e2a0      	b.n	8002d82 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002840:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 8117 	beq.w	8002a78 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800284a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b00      	cmp	r3, #0
 8002854:	d106      	bne.n	8002864 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002856:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800285a:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <HAL_UART_IRQHandler+0x298>)
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 810a 	beq.w	8002a78 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002864:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002868:	f003 0301 	and.w	r3, r3, #1
 800286c:	2b00      	cmp	r3, #0
 800286e:	d011      	beq.n	8002894 <HAL_UART_IRQHandler+0xbc>
 8002870:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d00b      	beq.n	8002894 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800288a:	f043 0201 	orr.w	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d011      	beq.n	80028c4 <HAL_UART_IRQHandler+0xec>
 80028a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d00b      	beq.n	80028c4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2202      	movs	r2, #2
 80028b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80028c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d011      	beq.n	80028f4 <HAL_UART_IRQHandler+0x11c>
 80028d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2204      	movs	r2, #4
 80028e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80028ea:	f043 0202 	orr.w	r2, r3, #2
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80028f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002900:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800290c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002910:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2208      	movs	r2, #8
 800291e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002926:	f043 0208 	orr.w	r2, r3, #8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002938:	2b00      	cmp	r3, #0
 800293a:	d012      	beq.n	8002962 <HAL_UART_IRQHandler+0x18a>
 800293c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002940:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00c      	beq.n	8002962 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002958:	f043 0220 	orr.w	r2, r3, #32
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002968:	2b00      	cmp	r3, #0
 800296a:	f000 820c 	beq.w	8002d86 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800296e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002972:	f003 0320 	and.w	r3, r3, #32
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00d      	beq.n	8002996 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800297a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297e:	f003 0320 	and.w	r3, r3, #32
 8002982:	2b00      	cmp	r3, #0
 8002984:	d007      	beq.n	8002996 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800298a:	2b00      	cmp	r3, #0
 800298c:	d003      	beq.n	8002996 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800299c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029aa:	2b40      	cmp	r3, #64	; 0x40
 80029ac:	d005      	beq.n	80029ba <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80029ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d04f      	beq.n	8002a5a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 feb4 	bl	8003728 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b40      	cmp	r3, #64	; 0x40
 80029cc:	d141      	bne.n	8002a52 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	3308      	adds	r3, #8
 80029d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029dc:	e853 3f00 	ldrex	r3, [r3]
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80029e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	3308      	adds	r3, #8
 80029f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80029fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80029fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002a06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a0a:	e841 2300 	strex	r3, r2, [r1]
 8002a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002a12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1d9      	bne.n	80029ce <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d013      	beq.n	8002a4a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a26:	4a13      	ldr	r2, [pc, #76]	; (8002a74 <HAL_UART_IRQHandler+0x29c>)
 8002a28:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7fe fa91 	bl	8000f56 <HAL_DMA_Abort_IT>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d017      	beq.n	8002a6a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002a44:	4610      	mov	r0, r2
 8002a46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a48:	e00f      	b.n	8002a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f9b0 	bl	8002db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a50:	e00b      	b.n	8002a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f9ac 	bl	8002db0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a58:	e007      	b.n	8002a6a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f9a8 	bl	8002db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002a68:	e18d      	b.n	8002d86 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6a:	bf00      	nop
    return;
 8002a6c:	e18b      	b.n	8002d86 <HAL_UART_IRQHandler+0x5ae>
 8002a6e:	bf00      	nop
 8002a70:	04000120 	.word	0x04000120
 8002a74:	080037ef 	.word	0x080037ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	f040 8146 	bne.w	8002d0e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 813f 	beq.w	8002d0e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a94:	f003 0310 	and.w	r3, r3, #16
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 8138 	beq.w	8002d0e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2210      	movs	r2, #16
 8002aa4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab0:	2b40      	cmp	r3, #64	; 0x40
 8002ab2:	f040 80b4 	bne.w	8002c1e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ac2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 815f 	beq.w	8002d8a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002ad2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	f080 8157 	bcs.w	8002d8a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002ae2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0320 	and.w	r3, r3, #32
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f040 8085 	bne.w	8002c02 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002b26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1da      	bne.n	8002af8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3308      	adds	r3, #8
 8002b48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b4c:	e853 3f00 	ldrex	r3, [r3]
 8002b50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b54:	f023 0301 	bic.w	r3, r3, #1
 8002b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3308      	adds	r3, #8
 8002b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002b66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002b72:	e841 2300 	strex	r3, r2, [r1]
 8002b76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1e1      	bne.n	8002b42 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3308      	adds	r3, #8
 8002b84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b88:	e853 3f00 	ldrex	r3, [r3]
 8002b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002baa:	e841 2300 	strex	r3, r2, [r1]
 8002bae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1e3      	bne.n	8002b7e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2220      	movs	r2, #32
 8002bba:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bca:	e853 3f00 	ldrex	r3, [r3]
 8002bce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bd0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bd2:	f023 0310 	bic.w	r3, r3, #16
 8002bd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002be4:	65bb      	str	r3, [r7, #88]	; 0x58
 8002be6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002be8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bec:	e841 2300 	strex	r3, r2, [r1]
 8002bf0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1e4      	bne.n	8002bc2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe f96c 	bl	8000eda <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8d4 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c1c:	e0b5      	b.n	8002d8a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002c38:	b29b      	uxth	r3, r3
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f000 80a7 	beq.w	8002d8e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002c40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80a2 	beq.w	8002d8e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c52:	e853 3f00 	ldrex	r3, [r3]
 8002c56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8002c6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c74:	e841 2300 	strex	r3, r2, [r1]
 8002c78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d1e4      	bne.n	8002c4a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3308      	adds	r3, #8
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	e853 3f00 	ldrex	r3, [r3]
 8002c8e:	623b      	str	r3, [r7, #32]
   return(result);
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	f023 0301 	bic.w	r3, r3, #1
 8002c96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ca4:	633a      	str	r2, [r7, #48]	; 0x30
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002caa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cac:	e841 2300 	strex	r3, r2, [r1]
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d1e3      	bne.n	8002c80 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	e853 3f00 	ldrex	r3, [r3]
 8002cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f023 0310 	bic.w	r3, r3, #16
 8002cde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf0:	69b9      	ldr	r1, [r7, #24]
 8002cf2:	69fa      	ldr	r2, [r7, #28]
 8002cf4:	e841 2300 	strex	r3, r2, [r1]
 8002cf8:	617b      	str	r3, [r7, #20]
   return(result);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1e4      	bne.n	8002cca <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002d04:	4619      	mov	r1, r3
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f85c 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002d0c:	e03f      	b.n	8002d8e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00e      	beq.n	8002d38 <HAL_UART_IRQHandler+0x560>
 8002d1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d008      	beq.n	8002d38 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002d2e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 ffb8 	bl	8003ca6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d36:	e02d      	b.n	8002d94 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00e      	beq.n	8002d62 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d008      	beq.n	8002d62 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01c      	beq.n	8002d92 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	4798      	blx	r3
    }
    return;
 8002d60:	e017      	b.n	8002d92 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d012      	beq.n	8002d94 <HAL_UART_IRQHandler+0x5bc>
 8002d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00c      	beq.n	8002d94 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fe09 	bl	8003992 <UART_EndTransmit_IT>
    return;
 8002d80:	e008      	b.n	8002d94 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d82:	bf00      	nop
 8002d84:	e006      	b.n	8002d94 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d86:	bf00      	nop
 8002d88:	e004      	b.n	8002d94 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d8a:	bf00      	nop
 8002d8c:	e002      	b.n	8002d94 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002d8e:	bf00      	nop
 8002d90:	e000      	b.n	8002d94 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002d92:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002d94:	37e8      	adds	r7, #232	; 0xe8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop

08002d9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de0:	b08a      	sub	sp, #40	; 0x28
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	4bb4      	ldr	r3, [pc, #720]	; (80030dc <UART_SetConfig+0x300>)
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e14:	430b      	orrs	r3, r1
 8002e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4aa9      	ldr	r2, [pc, #676]	; (80030e0 <UART_SetConfig+0x304>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d004      	beq.n	8002e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	4313      	orrs	r3, r2
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4aa0      	ldr	r2, [pc, #640]	; (80030e4 <UART_SetConfig+0x308>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d126      	bne.n	8002eb4 <UART_SetConfig+0xd8>
 8002e66:	4ba0      	ldr	r3, [pc, #640]	; (80030e8 <UART_SetConfig+0x30c>)
 8002e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d81b      	bhi.n	8002eac <UART_SetConfig+0xd0>
 8002e74:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0xa0>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002e8d 	.word	0x08002e8d
 8002e80:	08002e9d 	.word	0x08002e9d
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea5 	.word	0x08002ea5
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e92:	e080      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002e94:	2302      	movs	r3, #2
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9a:	e07c      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea2:	e078      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eaa:	e074      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002eac:	2310      	movs	r3, #16
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eb2:	e070      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a8c      	ldr	r2, [pc, #560]	; (80030ec <UART_SetConfig+0x310>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d138      	bne.n	8002f30 <UART_SetConfig+0x154>
 8002ebe:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <UART_SetConfig+0x30c>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ec4:	f003 030c 	and.w	r3, r3, #12
 8002ec8:	2b0c      	cmp	r3, #12
 8002eca:	d82d      	bhi.n	8002f28 <UART_SetConfig+0x14c>
 8002ecc:	a201      	add	r2, pc, #4	; (adr r2, 8002ed4 <UART_SetConfig+0xf8>)
 8002ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed2:	bf00      	nop
 8002ed4:	08002f09 	.word	0x08002f09
 8002ed8:	08002f29 	.word	0x08002f29
 8002edc:	08002f29 	.word	0x08002f29
 8002ee0:	08002f29 	.word	0x08002f29
 8002ee4:	08002f19 	.word	0x08002f19
 8002ee8:	08002f29 	.word	0x08002f29
 8002eec:	08002f29 	.word	0x08002f29
 8002ef0:	08002f29 	.word	0x08002f29
 8002ef4:	08002f11 	.word	0x08002f11
 8002ef8:	08002f29 	.word	0x08002f29
 8002efc:	08002f29 	.word	0x08002f29
 8002f00:	08002f29 	.word	0x08002f29
 8002f04:	08002f21 	.word	0x08002f21
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0e:	e042      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f10:	2302      	movs	r3, #2
 8002f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f16:	e03e      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f1e:	e03a      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f20:	2308      	movs	r3, #8
 8002f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f26:	e036      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f28:	2310      	movs	r3, #16
 8002f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f2e:	e032      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a6a      	ldr	r2, [pc, #424]	; (80030e0 <UART_SetConfig+0x304>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d12a      	bne.n	8002f90 <UART_SetConfig+0x1b4>
 8002f3a:	4b6b      	ldr	r3, [pc, #428]	; (80030e8 <UART_SetConfig+0x30c>)
 8002f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f48:	d01a      	beq.n	8002f80 <UART_SetConfig+0x1a4>
 8002f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f4e:	d81b      	bhi.n	8002f88 <UART_SetConfig+0x1ac>
 8002f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f54:	d00c      	beq.n	8002f70 <UART_SetConfig+0x194>
 8002f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5a:	d815      	bhi.n	8002f88 <UART_SetConfig+0x1ac>
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <UART_SetConfig+0x18c>
 8002f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f64:	d008      	beq.n	8002f78 <UART_SetConfig+0x19c>
 8002f66:	e00f      	b.n	8002f88 <UART_SetConfig+0x1ac>
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6e:	e012      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f70:	2302      	movs	r3, #2
 8002f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f76:	e00e      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f7e:	e00a      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f80:	2308      	movs	r3, #8
 8002f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f86:	e006      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f88:	2310      	movs	r3, #16
 8002f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f8e:	e002      	b.n	8002f96 <UART_SetConfig+0x1ba>
 8002f90:	2310      	movs	r3, #16
 8002f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a51      	ldr	r2, [pc, #324]	; (80030e0 <UART_SetConfig+0x304>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d17a      	bne.n	8003096 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fa4:	2b08      	cmp	r3, #8
 8002fa6:	d824      	bhi.n	8002ff2 <UART_SetConfig+0x216>
 8002fa8:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <UART_SetConfig+0x1d4>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fd5 	.word	0x08002fd5
 8002fb4:	08002ff3 	.word	0x08002ff3
 8002fb8:	08002fdd 	.word	0x08002fdd
 8002fbc:	08002ff3 	.word	0x08002ff3
 8002fc0:	08002fe3 	.word	0x08002fe3
 8002fc4:	08002ff3 	.word	0x08002ff3
 8002fc8:	08002ff3 	.word	0x08002ff3
 8002fcc:	08002ff3 	.word	0x08002ff3
 8002fd0:	08002feb 	.word	0x08002feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fd4:	f7fe ff7a 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8002fd8:	61f8      	str	r0, [r7, #28]
        break;
 8002fda:	e010      	b.n	8002ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fdc:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <UART_SetConfig+0x314>)
 8002fde:	61fb      	str	r3, [r7, #28]
        break;
 8002fe0:	e00d      	b.n	8002ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fe2:	f7fe fedb 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8002fe6:	61f8      	str	r0, [r7, #28]
        break;
 8002fe8:	e009      	b.n	8002ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fee:	61fb      	str	r3, [r7, #28]
        break;
 8002ff0:	e005      	b.n	8002ffe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	2b00      	cmp	r3, #0
 8003002:	f000 8107 	beq.w	8003214 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	005b      	lsls	r3, r3, #1
 800300e:	4413      	add	r3, r2
 8003010:	69fa      	ldr	r2, [r7, #28]
 8003012:	429a      	cmp	r2, r3
 8003014:	d305      	bcc.n	8003022 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	429a      	cmp	r2, r3
 8003020:	d903      	bls.n	800302a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003028:	e0f4      	b.n	8003214 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	2200      	movs	r2, #0
 800302e:	461c      	mov	r4, r3
 8003030:	4615      	mov	r5, r2
 8003032:	f04f 0200 	mov.w	r2, #0
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	022b      	lsls	r3, r5, #8
 800303c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003040:	0222      	lsls	r2, r4, #8
 8003042:	68f9      	ldr	r1, [r7, #12]
 8003044:	6849      	ldr	r1, [r1, #4]
 8003046:	0849      	lsrs	r1, r1, #1
 8003048:	2000      	movs	r0, #0
 800304a:	4688      	mov	r8, r1
 800304c:	4681      	mov	r9, r0
 800304e:	eb12 0a08 	adds.w	sl, r2, r8
 8003052:	eb43 0b09 	adc.w	fp, r3, r9
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003064:	4650      	mov	r0, sl
 8003066:	4659      	mov	r1, fp
 8003068:	f7fd f8b0 	bl	80001cc <__aeabi_uldivmod>
 800306c:	4602      	mov	r2, r0
 800306e:	460b      	mov	r3, r1
 8003070:	4613      	mov	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800307a:	d308      	bcc.n	800308e <UART_SetConfig+0x2b2>
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003082:	d204      	bcs.n	800308e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	e0c2      	b.n	8003214 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003094:	e0be      	b.n	8003214 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800309e:	d16a      	bne.n	8003176 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80030a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d834      	bhi.n	8003112 <UART_SetConfig+0x336>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <UART_SetConfig+0x2d4>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030d5 	.word	0x080030d5
 80030b4:	080030f5 	.word	0x080030f5
 80030b8:	080030fd 	.word	0x080030fd
 80030bc:	08003113 	.word	0x08003113
 80030c0:	08003103 	.word	0x08003103
 80030c4:	08003113 	.word	0x08003113
 80030c8:	08003113 	.word	0x08003113
 80030cc:	08003113 	.word	0x08003113
 80030d0:	0800310b 	.word	0x0800310b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d4:	f7fe fefa 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80030d8:	61f8      	str	r0, [r7, #28]
        break;
 80030da:	e020      	b.n	800311e <UART_SetConfig+0x342>
 80030dc:	efff69f3 	.word	0xefff69f3
 80030e0:	40008000 	.word	0x40008000
 80030e4:	40013800 	.word	0x40013800
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40004400 	.word	0x40004400
 80030f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030f4:	f7fe ff00 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 80030f8:	61f8      	str	r0, [r7, #28]
        break;
 80030fa:	e010      	b.n	800311e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <UART_SetConfig+0x454>)
 80030fe:	61fb      	str	r3, [r7, #28]
        break;
 8003100:	e00d      	b.n	800311e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003102:	f7fe fe4b 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 8003106:	61f8      	str	r0, [r7, #28]
        break;
 8003108:	e009      	b.n	800311e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800310e:	61fb      	str	r3, [r7, #28]
        break;
 8003110:	e005      	b.n	800311e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800311c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d077      	beq.n	8003214 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	005a      	lsls	r2, r3, #1
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	085b      	lsrs	r3, r3, #1
 800312e:	441a      	add	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	fbb2 f3f3 	udiv	r3, r2, r3
 8003138:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d916      	bls.n	800316e <UART_SetConfig+0x392>
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d212      	bcs.n	800316e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	b29b      	uxth	r3, r3
 800314c:	f023 030f 	bic.w	r3, r3, #15
 8003150:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	b29b      	uxth	r3, r3
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	b29a      	uxth	r2, r3
 800315e:	8afb      	ldrh	r3, [r7, #22]
 8003160:	4313      	orrs	r3, r2
 8003162:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	8afa      	ldrh	r2, [r7, #22]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	e052      	b.n	8003214 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003174:	e04e      	b.n	8003214 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800317a:	2b08      	cmp	r3, #8
 800317c:	d827      	bhi.n	80031ce <UART_SetConfig+0x3f2>
 800317e:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <UART_SetConfig+0x3a8>)
 8003180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003184:	080031a9 	.word	0x080031a9
 8003188:	080031b1 	.word	0x080031b1
 800318c:	080031b9 	.word	0x080031b9
 8003190:	080031cf 	.word	0x080031cf
 8003194:	080031bf 	.word	0x080031bf
 8003198:	080031cf 	.word	0x080031cf
 800319c:	080031cf 	.word	0x080031cf
 80031a0:	080031cf 	.word	0x080031cf
 80031a4:	080031c7 	.word	0x080031c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031a8:	f7fe fe90 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 80031ac:	61f8      	str	r0, [r7, #28]
        break;
 80031ae:	e014      	b.n	80031da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031b0:	f7fe fea2 	bl	8001ef8 <HAL_RCC_GetPCLK2Freq>
 80031b4:	61f8      	str	r0, [r7, #28]
        break;
 80031b6:	e010      	b.n	80031da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b8:	4b1d      	ldr	r3, [pc, #116]	; (8003230 <UART_SetConfig+0x454>)
 80031ba:	61fb      	str	r3, [r7, #28]
        break;
 80031bc:	e00d      	b.n	80031da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031be:	f7fe fded 	bl	8001d9c <HAL_RCC_GetSysClockFreq>
 80031c2:	61f8      	str	r0, [r7, #28]
        break;
 80031c4:	e009      	b.n	80031da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ca:	61fb      	str	r3, [r7, #28]
        break;
 80031cc:	e005      	b.n	80031da <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80031ce:	2300      	movs	r3, #0
 80031d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031d8:	bf00      	nop
    }

    if (pclk != 0U)
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d019      	beq.n	8003214 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	085a      	lsrs	r2, r3, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	441a      	add	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b0f      	cmp	r3, #15
 80031f8:	d909      	bls.n	800320e <UART_SetConfig+0x432>
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003200:	d205      	bcs.n	800320e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	b29a      	uxth	r2, r3
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60da      	str	r2, [r3, #12]
 800320c:	e002      	b.n	8003214 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003220:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003224:	4618      	mov	r0, r3
 8003226:	3728      	adds	r7, #40	; 0x28
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop
 8003230:	00f42400 	.word	0x00f42400

08003234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00a      	beq.n	800325e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d00a      	beq.n	8003280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00a      	beq.n	80032a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f003 0308 	and.w	r3, r3, #8
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	f003 0310 	and.w	r3, r3, #16
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00a      	beq.n	80032e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	430a      	orrs	r2, r1
 80032e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00a      	beq.n	8003308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	430a      	orrs	r2, r1
 8003306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003310:	2b00      	cmp	r3, #0
 8003312:	d01a      	beq.n	800334a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	430a      	orrs	r2, r1
 8003328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003332:	d10a      	bne.n	800334a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]
  }
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b086      	sub	sp, #24
 800337c:	af02      	add	r7, sp, #8
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003388:	f7fd fc66 	bl	8000c58 <HAL_GetTick>
 800338c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0308 	and.w	r3, r3, #8
 8003398:	2b08      	cmp	r3, #8
 800339a:	d10e      	bne.n	80033ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800339c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033a0:	9300      	str	r3, [sp, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f82d 	bl	800340a <UART_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e023      	b.n	8003402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d10e      	bne.n	80033e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f817 	bl	800340a <UART_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e00d      	b.n	8003402 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b09c      	sub	sp, #112	; 0x70
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	4613      	mov	r3, r2
 8003418:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800341a:	e0a5      	b.n	8003568 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800341c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	f000 80a1 	beq.w	8003568 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003426:	f7fd fc17 	bl	8000c58 <HAL_GetTick>
 800342a:	4602      	mov	r2, r0
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003432:	429a      	cmp	r2, r3
 8003434:	d302      	bcc.n	800343c <UART_WaitOnFlagUntilTimeout+0x32>
 8003436:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003438:	2b00      	cmp	r3, #0
 800343a:	d13e      	bne.n	80034ba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800344a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800344c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003450:	667b      	str	r3, [r7, #100]	; 0x64
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	461a      	mov	r2, r3
 8003458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800345a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800345c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800345e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003460:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003462:	e841 2300 	strex	r3, r2, [r1]
 8003466:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e6      	bne.n	800343c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	3308      	adds	r3, #8
 8003474:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003478:	e853 3f00 	ldrex	r3, [r3]
 800347c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800347e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003480:	f023 0301 	bic.w	r3, r3, #1
 8003484:	663b      	str	r3, [r7, #96]	; 0x60
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	3308      	adds	r3, #8
 800348c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800348e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003490:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003492:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003496:	e841 2300 	strex	r3, r2, [r1]
 800349a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800349c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1e5      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2220      	movs	r2, #32
 80034ac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e067      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d04f      	beq.n	8003568 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d6:	d147      	bne.n	8003568 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ea:	e853 3f00 	ldrex	r3, [r3]
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003500:	637b      	str	r3, [r7, #52]	; 0x34
 8003502:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003508:	e841 2300 	strex	r3, r2, [r1]
 800350c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800350e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1e6      	bne.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3308      	adds	r3, #8
 800351a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	e853 3f00 	ldrex	r3, [r3]
 8003522:	613b      	str	r3, [r7, #16]
   return(result);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	66bb      	str	r3, [r7, #104]	; 0x68
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3308      	adds	r3, #8
 8003532:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003534:	623a      	str	r2, [r7, #32]
 8003536:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003538:	69f9      	ldr	r1, [r7, #28]
 800353a:	6a3a      	ldr	r2, [r7, #32]
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	61bb      	str	r3, [r7, #24]
   return(result);
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1e5      	bne.n	8003514 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2220      	movs	r2, #32
 8003552:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e010      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	429a      	cmp	r2, r3
 8003576:	bf0c      	ite	eq
 8003578:	2301      	moveq	r3, #1
 800357a:	2300      	movne	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	461a      	mov	r2, r3
 8003580:	79fb      	ldrb	r3, [r7, #7]
 8003582:	429a      	cmp	r2, r3
 8003584:	f43f af4a 	beq.w	800341c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3770      	adds	r7, #112	; 0x70
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003594:	b480      	push	{r7}
 8003596:	b097      	sub	sp, #92	; 0x5c
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	68ba      	ldr	r2, [r7, #8]
 80035a6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	88fa      	ldrh	r2, [r7, #6]
 80035ac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	88fa      	ldrh	r2, [r7, #6]
 80035b4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035c6:	d10e      	bne.n	80035e6 <UART_Start_Receive_IT+0x52>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d105      	bne.n	80035dc <UART_Start_Receive_IT+0x48>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80035d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035da:	e02d      	b.n	8003638 <UART_Start_Receive_IT+0xa4>
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	22ff      	movs	r2, #255	; 0xff
 80035e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035e4:	e028      	b.n	8003638 <UART_Start_Receive_IT+0xa4>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10d      	bne.n	800360a <UART_Start_Receive_IT+0x76>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d104      	bne.n	8003600 <UART_Start_Receive_IT+0x6c>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	22ff      	movs	r2, #255	; 0xff
 80035fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80035fe:	e01b      	b.n	8003638 <UART_Start_Receive_IT+0xa4>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	227f      	movs	r2, #127	; 0x7f
 8003604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003608:	e016      	b.n	8003638 <UART_Start_Receive_IT+0xa4>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003612:	d10d      	bne.n	8003630 <UART_Start_Receive_IT+0x9c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d104      	bne.n	8003626 <UART_Start_Receive_IT+0x92>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	227f      	movs	r2, #127	; 0x7f
 8003620:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003624:	e008      	b.n	8003638 <UART_Start_Receive_IT+0xa4>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	223f      	movs	r2, #63	; 0x3f
 800362a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800362e:	e003      	b.n	8003638 <UART_Start_Receive_IT+0xa4>
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2222      	movs	r2, #34	; 0x22
 8003644:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3308      	adds	r3, #8
 800364c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	f043 0301 	orr.w	r3, r3, #1
 800365c:	657b      	str	r3, [r7, #84]	; 0x54
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3308      	adds	r3, #8
 8003664:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003666:	64ba      	str	r2, [r7, #72]	; 0x48
 8003668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800366c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e5      	bne.n	8003646 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003682:	d107      	bne.n	8003694 <UART_Start_Receive_IT+0x100>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d103      	bne.n	8003694 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	4a24      	ldr	r2, [pc, #144]	; (8003720 <UART_Start_Receive_IT+0x18c>)
 8003690:	665a      	str	r2, [r3, #100]	; 0x64
 8003692:	e002      	b.n	800369a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a23      	ldr	r2, [pc, #140]	; (8003724 <UART_Start_Receive_IT+0x190>)
 8003698:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d019      	beq.n	80036de <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036c8:	637b      	str	r3, [r7, #52]	; 0x34
 80036ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e6      	bne.n	80036aa <UART_Start_Receive_IT+0x116>
 80036dc:	e018      	b.n	8003710 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	613b      	str	r3, [r7, #16]
   return(result);
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f043 0320 	orr.w	r3, r3, #32
 80036f2:	653b      	str	r3, [r7, #80]	; 0x50
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036fc:	623b      	str	r3, [r7, #32]
 80036fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	69f9      	ldr	r1, [r7, #28]
 8003702:	6a3a      	ldr	r2, [r7, #32]
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	61bb      	str	r3, [r7, #24]
   return(result);
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e6      	bne.n	80036de <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003710:	2300      	movs	r3, #0
}
 8003712:	4618      	mov	r0, r3
 8003714:	375c      	adds	r7, #92	; 0x5c
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	08003b47 	.word	0x08003b47
 8003724:	080039e7 	.word	0x080039e7

08003728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003728:	b480      	push	{r7}
 800372a:	b095      	sub	sp, #84	; 0x54
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003738:	e853 3f00 	ldrex	r3, [r3]
 800373c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003744:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800374e:	643b      	str	r3, [r7, #64]	; 0x40
 8003750:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003752:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003754:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003756:	e841 2300 	strex	r3, r2, [r1]
 800375a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800375c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1e6      	bne.n	8003730 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3308      	adds	r3, #8
 8003768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	e853 3f00 	ldrex	r3, [r3]
 8003770:	61fb      	str	r3, [r7, #28]
   return(result);
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	64bb      	str	r3, [r7, #72]	; 0x48
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	3308      	adds	r3, #8
 8003780:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003782:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003784:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003786:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003788:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800378a:	e841 2300 	strex	r3, r2, [r1]
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1e5      	bne.n	8003762 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800379a:	2b01      	cmp	r3, #1
 800379c:	d118      	bne.n	80037d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	e853 3f00 	ldrex	r3, [r3]
 80037aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f023 0310 	bic.w	r3, r3, #16
 80037b2:	647b      	str	r3, [r7, #68]	; 0x44
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	461a      	mov	r2, r3
 80037ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037bc:	61bb      	str	r3, [r7, #24]
 80037be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c0:	6979      	ldr	r1, [r7, #20]
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	e841 2300 	strex	r3, r2, [r1]
 80037c8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e6      	bne.n	800379e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2200      	movs	r2, #0
 80037da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80037e2:	bf00      	nop
 80037e4:	3754      	adds	r7, #84	; 0x54
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f7ff facf 	bl	8002db0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800381a:	b480      	push	{r7}
 800381c:	b08f      	sub	sp, #60	; 0x3c
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003826:	2b21      	cmp	r3, #33	; 0x21
 8003828:	d14d      	bne.n	80038c6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d132      	bne.n	800389c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	e853 3f00 	ldrex	r3, [r3]
 8003842:	61fb      	str	r3, [r7, #28]
   return(result);
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	461a      	mov	r2, r3
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003856:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003858:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800385a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800385c:	e841 2300 	strex	r3, r2, [r1]
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1e6      	bne.n	8003836 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	e853 3f00 	ldrex	r3, [r3]
 8003874:	60bb      	str	r3, [r7, #8]
   return(result);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800387c:	633b      	str	r3, [r7, #48]	; 0x30
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003886:	61bb      	str	r3, [r7, #24]
 8003888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388a:	6979      	ldr	r1, [r7, #20]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	613b      	str	r3, [r7, #16]
   return(result);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e6      	bne.n	8003868 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800389a:	e014      	b.n	80038c6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038a0:	781a      	ldrb	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	b292      	uxth	r2, r2
 80038a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80038c6:	bf00      	nop
 80038c8:	373c      	adds	r7, #60	; 0x3c
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr

080038d2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038d2:	b480      	push	{r7}
 80038d4:	b091      	sub	sp, #68	; 0x44
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038de:	2b21      	cmp	r3, #33	; 0x21
 80038e0:	d151      	bne.n	8003986 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d132      	bne.n	8003954 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	623b      	str	r3, [r7, #32]
   return(result);
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	461a      	mov	r2, r3
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	633b      	str	r3, [r7, #48]	; 0x30
 800390e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800391a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e6      	bne.n	80038ee <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	e853 3f00 	ldrex	r3, [r3]
 800392c:	60fb      	str	r3, [r7, #12]
   return(result);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003934:	637b      	str	r3, [r7, #52]	; 0x34
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	461a      	mov	r2, r3
 800393c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	69b9      	ldr	r1, [r7, #24]
 8003944:	69fa      	ldr	r2, [r7, #28]
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	617b      	str	r3, [r7, #20]
   return(result);
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e6      	bne.n	8003920 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003952:	e018      	b.n	8003986 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003958:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800395a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800395c:	881a      	ldrh	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003966:	b292      	uxth	r2, r2
 8003968:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800396e:	1c9a      	adds	r2, r3, #2
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003986:	bf00      	nop
 8003988:	3744      	adds	r7, #68	; 0x44
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003992:	b580      	push	{r7, lr}
 8003994:	b088      	sub	sp, #32
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039ae:	61fb      	str	r3, [r7, #28]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	461a      	mov	r2, r3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039bc:	6979      	ldr	r1, [r7, #20]
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	e841 2300 	strex	r3, r2, [r1]
 80039c4:	613b      	str	r3, [r7, #16]
   return(result);
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e6      	bne.n	800399a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2220      	movs	r2, #32
 80039d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f7ff f9df 	bl	8002d9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039de:	bf00      	nop
 80039e0:	3720      	adds	r7, #32
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b096      	sub	sp, #88	; 0x58
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80039f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039fc:	2b22      	cmp	r3, #34	; 0x22
 80039fe:	f040 8094 	bne.w	8003b2a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003a08:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003a0c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003a10:	b2d9      	uxtb	r1, r3
 8003a12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1c:	400a      	ands	r2, r1
 8003a1e:	b2d2      	uxtb	r2, r2
 8003a20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d179      	bne.n	8003b3e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a5e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a68:	647b      	str	r3, [r7, #68]	; 0x44
 8003a6a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e6      	bne.n	8003a4a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3308      	adds	r3, #8
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	e853 3f00 	ldrex	r3, [r3]
 8003a8a:	623b      	str	r3, [r7, #32]
   return(result);
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	f023 0301 	bic.w	r3, r3, #1
 8003a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3308      	adds	r3, #8
 8003a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a9c:	633a      	str	r2, [r7, #48]	; 0x30
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e5      	bne.n	8003a7c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d12e      	bne.n	8003b22 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	e853 3f00 	ldrex	r3, [r3]
 8003ad6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0310 	bic.w	r3, r3, #16
 8003ade:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ae8:	61fb      	str	r3, [r7, #28]
 8003aea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aec:	69b9      	ldr	r1, [r7, #24]
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	e841 2300 	strex	r3, r2, [r1]
 8003af4:	617b      	str	r3, [r7, #20]
   return(result);
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1e6      	bne.n	8003aca <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b10      	cmp	r3, #16
 8003b08:	d103      	bne.n	8003b12 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2210      	movs	r2, #16
 8003b10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003b18:	4619      	mov	r1, r3
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff f952 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b20:	e00d      	b.n	8003b3e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fc fcec 	bl	8000500 <HAL_UART_RxCpltCallback>
}
 8003b28:	e009      	b.n	8003b3e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	8b1b      	ldrh	r3, [r3, #24]
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f042 0208 	orr.w	r2, r2, #8
 8003b3a:	b292      	uxth	r2, r2
 8003b3c:	831a      	strh	r2, [r3, #24]
}
 8003b3e:	bf00      	nop
 8003b40:	3758      	adds	r7, #88	; 0x58
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b096      	sub	sp, #88	; 0x58
 8003b4a:	af00      	add	r7, sp, #0
 8003b4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b5c:	2b22      	cmp	r3, #34	; 0x22
 8003b5e:	f040 8094 	bne.w	8003c8a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003b68:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b70:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003b72:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003b76:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	b29a      	uxth	r2, r3
 8003b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b80:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b86:	1c9a      	adds	r2, r3, #2
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d179      	bne.n	8003c9e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb2:	e853 3f00 	ldrex	r3, [r3]
 8003bb6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bc8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003bce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd0:	e841 2300 	strex	r3, r2, [r1]
 8003bd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003bd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1e6      	bne.n	8003baa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3308      	adds	r3, #8
 8003be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f023 0301 	bic.w	r3, r3, #1
 8003bf2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3308      	adds	r3, #8
 8003bfa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bfc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e5      	bne.n	8003bdc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2220      	movs	r2, #32
 8003c14:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d12e      	bne.n	8003c82 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	e853 3f00 	ldrex	r3, [r3]
 8003c36:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	f023 0310 	bic.w	r3, r3, #16
 8003c3e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	461a      	mov	r2, r3
 8003c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	e841 2300 	strex	r3, r2, [r1]
 8003c54:	613b      	str	r3, [r7, #16]
   return(result);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d1e6      	bne.n	8003c2a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b10      	cmp	r3, #16
 8003c68:	d103      	bne.n	8003c72 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2210      	movs	r2, #16
 8003c70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003c78:	4619      	mov	r1, r3
 8003c7a:	6878      	ldr	r0, [r7, #4]
 8003c7c:	f7ff f8a2 	bl	8002dc4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c80:	e00d      	b.n	8003c9e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f7fc fc3c 	bl	8000500 <HAL_UART_RxCpltCallback>
}
 8003c88:	e009      	b.n	8003c9e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	8b1b      	ldrh	r3, [r3, #24]
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f042 0208 	orr.w	r2, r2, #8
 8003c9a:	b292      	uxth	r2, r2
 8003c9c:	831a      	strh	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	3758      	adds	r7, #88	; 0x58
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}

08003ca6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
	...

08003cbc <__libc_init_array>:
 8003cbc:	b570      	push	{r4, r5, r6, lr}
 8003cbe:	4d0d      	ldr	r5, [pc, #52]	; (8003cf4 <__libc_init_array+0x38>)
 8003cc0:	4c0d      	ldr	r4, [pc, #52]	; (8003cf8 <__libc_init_array+0x3c>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	2600      	movs	r6, #0
 8003cc8:	42a6      	cmp	r6, r4
 8003cca:	d109      	bne.n	8003ce0 <__libc_init_array+0x24>
 8003ccc:	4d0b      	ldr	r5, [pc, #44]	; (8003cfc <__libc_init_array+0x40>)
 8003cce:	4c0c      	ldr	r4, [pc, #48]	; (8003d00 <__libc_init_array+0x44>)
 8003cd0:	f000 f820 	bl	8003d14 <_init>
 8003cd4:	1b64      	subs	r4, r4, r5
 8003cd6:	10a4      	asrs	r4, r4, #2
 8003cd8:	2600      	movs	r6, #0
 8003cda:	42a6      	cmp	r6, r4
 8003cdc:	d105      	bne.n	8003cea <__libc_init_array+0x2e>
 8003cde:	bd70      	pop	{r4, r5, r6, pc}
 8003ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ce4:	4798      	blx	r3
 8003ce6:	3601      	adds	r6, #1
 8003ce8:	e7ee      	b.n	8003cc8 <__libc_init_array+0xc>
 8003cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cee:	4798      	blx	r3
 8003cf0:	3601      	adds	r6, #1
 8003cf2:	e7f2      	b.n	8003cda <__libc_init_array+0x1e>
 8003cf4:	08003d7c 	.word	0x08003d7c
 8003cf8:	08003d7c 	.word	0x08003d7c
 8003cfc:	08003d7c 	.word	0x08003d7c
 8003d00:	08003d80 	.word	0x08003d80

08003d04 <memset>:
 8003d04:	4402      	add	r2, r0
 8003d06:	4603      	mov	r3, r0
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d100      	bne.n	8003d0e <memset+0xa>
 8003d0c:	4770      	bx	lr
 8003d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d12:	e7f9      	b.n	8003d08 <memset+0x4>

08003d14 <_init>:
 8003d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d16:	bf00      	nop
 8003d18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1a:	bc08      	pop	{r3}
 8003d1c:	469e      	mov	lr, r3
 8003d1e:	4770      	bx	lr

08003d20 <_fini>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	bf00      	nop
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr
