
MKS42DwithSTM32L432KCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004404  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d8  080045d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045d8  080045d8  000145d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e0  080045e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e0  080045e0  000145e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  080045f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080045f4  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001231c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000263e  00000000  00000000  00032358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00034998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00035960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000219c9  00000000  00000000  00036820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015173  00000000  00000000  000581e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca912  00000000  00000000  0006d35c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00137c6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004138  00000000  00000000  00137cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004578 	.word	0x08004578

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08004578 	.word	0x08004578

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UART_RxCpltCallback>:
int32_t read_rotation = 0;
float angle = 0;
int16_t read_error = 0;
float angle_err = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	memcpy(receive+indx, buff, 1);
 80004d8:	4b1a      	ldr	r3, [pc, #104]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b1a      	ldr	r3, [pc, #104]	; (8000548 <HAL_UART_RxCpltCallback+0x78>)
 80004e0:	4413      	add	r3, r2
 80004e2:	4a1a      	ldr	r2, [pc, #104]	; (800054c <HAL_UART_RxCpltCallback+0x7c>)
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	701a      	strb	r2, [r3, #0]
	indx++;
 80004e8:	4b16      	ldr	r3, [pc, #88]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b14      	ldr	r3, [pc, #80]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 80004f2:	701a      	strb	r2, [r3, #0]
	if(indx >= 9 || indx > receive_length){
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d805      	bhi.n	8000508 <HAL_UART_RxCpltCallback+0x38>
 80004fc:	4b11      	ldr	r3, [pc, #68]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	4b13      	ldr	r3, [pc, #76]	; (8000550 <HAL_UART_RxCpltCallback+0x80>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	429a      	cmp	r2, r3
 8000506:	d905      	bls.n	8000514 <HAL_UART_RxCpltCallback+0x44>
		indx = 0;
 8000508:	4b0e      	ldr	r3, [pc, #56]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
		statuss = UART_error;
 800050e:	4b11      	ldr	r3, [pc, #68]	; (8000554 <HAL_UART_RxCpltCallback+0x84>)
 8000510:	2203      	movs	r2, #3
 8000512:	701a      	strb	r2, [r3, #0]
	}
	if(indx == receive_length){
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <HAL_UART_RxCpltCallback+0x80>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d108      	bne.n	8000532 <HAL_UART_RxCpltCallback+0x62>
		#ifdef Timer_timeout
			HAL_TIM_Base_Stop_IT(Used_timer);
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <HAL_UART_RxCpltCallback+0x88>)
 8000522:	f002 fa1b 	bl	800295c <HAL_TIM_Base_Stop_IT>
		#endif
		indx = 0;
 8000526:	4b07      	ldr	r3, [pc, #28]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
		statuss = UART_ready;
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_UART_RxCpltCallback+0x84>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(huart, buff, 1);
 8000532:	2201      	movs	r2, #1
 8000534:	4905      	ldr	r1, [pc, #20]	; (800054c <HAL_UART_RxCpltCallback+0x7c>)
 8000536:	6878      	ldr	r0, [r7, #4]
 8000538:	f002 fd2a 	bl	8002f90 <HAL_UART_Receive_IT>
}
 800053c:	bf00      	nop
 800053e:	3708      	adds	r7, #8
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000042 	.word	0x20000042
 8000548:	20000034 	.word	0x20000034
 800054c:	20000040 	.word	0x20000040
 8000550:	20000029 	.word	0x20000029
 8000554:	20000043 	.word	0x20000043
 8000558:	2000005c 	.word	0x2000005c

0800055c <HAL_TIM_PeriodElapsedCallback>:

#ifdef Timer_timeout
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if(statuss == UART_busy){
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	2b02      	cmp	r3, #2
 800056a:	d105      	bne.n	8000578 <HAL_TIM_PeriodElapsedCallback+0x1c>
		statuss = UART_error;
 800056c:	4b04      	ldr	r3, [pc, #16]	; (8000580 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800056e:	2203      	movs	r2, #3
 8000570:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(Used_timer);
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000574:	f002 f9f2 	bl	800295c <HAL_TIM_Base_Stop_IT>
	}
}
 8000578:	bf00      	nop
 800057a:	3708      	adds	r7, #8
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20000043 	.word	0x20000043
 8000584:	2000005c 	.word	0x2000005c

08000588 <CRC_calc>:
#endif

uint8_t CRC_calc(uint8_t length){
 8000588:	b480      	push	{r7}
 800058a:	b085      	sub	sp, #20
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	71fb      	strb	r3, [r7, #7]
	uint8_t sum = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length; i++){
 8000596:	2300      	movs	r3, #0
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	e009      	b.n	80005b0 <CRC_calc+0x28>
		sum += transmit[i];
 800059c:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <CRC_calc+0x40>)
 800059e:	68bb      	ldr	r3, [r7, #8]
 80005a0:	4413      	add	r3, r2
 80005a2:	781a      	ldrb	r2, [r3, #0]
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	4413      	add	r3, r2
 80005a8:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length; i++){
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	3301      	adds	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	68ba      	ldr	r2, [r7, #8]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf1      	blt.n	800059c <CRC_calc+0x14>
	}
	return sum;
 80005b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	2000002c 	.word	0x2000002c

080005cc <MKS_UART_wait>:

void MKS_UART_wait(void){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	do{
		if(statuss == UART_processing){
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MKS_UART_wait+0x28>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	2b01      	cmp	r3, #1
 80005d6:	d105      	bne.n	80005e4 <MKS_UART_wait+0x18>
			#ifdef Timer_timeout
				HAL_TIM_Base_Start_IT(Used_timer);
 80005d8:	4807      	ldr	r0, [pc, #28]	; (80005f8 <MKS_UART_wait+0x2c>)
 80005da:	f002 f96b 	bl	80028b4 <HAL_TIM_Base_Start_IT>
			#endif
			statuss = UART_busy;
 80005de:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <MKS_UART_wait+0x28>)
 80005e0:	2202      	movs	r2, #2
 80005e2:	701a      	strb	r2, [r3, #0]
		}
	}while(statuss != UART_ready);
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <MKS_UART_wait+0x28>)
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d1f1      	bne.n	80005d0 <MKS_UART_wait+0x4>
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000043 	.word	0x20000043
 80005f8:	2000005c 	.word	0x2000005c

080005fc <MKS_init>:

void MKS_init(void){
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
	  HAL_UART_Init(&huart1);
 8000600:	480d      	ldr	r0, [pc, #52]	; (8000638 <MKS_init+0x3c>)
 8000602:	f002 fc09 	bl	8002e18 <HAL_UART_Init>
	  flag = true;
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <MKS_init+0x40>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	  indx = 0;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MKS_init+0x44>)
 800060e:	2200      	movs	r2, #0
 8000610:	701a      	strb	r2, [r3, #0]
	  statuss = UART_ready;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MKS_init+0x48>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1, buff, 1);
 8000618:	2201      	movs	r2, #1
 800061a:	490b      	ldr	r1, [pc, #44]	; (8000648 <MKS_init+0x4c>)
 800061c:	4806      	ldr	r0, [pc, #24]	; (8000638 <MKS_init+0x3c>)
 800061e:	f002 fcb7 	bl	8002f90 <HAL_UART_Receive_IT>
	  MKS_UART_wait();
 8000622:	f7ff ffd3 	bl	80005cc <MKS_UART_wait>
	  MKS_set_param(Enable_move, 0x01);
 8000626:	2101      	movs	r1, #1
 8000628:	20f3      	movs	r0, #243	; 0xf3
 800062a:	f000 f865 	bl	80006f8 <MKS_set_param>
	  MKS_UART_wait();
 800062e:	f7ff ffcd 	bl	80005cc <MKS_UART_wait>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	200000a8 	.word	0x200000a8
 800063c:	20000028 	.word	0x20000028
 8000640:	20000042 	.word	0x20000042
 8000644:	20000043 	.word	0x20000043
 8000648:	20000040 	.word	0x20000040

0800064c <MKS_read_param>:

void MKS_read_param(uint8_t param, uint8_t length_of_param){
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	460a      	mov	r2, r1
 8000656:	71fb      	strb	r3, [r7, #7]
 8000658:	4613      	mov	r3, r2
 800065a:	71bb      	strb	r3, [r7, #6]
	if(statuss == UART_ready){
 800065c:	4b16      	ldr	r3, [pc, #88]	; (80006b8 <MKS_read_param+0x6c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d125      	bne.n	80006b0 <MKS_read_param+0x64>
		for(int i= 0; i < 9; i++){
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	e007      	b.n	800067a <MKS_read_param+0x2e>
			receive[i] = 0;
 800066a:	4a14      	ldr	r2, [pc, #80]	; (80006bc <MKS_read_param+0x70>)
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	4413      	add	r3, r2
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
		for(int i= 0; i < 9; i++){
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3301      	adds	r3, #1
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2b08      	cmp	r3, #8
 800067e:	ddf4      	ble.n	800066a <MKS_read_param+0x1e>
		}
		statuss = UART_processing;
 8000680:	4b0d      	ldr	r3, [pc, #52]	; (80006b8 <MKS_read_param+0x6c>)
 8000682:	2201      	movs	r2, #1
 8000684:	701a      	strb	r2, [r3, #0]
		transmit[0] = Address;
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MKS_read_param+0x74>)
 8000688:	22e0      	movs	r2, #224	; 0xe0
 800068a:	701a      	strb	r2, [r3, #0]
		transmit[1] = param;
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <MKS_read_param+0x74>)
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	7053      	strb	r3, [r2, #1]
		transmit[2] = CRC_calc(2);
 8000692:	2002      	movs	r0, #2
 8000694:	f7ff ff78 	bl	8000588 <CRC_calc>
 8000698:	4603      	mov	r3, r0
 800069a:	461a      	mov	r2, r3
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <MKS_read_param+0x74>)
 800069e:	709a      	strb	r2, [r3, #2]
		receive_length = length_of_param;
 80006a0:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <MKS_read_param+0x78>)
 80006a2:	79bb      	ldrb	r3, [r7, #6]
 80006a4:	7013      	strb	r3, [r2, #0]
		HAL_UART_Transmit_IT(Used_UART, transmit, 3);
 80006a6:	2203      	movs	r2, #3
 80006a8:	4905      	ldr	r1, [pc, #20]	; (80006c0 <MKS_read_param+0x74>)
 80006aa:	4807      	ldr	r0, [pc, #28]	; (80006c8 <MKS_read_param+0x7c>)
 80006ac:	f002 fc02 	bl	8002eb4 <HAL_UART_Transmit_IT>
	}
}
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	20000043 	.word	0x20000043
 80006bc:	20000034 	.word	0x20000034
 80006c0:	2000002c 	.word	0x2000002c
 80006c4:	20000029 	.word	0x20000029
 80006c8:	200000a8 	.word	0x200000a8

080006cc <MKS_read_param_F>:

void MKS_read_param_F(uint8_t param, uint8_t length_of_param){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	460a      	mov	r2, r1
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	4613      	mov	r3, r2
 80006da:	71bb      	strb	r3, [r7, #6]
	MKS_UART_wait();
 80006dc:	f7ff ff76 	bl	80005cc <MKS_UART_wait>
	MKS_read_param(param, length_of_param);
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff ffb0 	bl	800064c <MKS_read_param>
	MKS_UART_wait();
 80006ec:	f7ff ff6e 	bl	80005cc <MKS_UART_wait>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MKS_set_param>:


void MKS_set_param(uint8_t param, uint8_t value){
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
	if(statuss == UART_ready){
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MKS_set_param+0x58>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d11a      	bne.n	8000746 <MKS_set_param+0x4e>
		statuss = UART_processing;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MKS_set_param+0x58>)
 8000712:	2201      	movs	r2, #1
 8000714:	701a      	strb	r2, [r3, #0]
		transmit[0] = Address;
 8000716:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MKS_set_param+0x5c>)
 8000718:	22e0      	movs	r2, #224	; 0xe0
 800071a:	701a      	strb	r2, [r3, #0]
		transmit[1] = param;
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <MKS_set_param+0x5c>)
 800071e:	79fb      	ldrb	r3, [r7, #7]
 8000720:	7053      	strb	r3, [r2, #1]
		transmit[2] = value;
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <MKS_set_param+0x5c>)
 8000724:	79bb      	ldrb	r3, [r7, #6]
 8000726:	7093      	strb	r3, [r2, #2]
		transmit[3] = CRC_calc(3);
 8000728:	2003      	movs	r0, #3
 800072a:	f7ff ff2d 	bl	8000588 <CRC_calc>
 800072e:	4603      	mov	r3, r0
 8000730:	461a      	mov	r2, r3
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MKS_set_param+0x5c>)
 8000734:	70da      	strb	r2, [r3, #3]
		receive_length = response_length;
 8000736:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MKS_set_param+0x60>)
 8000738:	2203      	movs	r2, #3
 800073a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(Used_UART, transmit, 4);
 800073c:	2204      	movs	r2, #4
 800073e:	4905      	ldr	r1, [pc, #20]	; (8000754 <MKS_set_param+0x5c>)
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <MKS_set_param+0x64>)
 8000742:	f002 fbb7 	bl	8002eb4 <HAL_UART_Transmit_IT>
	}
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000043 	.word	0x20000043
 8000754:	2000002c 	.word	0x2000002c
 8000758:	20000029 	.word	0x20000029
 800075c:	200000a8 	.word	0x200000a8

08000760 <MKS_set_param_F>:

void MKS_set_param_F(uint8_t param, uint8_t value){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	460a      	mov	r2, r1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	4613      	mov	r3, r2
 800076e:	71bb      	strb	r3, [r7, #6]
	MKS_UART_wait();
 8000770:	f7ff ff2c 	bl	80005cc <MKS_UART_wait>
	MKS_set_param(param, value);
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4611      	mov	r1, r2
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ffbc 	bl	80006f8 <MKS_set_param>
	MKS_UART_wait();
 8000780:	f7ff ff24 	bl	80005cc <MKS_UART_wait>
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MKS_set_rotation_speed>:
	MKS_UART_wait();
	MKS_rotate(rot, speed, clockwise);
	MKS_UART_wait();
}

void MKS_set_rotation_speed(uint8_t speed, bool clockwise){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	460a      	mov	r2, r1
 8000796:	71fb      	strb	r3, [r7, #7]
 8000798:	4613      	mov	r3, r2
 800079a:	71bb      	strb	r3, [r7, #6]
	if(statuss == UART_ready){
 800079c:	4b17      	ldr	r3, [pc, #92]	; (80007fc <MKS_set_rotation_speed+0x70>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d126      	bne.n	80007f2 <MKS_set_rotation_speed+0x66>
		statuss = UART_processing;
 80007a4:	4b15      	ldr	r3, [pc, #84]	; (80007fc <MKS_set_rotation_speed+0x70>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
		if(clockwise){
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d004      	beq.n	80007ba <MKS_set_rotation_speed+0x2e>
			speed &= 0x7F;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	e003      	b.n	80007c2 <MKS_set_rotation_speed+0x36>
		}else{
			speed |= 0x80;
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80007c0:	71fb      	strb	r3, [r7, #7]
		}
		transmit[0] = Address;
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MKS_set_rotation_speed+0x74>)
 80007c4:	22e0      	movs	r2, #224	; 0xe0
 80007c6:	701a      	strb	r2, [r3, #0]
		transmit[1] = Set_rotation;
 80007c8:	4b0d      	ldr	r3, [pc, #52]	; (8000800 <MKS_set_rotation_speed+0x74>)
 80007ca:	22f6      	movs	r2, #246	; 0xf6
 80007cc:	705a      	strb	r2, [r3, #1]
		transmit[2] = (uint8_t)speed;
 80007ce:	4a0c      	ldr	r2, [pc, #48]	; (8000800 <MKS_set_rotation_speed+0x74>)
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	7093      	strb	r3, [r2, #2]
		transmit[3] = CRC_calc(3);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f7ff fed7 	bl	8000588 <CRC_calc>
 80007da:	4603      	mov	r3, r0
 80007dc:	461a      	mov	r2, r3
 80007de:	4b08      	ldr	r3, [pc, #32]	; (8000800 <MKS_set_rotation_speed+0x74>)
 80007e0:	70da      	strb	r2, [r3, #3]
		receive_length = response_length;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MKS_set_rotation_speed+0x78>)
 80007e4:	2203      	movs	r2, #3
 80007e6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(Used_UART, transmit, 4);
 80007e8:	2204      	movs	r2, #4
 80007ea:	4905      	ldr	r1, [pc, #20]	; (8000800 <MKS_set_rotation_speed+0x74>)
 80007ec:	4806      	ldr	r0, [pc, #24]	; (8000808 <MKS_set_rotation_speed+0x7c>)
 80007ee:	f002 fb61 	bl	8002eb4 <HAL_UART_Transmit_IT>
	}
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000043 	.word	0x20000043
 8000800:	2000002c 	.word	0x2000002c
 8000804:	20000029 	.word	0x20000029
 8000808:	200000a8 	.word	0x200000a8

0800080c <MKS_set_rotation_speed_F>:

void MKS_set_rotation_speed_F(uint8_t speed, bool clockwise){
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	460a      	mov	r2, r1
 8000816:	71fb      	strb	r3, [r7, #7]
 8000818:	4613      	mov	r3, r2
 800081a:	71bb      	strb	r3, [r7, #6]
	MKS_UART_wait();
 800081c:	f7ff fed6 	bl	80005cc <MKS_UART_wait>
	MKS_set_rotation_speed(speed, clockwise);
 8000820:	79ba      	ldrb	r2, [r7, #6]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ffb0 	bl	800078c <MKS_set_rotation_speed>
	MKS_UART_wait();
 800082c:	f7ff fece 	bl	80005cc <MKS_UART_wait>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <MKS_stop>:

void MKS_stop(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	if(statuss == UART_ready){
 800083c:	4b0e      	ldr	r3, [pc, #56]	; (8000878 <MKS_stop+0x40>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d117      	bne.n	8000874 <MKS_stop+0x3c>
		statuss = UART_processing;
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <MKS_stop+0x40>)
 8000846:	2201      	movs	r2, #1
 8000848:	701a      	strb	r2, [r3, #0]
		transmit[0] = Address;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MKS_stop+0x44>)
 800084c:	22e0      	movs	r2, #224	; 0xe0
 800084e:	701a      	strb	r2, [r3, #0]
		transmit[1] = Stop;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MKS_stop+0x44>)
 8000852:	22f7      	movs	r2, #247	; 0xf7
 8000854:	705a      	strb	r2, [r3, #1]
		transmit[2] = CRC_calc(2);
 8000856:	2002      	movs	r0, #2
 8000858:	f7ff fe96 	bl	8000588 <CRC_calc>
 800085c:	4603      	mov	r3, r0
 800085e:	461a      	mov	r2, r3
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MKS_stop+0x44>)
 8000862:	709a      	strb	r2, [r3, #2]
		receive_length = response_length;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MKS_stop+0x48>)
 8000866:	2203      	movs	r2, #3
 8000868:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(Used_UART, transmit, 3);
 800086a:	2203      	movs	r2, #3
 800086c:	4903      	ldr	r1, [pc, #12]	; (800087c <MKS_stop+0x44>)
 800086e:	4805      	ldr	r0, [pc, #20]	; (8000884 <MKS_stop+0x4c>)
 8000870:	f002 fb20 	bl	8002eb4 <HAL_UART_Transmit_IT>
	}
}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000043 	.word	0x20000043
 800087c:	2000002c 	.word	0x2000002c
 8000880:	20000029 	.word	0x20000029
 8000884:	200000a8 	.word	0x200000a8

08000888 <MKS_stop_F>:

void MKS_stop_F(void){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	MKS_UART_wait();
 800088c:	f7ff fe9e 	bl	80005cc <MKS_UART_wait>
	MKS_stop();
 8000890:	f7ff ffd2 	bl	8000838 <MKS_stop>
	MKS_UART_wait();
 8000894:	f7ff fe9a 	bl	80005cc <MKS_UART_wait>
}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}

0800089c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_GPIO_Init+0x2c>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a08      	ldr	r2, [pc, #32]	; (80008c8 <MX_GPIO_Init+0x2c>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_GPIO_Init+0x2c>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]

}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d0:	f000 fa81 	bl	8000dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008d4:	f000 f89c 	bl	8000a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d8:	f7ff ffe0 	bl	800089c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008dc:	f000 f9c2 	bl	8000c64 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80008e0:	f000 f962 	bl	8000ba8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  MKS_init();
 80008e4:	f7ff fe8a 	bl	80005fc <MKS_init>
  MKS_set_rotation_speed_F(10, true);
 80008e8:	2101      	movs	r1, #1
 80008ea:	200a      	movs	r0, #10
 80008ec:	f7ff ff8e 	bl	800080c <MKS_set_rotation_speed_F>
//		  //HAL_Delay(10);
//	  }
//	  MKS_read_param(Position_angle, Position_angle_length);
//	  read_rotation = (int32_t)((receive[1] << 24) + (receive[2] << 16) + (receive[3] << 8) + receive[4]);
//	  angle = (float)(read_rotation)/(encoder_quality/one_rotation_in_degrees);
	  MKS_read_param_F(Position_error, Position_error_length);
 80008f0:	2104      	movs	r1, #4
 80008f2:	2039      	movs	r0, #57	; 0x39
 80008f4:	f7ff feea 	bl	80006cc <MKS_read_param_F>
	  read_error = (int16_t)((receive[1] << 8) + (receive[2]));
 80008f8:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <main+0x118>)
 80008fa:	785b      	ldrb	r3, [r3, #1]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b29a      	uxth	r2, r3
 8000902:	4b38      	ldr	r3, [pc, #224]	; (80009e4 <main+0x118>)
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	b29b      	uxth	r3, r3
 8000908:	4413      	add	r3, r2
 800090a:	b29b      	uxth	r3, r3
 800090c:	b21a      	sxth	r2, r3
 800090e:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <main+0x11c>)
 8000910:	801a      	strh	r2, [r3, #0]
	  angle_err = (float)(read_error)/(encoder_quality/one_rotation_in_degrees);
 8000912:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <main+0x11c>)
 8000914:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000918:	ee07 3a90 	vmov	s15, r3
 800091c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000920:	eddf 6a32 	vldr	s13, [pc, #200]	; 80009ec <main+0x120>
 8000924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000928:	4b31      	ldr	r3, [pc, #196]	; (80009f0 <main+0x124>)
 800092a:	edc3 7a00 	vstr	s15, [r3]
	  MKS_read_param_F(En_value, En_value_length);
 800092e:	2108      	movs	r1, #8
 8000930:	2030      	movs	r0, #48	; 0x30
 8000932:	f7ff fecb 	bl	80006cc <MKS_read_param_F>
	  HAL_Delay(3);
 8000936:	2003      	movs	r0, #3
 8000938:	f000 fac2 	bl	8000ec0 <HAL_Delay>
	  encoder_rotations = (int32_t)((receive[1] << 24) + (receive[2] << 16) + (receive[3] << 8) + receive[4]);
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <main+0x118>)
 800093e:	785b      	ldrb	r3, [r3, #1]
 8000940:	061a      	lsls	r2, r3, #24
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <main+0x118>)
 8000944:	789b      	ldrb	r3, [r3, #2]
 8000946:	041b      	lsls	r3, r3, #16
 8000948:	441a      	add	r2, r3
 800094a:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <main+0x118>)
 800094c:	78db      	ldrb	r3, [r3, #3]
 800094e:	021b      	lsls	r3, r3, #8
 8000950:	4413      	add	r3, r2
 8000952:	4a24      	ldr	r2, [pc, #144]	; (80009e4 <main+0x118>)
 8000954:	7912      	ldrb	r2, [r2, #4]
 8000956:	4413      	add	r3, r2
 8000958:	4a26      	ldr	r2, [pc, #152]	; (80009f4 <main+0x128>)
 800095a:	6013      	str	r3, [r2, #0]
	  encoder_value = (uint16_t)((receive[5] << 8) + receive[6]);
 800095c:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <main+0x118>)
 800095e:	795b      	ldrb	r3, [r3, #5]
 8000960:	b29b      	uxth	r3, r3
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <main+0x118>)
 8000968:	799b      	ldrb	r3, [r3, #6]
 800096a:	b29b      	uxth	r3, r3
 800096c:	4413      	add	r3, r2
 800096e:	b29a      	uxth	r2, r3
 8000970:	4b21      	ldr	r3, [pc, #132]	; (80009f8 <main+0x12c>)
 8000972:	801a      	strh	r2, [r3, #0]
	  angle_en = (float)(encoder_value)/(encoder_quality/one_rotation_in_degrees);
 8000974:	4b20      	ldr	r3, [pc, #128]	; (80009f8 <main+0x12c>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	ee07 3a90 	vmov	s15, r3
 800097c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000980:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80009ec <main+0x120>
 8000984:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <main+0x130>)
 800098a:	edc3 7a00 	vstr	s15, [r3]
	  if(encoder_rotations >= 1){
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <main+0x128>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b00      	cmp	r3, #0
 8000994:	dd08      	ble.n	80009a8 <main+0xdc>
		  flag = true;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <main+0x134>)
 8000998:	2201      	movs	r2, #1
 800099a:	701a      	strb	r2, [r3, #0]
		  MKS_set_rotation_speed_F(10, flag);
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <main+0x134>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	4619      	mov	r1, r3
 80009a2:	200a      	movs	r0, #10
 80009a4:	f7ff ff32 	bl	800080c <MKS_set_rotation_speed_F>
	  }
	  if(encoder_rotations <= -1){
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <main+0x128>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	da08      	bge.n	80009c2 <main+0xf6>
		  flag = false;
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <main+0x134>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	701a      	strb	r2, [r3, #0]
		  MKS_set_rotation_speed_F(10, flag);
 80009b6:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <main+0x134>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4619      	mov	r1, r3
 80009bc:	200a      	movs	r0, #10
 80009be:	f7ff ff25 	bl	800080c <MKS_set_rotation_speed_F>
	  }
	  if(read_rotation > 800000 || read_rotation < -800000){
 80009c2:	4b10      	ldr	r3, [pc, #64]	; (8000a04 <main+0x138>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <main+0x13c>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	dc04      	bgt.n	80009d6 <main+0x10a>
 80009cc:	4b0d      	ldr	r3, [pc, #52]	; (8000a04 <main+0x138>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <main+0x140>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	da8c      	bge.n	80008f0 <main+0x24>
		  MKS_stop_F();
 80009d6:	f7ff ff57 	bl	8000888 <MKS_stop_F>
		  MKS_set_param_F(Enable_move, 0);
 80009da:	2100      	movs	r1, #0
 80009dc:	20f3      	movs	r0, #243	; 0xf3
 80009de:	f7ff febf 	bl	8000760 <MKS_set_param_F>
	  MKS_read_param_F(Position_error, Position_error_length);
 80009e2:	e785      	b.n	80008f0 <main+0x24>
 80009e4:	20000034 	.word	0x20000034
 80009e8:	20000054 	.word	0x20000054
 80009ec:	43360b61 	.word	0x43360b61
 80009f0:	20000058 	.word	0x20000058
 80009f4:	20000048 	.word	0x20000048
 80009f8:	20000044 	.word	0x20000044
 80009fc:	2000004c 	.word	0x2000004c
 8000a00:	20000028 	.word	0x20000028
 8000a04:	20000050 	.word	0x20000050
 8000a08:	000c3500 	.word	0x000c3500
 8000a0c:	fff3cb00 	.word	0xfff3cb00

08000a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b096      	sub	sp, #88	; 0x58
 8000a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	2244      	movs	r2, #68	; 0x44
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f003 fda2 	bl	8004568 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a24:	463b      	mov	r3, r7
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a36:	f000 fd6f 	bl	8001518 <HAL_PWREx_ControlVoltageScaling>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a40:	f000 f838 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a44:	2310      	movs	r3, #16
 8000a46:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a50:	2360      	movs	r3, #96	; 0x60
 8000a52:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a54:	2302      	movs	r3, #2
 8000a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a60:	2328      	movs	r3, #40	; 0x28
 8000a62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a64:	2307      	movs	r3, #7
 8000a66:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fda5 	bl	80015c4 <HAL_RCC_OscConfig>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a80:	f000 f818 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a84:	230f      	movs	r3, #15
 8000a86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2104      	movs	r1, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f9a5 	bl	8001dec <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000aa8:	f000 f804 	bl	8000ab4 <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3758      	adds	r7, #88	; 0x58
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>
	...

08000ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_MspInit+0x44>)
 8000ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aca:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <HAL_MspInit+0x44>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <HAL_MspInit+0x44>)
 8000ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <HAL_MspInit+0x44>)
 8000ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8000aea:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_MspInit+0x44>)
 8000aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	bf00      	nop
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	40021000 	.word	0x40021000

08000b08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <NMI_Handler+0x4>

08000b0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <HardFault_Handler+0x4>

08000b14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <MemManage_Handler+0x4>

08000b1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <BusFault_Handler+0x4>

08000b20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <UsageFault_Handler+0x4>

08000b26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr

08000b34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b54:	f000 f994 	bl	8000e80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <USART1_IRQHandler+0x10>)
 8000b62:	f002 fa6b 	bl	800303c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	200000a8 	.word	0x200000a8

08000b70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM6_DAC_IRQHandler+0x10>)
 8000b76:	f001 ff20 	bl	80029ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000005c 	.word	0x2000005c

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bae:	1d3b      	adds	r3, r7, #4
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000bb8:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_TIM6_Init+0x68>)
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <MX_TIM6_Init+0x6c>)
 8000bbc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1599;
 8000bbe:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <MX_TIM6_Init+0x68>)
 8000bc0:	f240 623f 	movw	r2, #1599	; 0x63f
 8000bc4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <MX_TIM6_Init+0x68>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 8000bcc:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <MX_TIM6_Init+0x68>)
 8000bce:	f242 720f 	movw	r2, #9999	; 0x270f
 8000bd2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd4:	4b0e      	ldr	r3, [pc, #56]	; (8000c10 <MX_TIM6_Init+0x68>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bda:	480d      	ldr	r0, [pc, #52]	; (8000c10 <MX_TIM6_Init+0x68>)
 8000bdc:	f001 fe12 	bl	8002804 <HAL_TIM_Base_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000be6:	f7ff ff65 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4806      	ldr	r0, [pc, #24]	; (8000c10 <MX_TIM6_Init+0x68>)
 8000bf8:	f002 f88a 	bl	8002d10 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000c02:	f7ff ff57 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	2000005c 	.word	0x2000005c
 8000c14:	40001000 	.word	0x40001000

08000c18 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0d      	ldr	r2, [pc, #52]	; (8000c5c <HAL_TIM_Base_MspInit+0x44>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d113      	bne.n	8000c52 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <HAL_TIM_Base_MspInit+0x48>)
 8000c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c2e:	4a0c      	ldr	r2, [pc, #48]	; (8000c60 <HAL_TIM_Base_MspInit+0x48>)
 8000c30:	f043 0310 	orr.w	r3, r3, #16
 8000c34:	6593      	str	r3, [r2, #88]	; 0x58
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_TIM_Base_MspInit+0x48>)
 8000c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c3a:	f003 0310 	and.w	r3, r3, #16
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 11, 0);
 8000c42:	2200      	movs	r2, #0
 8000c44:	210b      	movs	r1, #11
 8000c46:	2036      	movs	r0, #54	; 0x36
 8000c48:	f000 fa39 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c4c:	2036      	movs	r0, #54	; 0x36
 8000c4e:	f000 fa52 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40001000 	.word	0x40001000
 8000c60:	40021000 	.word	0x40021000

08000c64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c6a:	4a15      	ldr	r2, [pc, #84]	; (8000cc0 <MX_USART1_UART_Init+0x5c>)
 8000c6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c7c:	4b0f      	ldr	r3, [pc, #60]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c88:	4b0c      	ldr	r3, [pc, #48]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c8a:	220c      	movs	r2, #12
 8000c8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <MX_USART1_UART_Init+0x58>)
 8000ca8:	f002 f8b6 	bl	8002e18 <HAL_UART_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cb2:	f7ff feff 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200000a8 	.word	0x200000a8
 8000cc0:	40013800 	.word	0x40013800

08000cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b09e      	sub	sp, #120	; 0x78
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	2254      	movs	r2, #84	; 0x54
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 fc3f 	bl	8004568 <memset>
  if(uartHandle->Instance==USART1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <HAL_UART_MspInit+0xb8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d13f      	bne.n	8000d74 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fa97 	bl	8002234 <HAL_RCCEx_PeriphCLKConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d0c:	f7ff fed2 	bl	8000ab4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <HAL_UART_MspInit+0xbc>)
 8000d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d14:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <HAL_UART_MspInit+0xbc>)
 8000d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <HAL_UART_MspInit+0xbc>)
 8000d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d28:	4b15      	ldr	r3, [pc, #84]	; (8000d80 <HAL_UART_MspInit+0xbc>)
 8000d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <HAL_UART_MspInit+0xbc>)
 8000d2e:	f043 0301 	orr.w	r3, r3, #1
 8000d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_UART_MspInit+0xbc>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d44:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d52:	2307      	movs	r3, #7
 8000d54:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d60:	f000 fa62 	bl	8001228 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8000d64:	2200      	movs	r2, #0
 8000d66:	210a      	movs	r1, #10
 8000d68:	2025      	movs	r0, #37	; 0x25
 8000d6a:	f000 f9a8 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d6e:	2025      	movs	r0, #37	; 0x25
 8000d70:	f000 f9c1 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d74:	bf00      	nop
 8000d76:	3778      	adds	r7, #120	; 0x78
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40013800 	.word	0x40013800
 8000d80:	40021000 	.word	0x40021000

08000d84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d88:	f7ff fefc 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d8c:	480c      	ldr	r0, [pc, #48]	; (8000dc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d8e:	490d      	ldr	r1, [pc, #52]	; (8000dc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d90:	4a0d      	ldr	r2, [pc, #52]	; (8000dc8 <LoopForever+0xe>)
  movs r3, #0
 8000d92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d94:	e002      	b.n	8000d9c <LoopCopyDataInit>

08000d96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9a:	3304      	adds	r3, #4

08000d9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da0:	d3f9      	bcc.n	8000d96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000da4:	4c0a      	ldr	r4, [pc, #40]	; (8000dd0 <LoopForever+0x16>)
  movs r3, #0
 8000da6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000da8:	e001      	b.n	8000dae <LoopFillZerobss>

08000daa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000daa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dac:	3204      	adds	r2, #4

08000dae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db0:	d3fb      	bcc.n	8000daa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db2:	f003 fbb5 	bl	8004520 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000db6:	f7ff fd89 	bl	80008cc <main>

08000dba <LoopForever>:

LoopForever:
    b LoopForever
 8000dba:	e7fe      	b.n	8000dba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dc8:	080045e8 	.word	0x080045e8
  ldr r2, =_sbss
 8000dcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000dd0:	20000130 	.word	0x20000130

08000dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000dd4:	e7fe      	b.n	8000dd4 <ADC1_IRQHandler>

08000dd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f961 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000de6:	200f      	movs	r0, #15
 8000de8:	f000 f80e 	bl	8000e08 <HAL_InitTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	71fb      	strb	r3, [r7, #7]
 8000df6:	e001      	b.n	8000dfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df8:	f7ff fe62 	bl	8000ac0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000dfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_InitTick+0x6c>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d023      	beq.n	8000e64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e1c:	4b16      	ldr	r3, [pc, #88]	; (8000e78 <HAL_InitTick+0x70>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_InitTick+0x6c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 f96d 	bl	8001112 <HAL_SYSTICK_Config>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d10f      	bne.n	8000e5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2b0f      	cmp	r3, #15
 8000e42:	d809      	bhi.n	8000e58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e44:	2200      	movs	r2, #0
 8000e46:	6879      	ldr	r1, [r7, #4]
 8000e48:	f04f 30ff 	mov.w	r0, #4294967295
 8000e4c:	f000 f937 	bl	80010be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e50:	4a0a      	ldr	r2, [pc, #40]	; (8000e7c <HAL_InitTick+0x74>)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
 8000e5c:	e004      	b.n	8000e68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	73fb      	strb	r3, [r7, #15]
 8000e62:	e001      	b.n	8000e68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000008 	.word	0x20000008
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	2000012c 	.word	0x2000012c

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2000012c 	.word	0x2000012c

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ec8:	f7ff ffee 	bl	8000ea8 <HAL_GetTick>
 8000ecc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ed8:	d005      	beq.n	8000ee6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_Delay+0x44>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	461a      	mov	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ee6:	bf00      	nop
 8000ee8:	f7ff ffde 	bl	8000ea8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	68fa      	ldr	r2, [r7, #12]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d8f7      	bhi.n	8000ee8 <HAL_Delay+0x28>
  {
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000008 	.word	0x20000008

08000f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f24:	4013      	ands	r3, r2
 8000f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f3a:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	60d3      	str	r3, [r2, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <__NVIC_GetPriorityGrouping+0x18>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	0a1b      	lsrs	r3, r3, #8
 8000f5a:	f003 0307 	and.w	r3, r3, #7
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db0b      	blt.n	8000f96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	f003 021f 	and.w	r2, r3, #31
 8000f84:	4907      	ldr	r1, [pc, #28]	; (8000fa4 <__NVIC_EnableIRQ+0x38>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	095b      	lsrs	r3, r3, #5
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff29 	bl	8000f08 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff3e 	bl	8000f50 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff8e 	bl	8000ffc <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff31 	bl	8000f6c <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800112a:	b480      	push	{r7}
 800112c:	b085      	sub	sp, #20
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001132:	2300      	movs	r3, #0
 8001134:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800113c:	b2db      	uxtb	r3, r3
 800113e:	2b02      	cmp	r3, #2
 8001140:	d008      	beq.n	8001154 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2204      	movs	r2, #4
 8001146:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e022      	b.n	800119a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 020e 	bic.w	r2, r2, #14
 8001162:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001178:	f003 021c 	and.w	r2, r3, #28
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	2101      	movs	r1, #1
 8001182:	fa01 f202 	lsl.w	r2, r1, r2
 8001186:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001198:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr

080011a6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b084      	sub	sp, #16
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ae:	2300      	movs	r3, #0
 80011b0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	d005      	beq.n	80011ca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2204      	movs	r2, #4
 80011c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	73fb      	strb	r3, [r7, #15]
 80011c8:	e029      	b.n	800121e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f022 020e 	bic.w	r2, r2, #14
 80011d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f022 0201 	bic.w	r2, r2, #1
 80011e8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f003 021c 	and.w	r2, r3, #28
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	2101      	movs	r1, #1
 80011f8:	fa01 f202 	lsl.w	r2, r1, r2
 80011fc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001212:	2b00      	cmp	r3, #0
 8001214:	d003      	beq.n	800121e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	4798      	blx	r3
    }
  }
  return status;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001236:	e148      	b.n	80014ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	2101      	movs	r1, #1
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	4013      	ands	r3, r2
 8001246:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 813a 	beq.w	80014c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 0303 	and.w	r3, r3, #3
 8001258:	2b01      	cmp	r3, #1
 800125a:	d005      	beq.n	8001268 <HAL_GPIO_Init+0x40>
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d130      	bne.n	80012ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	2203      	movs	r2, #3
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	68da      	ldr	r2, [r3, #12]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800129e:	2201      	movs	r2, #1
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	f003 0201 	and.w	r2, r3, #1
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d017      	beq.n	8001306 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b02      	cmp	r3, #2
 8001310:	d123      	bne.n	800135a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	08da      	lsrs	r2, r3, #3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3208      	adds	r2, #8
 800131a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	220f      	movs	r2, #15
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	43db      	mvns	r3, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4013      	ands	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	691a      	ldr	r2, [r3, #16]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	f003 0307 	and.w	r3, r3, #7
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	08da      	lsrs	r2, r3, #3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	3208      	adds	r2, #8
 8001354:	6939      	ldr	r1, [r7, #16]
 8001356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	2203      	movs	r2, #3
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f003 0203 	and.w	r2, r3, #3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 8094 	beq.w	80014c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800139c:	4b52      	ldr	r3, [pc, #328]	; (80014e8 <HAL_GPIO_Init+0x2c0>)
 800139e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a0:	4a51      	ldr	r2, [pc, #324]	; (80014e8 <HAL_GPIO_Init+0x2c0>)
 80013a2:	f043 0301 	orr.w	r3, r3, #1
 80013a6:	6613      	str	r3, [r2, #96]	; 0x60
 80013a8:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x2c0>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60bb      	str	r3, [r7, #8]
 80013b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013b4:	4a4d      	ldr	r2, [pc, #308]	; (80014ec <HAL_GPIO_Init+0x2c4>)
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	3302      	adds	r3, #2
 80013bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	f003 0303 	and.w	r3, r3, #3
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	220f      	movs	r2, #15
 80013cc:	fa02 f303 	lsl.w	r3, r2, r3
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013de:	d00d      	beq.n	80013fc <HAL_GPIO_Init+0x1d4>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4a43      	ldr	r2, [pc, #268]	; (80014f0 <HAL_GPIO_Init+0x2c8>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d007      	beq.n	80013f8 <HAL_GPIO_Init+0x1d0>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a42      	ldr	r2, [pc, #264]	; (80014f4 <HAL_GPIO_Init+0x2cc>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d101      	bne.n	80013f4 <HAL_GPIO_Init+0x1cc>
 80013f0:	2302      	movs	r3, #2
 80013f2:	e004      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013f4:	2307      	movs	r3, #7
 80013f6:	e002      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <HAL_GPIO_Init+0x1d6>
 80013fc:	2300      	movs	r3, #0
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	f002 0203 	and.w	r2, r2, #3
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	4093      	lsls	r3, r2
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800140e:	4937      	ldr	r1, [pc, #220]	; (80014ec <HAL_GPIO_Init+0x2c4>)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	089b      	lsrs	r3, r3, #2
 8001414:	3302      	adds	r3, #2
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800141c:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43db      	mvns	r3, r3
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	4313      	orrs	r3, r2
 800143e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001440:	4a2d      	ldr	r2, [pc, #180]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001446:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d003      	beq.n	800146a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800146a:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001470:	4b21      	ldr	r3, [pc, #132]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	43db      	mvns	r3, r3
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	4013      	ands	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d003      	beq.n	8001494 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001494:	4a18      	ldr	r2, [pc, #96]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800149a:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4013      	ands	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d003      	beq.n	80014be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	4313      	orrs	r3, r2
 80014bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014be:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_GPIO_Init+0x2d0>)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	3301      	adds	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	fa22 f303 	lsr.w	r3, r2, r3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	f47f aeaf 	bne.w	8001238 <HAL_GPIO_Init+0x10>
  }
}
 80014da:	bf00      	nop
 80014dc:	bf00      	nop
 80014de:	371c      	adds	r7, #28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40021000 	.word	0x40021000
 80014ec:	40010000 	.word	0x40010000
 80014f0:	48000400 	.word	0x48000400
 80014f4:	48000800 	.word	0x48000800
 80014f8:	40010400 	.word	0x40010400

080014fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <HAL_PWREx_GetVoltageRange+0x18>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001508:	4618      	mov	r0, r3
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	40007000 	.word	0x40007000

08001518 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001526:	d130      	bne.n	800158a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001528:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001534:	d038      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800153e:	4a1e      	ldr	r2, [pc, #120]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001540:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001544:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001546:	4b1d      	ldr	r3, [pc, #116]	; (80015bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2232      	movs	r2, #50	; 0x32
 800154c:	fb02 f303 	mul.w	r3, r2, r3
 8001550:	4a1b      	ldr	r2, [pc, #108]	; (80015c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001552:	fba2 2303 	umull	r2, r3, r2, r3
 8001556:	0c9b      	lsrs	r3, r3, #18
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800155c:	e002      	b.n	8001564 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	3b01      	subs	r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001570:	d102      	bne.n	8001578 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1f2      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157a:	695b      	ldr	r3, [r3, #20]
 800157c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001580:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001584:	d110      	bne.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e00f      	b.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001592:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001596:	d007      	beq.n	80015a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015a0:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40007000 	.word	0x40007000
 80015bc:	20000000 	.word	0x20000000
 80015c0:	431bde83 	.word	0x431bde83

080015c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f000 bc02 	b.w	8001ddc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015d8:	4b96      	ldr	r3, [pc, #600]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f003 030c 	and.w	r3, r3, #12
 80015e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015e2:	4b94      	ldr	r3, [pc, #592]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 80e4 	beq.w	80017c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d007      	beq.n	8001610 <HAL_RCC_OscConfig+0x4c>
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b0c      	cmp	r3, #12
 8001604:	f040 808b 	bne.w	800171e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b01      	cmp	r3, #1
 800160c:	f040 8087 	bne.w	800171e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001610:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d005      	beq.n	8001628 <HAL_RCC_OscConfig+0x64>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e3d9      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1a      	ldr	r2, [r3, #32]
 800162c:	4b81      	ldr	r3, [pc, #516]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0308 	and.w	r3, r3, #8
 8001634:	2b00      	cmp	r3, #0
 8001636:	d004      	beq.n	8001642 <HAL_RCC_OscConfig+0x7e>
 8001638:	4b7e      	ldr	r3, [pc, #504]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001640:	e005      	b.n	800164e <HAL_RCC_OscConfig+0x8a>
 8001642:	4b7c      	ldr	r3, [pc, #496]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800164e:	4293      	cmp	r3, r2
 8001650:	d223      	bcs.n	800169a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1b      	ldr	r3, [r3, #32]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fd8c 	bl	8002174 <RCC_SetFlashLatencyFromMSIRange>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e3ba      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001666:	4b73      	ldr	r3, [pc, #460]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a72      	ldr	r2, [pc, #456]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800166c:	f043 0308 	orr.w	r3, r3, #8
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	4b70      	ldr	r3, [pc, #448]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	496d      	ldr	r1, [pc, #436]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001680:	4313      	orrs	r3, r2
 8001682:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001684:	4b6b      	ldr	r3, [pc, #428]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69db      	ldr	r3, [r3, #28]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	4968      	ldr	r1, [pc, #416]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001694:	4313      	orrs	r3, r2
 8001696:	604b      	str	r3, [r1, #4]
 8001698:	e025      	b.n	80016e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800169a:	4b66      	ldr	r3, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a65      	ldr	r2, [pc, #404]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6a1b      	ldr	r3, [r3, #32]
 80016b2:	4960      	ldr	r1, [pc, #384]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	021b      	lsls	r3, r3, #8
 80016c6:	495b      	ldr	r1, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d109      	bne.n	80016e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 fd4c 	bl	8002174 <RCC_SetFlashLatencyFromMSIRange>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e37a      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016e6:	f000 fc81 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b51      	ldr	r3, [pc, #324]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	4950      	ldr	r1, [pc, #320]	; (8001838 <HAL_RCC_OscConfig+0x274>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	f003 031f 	and.w	r3, r3, #31
 80016fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001702:	4a4e      	ldr	r2, [pc, #312]	; (800183c <HAL_RCC_OscConfig+0x278>)
 8001704:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001706:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <HAL_RCC_OscConfig+0x27c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fb7c 	bl	8000e08 <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d052      	beq.n	80017c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	e35e      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d032      	beq.n	800178c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001726:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a42      	ldr	r2, [pc, #264]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001732:	f7ff fbb9 	bl	8000ea8 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800173a:	f7ff fbb5 	bl	8000ea8 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e347      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800174c:	4b39      	ldr	r3, [pc, #228]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a35      	ldr	r2, [pc, #212]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800175e:	f043 0308 	orr.w	r3, r3, #8
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	4b33      	ldr	r3, [pc, #204]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4930      	ldr	r1, [pc, #192]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001772:	4313      	orrs	r3, r2
 8001774:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	4b2f      	ldr	r3, [pc, #188]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	021b      	lsls	r3, r3, #8
 8001784:	492b      	ldr	r1, [pc, #172]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001786:	4313      	orrs	r3, r2
 8001788:	604b      	str	r3, [r1, #4]
 800178a:	e01a      	b.n	80017c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a28      	ldr	r2, [pc, #160]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001792:	f023 0301 	bic.w	r3, r3, #1
 8001796:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001798:	f7ff fb86 	bl	8000ea8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a0:	f7ff fb82 	bl	8000ea8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e314      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x1dc>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d073      	beq.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_OscConfig+0x21c>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d10e      	bne.n	80017f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b03      	cmp	r3, #3
 80017de:	d10b      	bne.n	80017f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	4b14      	ldr	r3, [pc, #80]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d063      	beq.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d15f      	bne.n	80018b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e2f1      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001800:	d106      	bne.n	8001810 <HAL_RCC_OscConfig+0x24c>
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a0b      	ldr	r2, [pc, #44]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800180c:	6013      	str	r3, [r2, #0]
 800180e:	e025      	b.n	800185c <HAL_RCC_OscConfig+0x298>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001818:	d114      	bne.n	8001844 <HAL_RCC_OscConfig+0x280>
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a05      	ldr	r2, [pc, #20]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001820:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001824:	6013      	str	r3, [r2, #0]
 8001826:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a02      	ldr	r2, [pc, #8]	; (8001834 <HAL_RCC_OscConfig+0x270>)
 800182c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	e013      	b.n	800185c <HAL_RCC_OscConfig+0x298>
 8001834:	40021000 	.word	0x40021000
 8001838:	08004590 	.word	0x08004590
 800183c:	20000000 	.word	0x20000000
 8001840:	20000004 	.word	0x20000004
 8001844:	4ba0      	ldr	r3, [pc, #640]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a9f      	ldr	r2, [pc, #636]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b9d      	ldr	r3, [pc, #628]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a9c      	ldr	r2, [pc, #624]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001864:	f7ff fb20 	bl	8000ea8 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fb1c 	bl	8000ea8 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	; 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e2ae      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800187e:	4b92      	ldr	r3, [pc, #584]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x2a8>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fb0c 	bl	8000ea8 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fb08 	bl	8000ea8 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	; 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e29a      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018a6:	4b88      	ldr	r3, [pc, #544]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0x2d0>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d060      	beq.n	8001984 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	2b04      	cmp	r3, #4
 80018c6:	d005      	beq.n	80018d4 <HAL_RCC_OscConfig+0x310>
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b0c      	cmp	r3, #12
 80018cc:	d119      	bne.n	8001902 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d116      	bne.n	8001902 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	4b7c      	ldr	r3, [pc, #496]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <HAL_RCC_OscConfig+0x328>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e277      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b76      	ldr	r3, [pc, #472]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	061b      	lsls	r3, r3, #24
 80018fa:	4973      	ldr	r1, [pc, #460]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001900:	e040      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d023      	beq.n	8001952 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800190a:	4b6f      	ldr	r3, [pc, #444]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6e      	ldr	r2, [pc, #440]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001914:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fac7 	bl	8000ea8 <HAL_GetTick>
 800191a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800191c:	e008      	b.n	8001930 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800191e:	f7ff fac3 	bl	8000ea8 <HAL_GetTick>
 8001922:	4602      	mov	r2, r0
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d901      	bls.n	8001930 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800192c:	2303      	movs	r3, #3
 800192e:	e255      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001930:	4b65      	ldr	r3, [pc, #404]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001938:	2b00      	cmp	r3, #0
 800193a:	d0f0      	beq.n	800191e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b62      	ldr	r3, [pc, #392]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	495f      	ldr	r1, [pc, #380]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
 8001950:	e018      	b.n	8001984 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001952:	4b5d      	ldr	r3, [pc, #372]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a5c      	ldr	r2, [pc, #368]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800195c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195e:	f7ff faa3 	bl	8000ea8 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001966:	f7ff fa9f 	bl	8000ea8 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e231      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001978:	4b53      	ldr	r3, [pc, #332]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03c      	beq.n	8001a0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001998:	4b4b      	ldr	r3, [pc, #300]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	4a4a      	ldr	r2, [pc, #296]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff fa7e 	bl	8000ea8 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b0:	f7ff fa7a 	bl	8000ea8 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e20c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c2:	4b41      	ldr	r3, [pc, #260]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d0ef      	beq.n	80019b0 <HAL_RCC_OscConfig+0x3ec>
 80019d0:	e01b      	b.n	8001a0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d2:	4b3d      	ldr	r3, [pc, #244]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d8:	4a3b      	ldr	r2, [pc, #236]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e2:	f7ff fa61 	bl	8000ea8 <HAL_GetTick>
 80019e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fa5d 	bl	8000ea8 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e1ef      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	4b32      	ldr	r3, [pc, #200]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1ef      	bne.n	80019ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f000 80a6 	beq.w	8001b64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d10d      	bne.n	8001a44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a28:	4b27      	ldr	r3, [pc, #156]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a26      	ldr	r2, [pc, #152]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
 8001a34:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a40:	2301      	movs	r3, #1
 8001a42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a44:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d118      	bne.n	8001a82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a50:	4b1e      	ldr	r3, [pc, #120]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a1d      	ldr	r2, [pc, #116]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fa24 	bl	8000ea8 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a64:	f7ff fa20 	bl	8000ea8 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1b2      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_RCC_OscConfig+0x508>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d108      	bne.n	8001a9c <HAL_RCC_OscConfig+0x4d8>
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a9a:	e029      	b.n	8001af0 <HAL_RCC_OscConfig+0x52c>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d115      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x50c>
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a03      	ldr	r2, [pc, #12]	; (8001ac8 <HAL_RCC_OscConfig+0x504>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ac4:	e014      	b.n	8001af0 <HAL_RCC_OscConfig+0x52c>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	4b9a      	ldr	r3, [pc, #616]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad6:	4a99      	ldr	r2, [pc, #612]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ad8:	f023 0301 	bic.w	r3, r3, #1
 8001adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ae0:	4b96      	ldr	r3, [pc, #600]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	4a95      	ldr	r2, [pc, #596]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ae8:	f023 0304 	bic.w	r3, r3, #4
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d016      	beq.n	8001b26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f9d6 	bl	8000ea8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff f9d2 	bl	8000ea8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e162      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b16:	4b89      	ldr	r3, [pc, #548]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0ed      	beq.n	8001b00 <HAL_RCC_OscConfig+0x53c>
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b26:	f7ff f9bf 	bl	8000ea8 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b2c:	e00a      	b.n	8001b44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2e:	f7ff f9bb 	bl	8000ea8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d901      	bls.n	8001b44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b40:	2303      	movs	r3, #3
 8001b42:	e14b      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b44:	4b7d      	ldr	r3, [pc, #500]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1ed      	bne.n	8001b2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b52:	7ffb      	ldrb	r3, [r7, #31]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d105      	bne.n	8001b64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b58:	4b78      	ldr	r3, [pc, #480]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	4a77      	ldr	r2, [pc, #476]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0320 	and.w	r3, r3, #32
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d03c      	beq.n	8001bea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b78:	4b70      	ldr	r3, [pc, #448]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7e:	4a6f      	ldr	r2, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7ff f98e 	bl	8000ea8 <HAL_GetTick>
 8001b8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b90:	f7ff f98a 	bl	8000ea8 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e11c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ba2:	4b66      	ldr	r3, [pc, #408]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001ba4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0ef      	beq.n	8001b90 <HAL_RCC_OscConfig+0x5cc>
 8001bb0:	e01b      	b.n	8001bea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bb2:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb8:	4a60      	ldr	r2, [pc, #384]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bba:	f023 0301 	bic.w	r3, r3, #1
 8001bbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f971 	bl	8000ea8 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bc8:	e008      	b.n	8001bdc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bca:	f7ff f96d 	bl	8000ea8 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e0ff      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bdc:	4b57      	ldr	r3, [pc, #348]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001bde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1ef      	bne.n	8001bca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f000 80f3 	beq.w	8001dda <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f040 80c9 	bne.w	8001d90 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bfe:	4b4f      	ldr	r3, [pc, #316]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	f003 0203 	and.w	r2, r3, #3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d12c      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d123      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d11b      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d113      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	085b      	lsrs	r3, r3, #1
 8001c50:	3b01      	subs	r3, #1
 8001c52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d109      	bne.n	8001c6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3b01      	subs	r3, #1
 8001c66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d06b      	beq.n	8001d44 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	2b0c      	cmp	r3, #12
 8001c70:	d062      	beq.n	8001d38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c72:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0ac      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c82:	4b2e      	ldr	r3, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a2d      	ldr	r2, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001c88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c8e:	f7ff f90b 	bl	8000ea8 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f907 	bl	8000ea8 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e099      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_OscConfig+0x77c>)
 8001cba:	4013      	ands	r3, r2
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001cc4:	3a01      	subs	r2, #1
 8001cc6:	0112      	lsls	r2, r2, #4
 8001cc8:	4311      	orrs	r1, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cce:	0212      	lsls	r2, r2, #8
 8001cd0:	4311      	orrs	r1, r2
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cd6:	0852      	lsrs	r2, r2, #1
 8001cd8:	3a01      	subs	r2, #1
 8001cda:	0552      	lsls	r2, r2, #21
 8001cdc:	4311      	orrs	r1, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ce2:	0852      	lsrs	r2, r2, #1
 8001ce4:	3a01      	subs	r2, #1
 8001ce6:	0652      	lsls	r2, r2, #25
 8001ce8:	4311      	orrs	r1, r2
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cee:	06d2      	lsls	r2, r2, #27
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	4912      	ldr	r1, [pc, #72]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d04:	4b0d      	ldr	r3, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d10:	f7ff f8ca 	bl	8000ea8 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f8c6 	bl	8000ea8 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e058      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d2a:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_RCC_OscConfig+0x778>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0f0      	beq.n	8001d18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d36:	e050      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e04f      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d44:	4b27      	ldr	r3, [pc, #156]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d144      	bne.n	8001dda <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d50:	4b24      	ldr	r3, [pc, #144]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a23      	ldr	r2, [pc, #140]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d5c:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	4a20      	ldr	r2, [pc, #128]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d68:	f7ff f89e 	bl	8000ea8 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d70:	f7ff f89a 	bl	8000ea8 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e02c      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d82:	4b18      	ldr	r3, [pc, #96]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x7ac>
 8001d8e:	e024      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b0c      	cmp	r3, #12
 8001d94:	d01f      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da2:	f7ff f881 	bl	8000ea8 <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001daa:	f7ff f87d 	bl	8000ea8 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e00f      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dbc:	4b09      	ldr	r3, [pc, #36]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d1f0      	bne.n	8001daa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dca:	68da      	ldr	r2, [r3, #12]
 8001dcc:	4905      	ldr	r1, [pc, #20]	; (8001de4 <HAL_RCC_OscConfig+0x820>)
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_RCC_OscConfig+0x824>)
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60cb      	str	r3, [r1, #12]
 8001dd4:	e001      	b.n	8001dda <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3720      	adds	r7, #32
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40021000 	.word	0x40021000
 8001de8:	feeefffc 	.word	0xfeeefffc

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e0e7      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b75      	ldr	r3, [pc, #468]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b72      	ldr	r3, [pc, #456]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	4970      	ldr	r1, [pc, #448]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b6e      	ldr	r3, [pc, #440]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e0cf      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d010      	beq.n	8001e5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	4b66      	ldr	r3, [pc, #408]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d908      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e4c:	4b63      	ldr	r3, [pc, #396]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4960      	ldr	r1, [pc, #384]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d04c      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d121      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e0a6      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8a:	4b54      	ldr	r3, [pc, #336]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e09a      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ea2:	4b4e      	ldr	r3, [pc, #312]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e08e      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb2:	4b4a      	ldr	r3, [pc, #296]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e086      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4943      	ldr	r1, [pc, #268]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed4:	f7fe ffe8 	bl	8000ea8 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7fe ffe4 	bl	8000ea8 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e06e      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d208      	bcs.n	8001f32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f20:	4b2e      	ldr	r3, [pc, #184]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	492b      	ldr	r1, [pc, #172]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f32:	4b29      	ldr	r3, [pc, #164]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d210      	bcs.n	8001f62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f40:	4b25      	ldr	r3, [pc, #148]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f023 0207 	bic.w	r2, r3, #7
 8001f48:	4923      	ldr	r1, [pc, #140]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f50:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d001      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e036      	b.n	8001fd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6e:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	4918      	ldr	r1, [pc, #96]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0308 	and.w	r3, r3, #8
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f8c:	4b13      	ldr	r3, [pc, #76]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4910      	ldr	r1, [pc, #64]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fa0:	f000 f824 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	490b      	ldr	r1, [pc, #44]	; (8001fe0 <HAL_RCC_ClockConfig+0x1f4>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	f003 031f 	and.w	r3, r3, #31
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <HAL_RCC_ClockConfig+0x1f8>)
 8001fbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <HAL_RCC_ClockConfig+0x1fc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe ff1f 	bl	8000e08 <HAL_InitTick>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fce:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08004590 	.word	0x08004590
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000004 	.word	0x20000004

08001fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b089      	sub	sp, #36	; 0x24
 8001ff0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	4b3e      	ldr	r3, [pc, #248]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <HAL_RCC_GetSysClockFreq+0x34>
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d121      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d11e      	bne.n	800205e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002020:	4b34      	ldr	r3, [pc, #208]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	0a1b      	lsrs	r3, r3, #8
 8002034:	f003 030f 	and.w	r3, r3, #15
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	e005      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800203c:	4b2d      	ldr	r3, [pc, #180]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002048:	4a2b      	ldr	r2, [pc, #172]	; (80020f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002050:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205c:	e00a      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b04      	cmp	r3, #4
 8002062:	d102      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002064:	4b25      	ldr	r3, [pc, #148]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002066:	61bb      	str	r3, [r7, #24]
 8002068:	e004      	b.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b08      	cmp	r3, #8
 800206e:	d101      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002070:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_RCC_GetSysClockFreq+0x114>)
 8002072:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d134      	bne.n	80020e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d003      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0xa6>
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b03      	cmp	r3, #3
 800208e:	d003      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0xac>
 8002090:	e005      	b.n	800209e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <HAL_RCC_GetSysClockFreq+0x110>)
 8002094:	617b      	str	r3, [r7, #20]
      break;
 8002096:	e005      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002098:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_RCC_GetSysClockFreq+0x114>)
 800209a:	617b      	str	r3, [r7, #20]
      break;
 800209c:	e002      	b.n	80020a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	3301      	adds	r3, #1
 80020b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	0a1b      	lsrs	r3, r3, #8
 80020b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020bc:	697a      	ldr	r2, [r7, #20]
 80020be:	fb03 f202 	mul.w	r2, r3, r2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80020c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	0e5b      	lsrs	r3, r3, #25
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	3301      	adds	r3, #1
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020e4:	69bb      	ldr	r3, [r7, #24]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3724      	adds	r7, #36	; 0x24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000
 80020f8:	080045a8 	.word	0x080045a8
 80020fc:	00f42400 	.word	0x00f42400
 8002100:	007a1200 	.word	0x007a1200

08002104 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_GetHCLKFreq+0x14>)
 800210a:	681b      	ldr	r3, [r3, #0]
}
 800210c:	4618      	mov	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	20000000 	.word	0x20000000

0800211c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002120:	f7ff fff0 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	080045a0 	.word	0x080045a0

08002148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800214c:	f7ff ffda 	bl	8002104 <HAL_RCC_GetHCLKFreq>
 8002150:	4602      	mov	r2, r0
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	0adb      	lsrs	r3, r3, #11
 8002158:	f003 0307 	and.w	r3, r3, #7
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x28>)
 800215e:	5ccb      	ldrb	r3, [r1, r3]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	080045a0 	.word	0x080045a0

08002174 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800217c:	2300      	movs	r3, #0
 800217e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002180:	4b2a      	ldr	r3, [pc, #168]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800218c:	f7ff f9b6 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 8002190:	6178      	str	r0, [r7, #20]
 8002192:	e014      	b.n	80021be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002196:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002198:	4a24      	ldr	r2, [pc, #144]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800219a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800219e:	6593      	str	r3, [r2, #88]	; 0x58
 80021a0:	4b22      	ldr	r3, [pc, #136]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021ac:	f7ff f9a6 	bl	80014fc <HAL_PWREx_GetVoltageRange>
 80021b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021b2:	4b1e      	ldr	r3, [pc, #120]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b6:	4a1d      	ldr	r2, [pc, #116]	; (800222c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021c4:	d10b      	bne.n	80021de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d919      	bls.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2ba0      	cmp	r3, #160	; 0xa0
 80021d0:	d902      	bls.n	80021d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021d2:	2302      	movs	r3, #2
 80021d4:	613b      	str	r3, [r7, #16]
 80021d6:	e013      	b.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021d8:	2301      	movs	r3, #1
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	e010      	b.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2b80      	cmp	r3, #128	; 0x80
 80021e2:	d902      	bls.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021e4:	2303      	movs	r3, #3
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e00a      	b.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b80      	cmp	r3, #128	; 0x80
 80021ee:	d102      	bne.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021f0:	2302      	movs	r3, #2
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e004      	b.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b70      	cmp	r3, #112	; 0x70
 80021fa:	d101      	bne.n	8002200 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021fc:	2301      	movs	r3, #1
 80021fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 0207 	bic.w	r2, r3, #7
 8002208:	4909      	ldr	r1, [pc, #36]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002210:	4b07      	ldr	r3, [pc, #28]	; (8002230 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	429a      	cmp	r2, r3
 800221c:	d001      	beq.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	40022000 	.word	0x40022000

08002234 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800223c:	2300      	movs	r3, #0
 800223e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002240:	2300      	movs	r3, #0
 8002242:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800224c:	2b00      	cmp	r3, #0
 800224e:	d031      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002254:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002258:	d01a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800225a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800225e:	d814      	bhi.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002264:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002268:	d10f      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800226a:	4b5d      	ldr	r3, [pc, #372]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	4a5c      	ldr	r2, [pc, #368]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002276:	e00c      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3304      	adds	r3, #4
 800227c:	2100      	movs	r1, #0
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f9ce 	bl	8002620 <RCCEx_PLLSAI1_Config>
 8002284:	4603      	mov	r3, r0
 8002286:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002288:	e003      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	74fb      	strb	r3, [r7, #19]
      break;
 800228e:	e000      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002292:	7cfb      	ldrb	r3, [r7, #19]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10b      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002298:	4b51      	ldr	r3, [pc, #324]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a6:	494e      	ldr	r1, [pc, #312]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ae:	e001      	b.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	f000 809e 	beq.w	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c2:	2300      	movs	r3, #0
 80022c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022c6:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80022d6:	2300      	movs	r3, #0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d00d      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	4b40      	ldr	r3, [pc, #256]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	4a3f      	ldr	r2, [pc, #252]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6593      	str	r3, [r2, #88]	; 0x58
 80022e8:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022f4:	2301      	movs	r3, #1
 80022f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f8:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a39      	ldr	r2, [pc, #228]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80022fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002302:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002304:	f7fe fdd0 	bl	8000ea8 <HAL_GetTick>
 8002308:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800230a:	e009      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230c:	f7fe fdcc 	bl	8000ea8 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d902      	bls.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	74fb      	strb	r3, [r7, #19]
        break;
 800231e:	e005      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002320:	4b30      	ldr	r3, [pc, #192]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0ef      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d15a      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002332:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002338:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800233c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d01e      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	429a      	cmp	r2, r3
 800234c:	d019      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800234e:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002358:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800235c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002360:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002362:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002366:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	4a1b      	ldr	r2, [pc, #108]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800237a:	4a19      	ldr	r2, [pc, #100]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d016      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800238c:	f7fe fd8c 	bl	8000ea8 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002392:	e00b      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002394:	f7fe fd88 	bl	8000ea8 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	f241 3288 	movw	r2, #5000	; 0x1388
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d902      	bls.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	74fb      	strb	r3, [r7, #19]
            break;
 80023aa:	e006      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ac:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0ec      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80023ba:	7cfb      	ldrb	r3, [r7, #19]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	4904      	ldr	r1, [pc, #16]	; (80023e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023d6:	e009      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d8:	7cfb      	ldrb	r3, [r7, #19]
 80023da:	74bb      	strb	r3, [r7, #18]
 80023dc:	e006      	b.n	80023ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023ec:	7c7b      	ldrb	r3, [r7, #17]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d105      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023f2:	4b8a      	ldr	r3, [pc, #552]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f6:	4a89      	ldr	r2, [pc, #548]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800240a:	4b84      	ldr	r3, [pc, #528]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800240c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002410:	f023 0203 	bic.w	r2, r3, #3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a1b      	ldr	r3, [r3, #32]
 8002418:	4980      	ldr	r1, [pc, #512]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d00a      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800242c:	4b7b      	ldr	r3, [pc, #492]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800242e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002432:	f023 020c 	bic.w	r2, r3, #12
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	4978      	ldr	r1, [pc, #480]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800243c:	4313      	orrs	r3, r2
 800243e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0320 	and.w	r3, r3, #32
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800244e:	4b73      	ldr	r3, [pc, #460]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002454:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800245c:	496f      	ldr	r1, [pc, #444]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800245e:	4313      	orrs	r3, r2
 8002460:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00a      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002470:	4b6a      	ldr	r3, [pc, #424]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002476:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247e:	4967      	ldr	r1, [pc, #412]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002480:	4313      	orrs	r3, r2
 8002482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002492:	4b62      	ldr	r3, [pc, #392]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a0:	495e      	ldr	r1, [pc, #376]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c2:	4956      	ldr	r1, [pc, #344]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024d6:	4b51      	ldr	r3, [pc, #324]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	494d      	ldr	r1, [pc, #308]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d028      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024f8:	4b48      	ldr	r3, [pc, #288]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	4945      	ldr	r1, [pc, #276]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002516:	d106      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002518:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002522:	60d3      	str	r3, [r2, #12]
 8002524:	e011      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800252e:	d10c      	bne.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3304      	adds	r3, #4
 8002534:	2101      	movs	r1, #1
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f872 	bl	8002620 <RCCEx_PLLSAI1_Config>
 800253c:	4603      	mov	r3, r0
 800253e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002540:	7cfb      	ldrb	r3, [r7, #19]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002546:	7cfb      	ldrb	r3, [r7, #19]
 8002548:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d028      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002564:	492d      	ldr	r1, [pc, #180]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002570:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002574:	d106      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002576:	4b29      	ldr	r3, [pc, #164]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4a28      	ldr	r2, [pc, #160]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800257c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002580:	60d3      	str	r3, [r2, #12]
 8002582:	e011      	b.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3304      	adds	r3, #4
 8002592:	2101      	movs	r1, #1
 8002594:	4618      	mov	r0, r3
 8002596:	f000 f843 	bl	8002620 <RCCEx_PLLSAI1_Config>
 800259a:	4603      	mov	r3, r0
 800259c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800259e:	7cfb      	ldrb	r3, [r7, #19]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80025a4:	7cfb      	ldrb	r3, [r7, #19]
 80025a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01c      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025b4:	4b19      	ldr	r3, [pc, #100]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c2:	4916      	ldr	r1, [pc, #88]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025d2:	d10c      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3304      	adds	r3, #4
 80025d8:	2102      	movs	r1, #2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 f820 	bl	8002620 <RCCEx_PLLSAI1_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80025ea:	7cfb      	ldrb	r3, [r7, #19]
 80025ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80025fa:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002600:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002610:	7cbb      	ldrb	r3, [r7, #18]
}
 8002612:	4618      	mov	r0, r3
 8002614:	3718      	adds	r7, #24
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000

08002620 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800262e:	4b74      	ldr	r3, [pc, #464]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d018      	beq.n	800266c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800263a:	4b71      	ldr	r3, [pc, #452]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0203 	and.w	r2, r3, #3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d10d      	bne.n	8002666 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
       ||
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002652:	4b6b      	ldr	r3, [pc, #428]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	091b      	lsrs	r3, r3, #4
 8002658:	f003 0307 	and.w	r3, r3, #7
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
       ||
 8002662:	429a      	cmp	r2, r3
 8002664:	d047      	beq.n	80026f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	73fb      	strb	r3, [r7, #15]
 800266a:	e044      	b.n	80026f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b03      	cmp	r3, #3
 8002672:	d018      	beq.n	80026a6 <RCCEx_PLLSAI1_Config+0x86>
 8002674:	2b03      	cmp	r3, #3
 8002676:	d825      	bhi.n	80026c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002678:	2b01      	cmp	r3, #1
 800267a:	d002      	beq.n	8002682 <RCCEx_PLLSAI1_Config+0x62>
 800267c:	2b02      	cmp	r3, #2
 800267e:	d009      	beq.n	8002694 <RCCEx_PLLSAI1_Config+0x74>
 8002680:	e020      	b.n	80026c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002682:	4b5f      	ldr	r3, [pc, #380]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11d      	bne.n	80026ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002692:	e01a      	b.n	80026ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002694:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d116      	bne.n	80026ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026a4:	e013      	b.n	80026ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026a6:	4b56      	ldr	r3, [pc, #344]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10f      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026b2:	4b53      	ldr	r3, [pc, #332]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d109      	bne.n	80026d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80026c2:	e006      	b.n	80026d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
      break;
 80026c8:	e004      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ca:	bf00      	nop
 80026cc:	e002      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026ce:	bf00      	nop
 80026d0:	e000      	b.n	80026d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80026d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10d      	bne.n	80026f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80026da:	4b49      	ldr	r3, [pc, #292]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6819      	ldr	r1, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	430b      	orrs	r3, r1
 80026f0:	4943      	ldr	r1, [pc, #268]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d17c      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026fc:	4b40      	ldr	r3, [pc, #256]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a3f      	ldr	r2, [pc, #252]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002706:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002708:	f7fe fbce 	bl	8000ea8 <HAL_GetTick>
 800270c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800270e:	e009      	b.n	8002724 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002710:	f7fe fbca 	bl	8000ea8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d902      	bls.n	8002724 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	73fb      	strb	r3, [r7, #15]
        break;
 8002722:	e005      	b.n	8002730 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ef      	bne.n	8002710 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002730:	7bfb      	ldrb	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d15f      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d110      	bne.n	800275e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800273c:	4b30      	ldr	r3, [pc, #192]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002744:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6892      	ldr	r2, [r2, #8]
 800274c:	0211      	lsls	r1, r2, #8
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	06d2      	lsls	r2, r2, #27
 8002754:	430a      	orrs	r2, r1
 8002756:	492a      	ldr	r1, [pc, #168]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002758:	4313      	orrs	r3, r2
 800275a:	610b      	str	r3, [r1, #16]
 800275c:	e027      	b.n	80027ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d112      	bne.n	800278a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800276c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6892      	ldr	r2, [r2, #8]
 8002774:	0211      	lsls	r1, r2, #8
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6912      	ldr	r2, [r2, #16]
 800277a:	0852      	lsrs	r2, r2, #1
 800277c:	3a01      	subs	r2, #1
 800277e:	0552      	lsls	r2, r2, #21
 8002780:	430a      	orrs	r2, r1
 8002782:	491f      	ldr	r1, [pc, #124]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002784:	4313      	orrs	r3, r2
 8002786:	610b      	str	r3, [r1, #16]
 8002788:	e011      	b.n	80027ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002792:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	6892      	ldr	r2, [r2, #8]
 800279a:	0211      	lsls	r1, r2, #8
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6952      	ldr	r2, [r2, #20]
 80027a0:	0852      	lsrs	r2, r2, #1
 80027a2:	3a01      	subs	r2, #1
 80027a4:	0652      	lsls	r2, r2, #25
 80027a6:	430a      	orrs	r2, r1
 80027a8:	4915      	ldr	r1, [pc, #84]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a13      	ldr	r2, [pc, #76]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80027b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ba:	f7fe fb75 	bl	8000ea8 <HAL_GetTick>
 80027be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027c0:	e009      	b.n	80027d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027c2:	f7fe fb71 	bl	8000ea8 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d902      	bls.n	80027d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	73fb      	strb	r3, [r7, #15]
          break;
 80027d4:	e005      	b.n	80027e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80027d6:	4b0a      	ldr	r3, [pc, #40]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0ef      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80027e2:	7bfb      	ldrb	r3, [r7, #15]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027ea:	691a      	ldr	r2, [r3, #16]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	4903      	ldr	r1, [pc, #12]	; (8002800 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3710      	adds	r7, #16
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000

08002804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d101      	bne.n	8002816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e049      	b.n	80028aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe f9f4 	bl	8000c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3304      	adds	r3, #4
 8002840:	4619      	mov	r1, r3
 8002842:	4610      	mov	r0, r2
 8002844:	f000 fa00 	bl	8002c48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028c2:	b2db      	uxtb	r3, r3
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d001      	beq.n	80028cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e03b      	b.n	8002944 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68da      	ldr	r2, [r3, #12]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f042 0201 	orr.w	r2, r2, #1
 80028e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a19      	ldr	r2, [pc, #100]	; (8002950 <HAL_TIM_Base_Start_IT+0x9c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_TIM_Base_Start_IT+0x4e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f6:	d004      	beq.n	8002902 <HAL_TIM_Base_Start_IT+0x4e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_TIM_Base_Start_IT+0xa0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d115      	bne.n	800292e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	689a      	ldr	r2, [r3, #8]
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_TIM_Base_Start_IT+0xa4>)
 800290a:	4013      	ands	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2b06      	cmp	r3, #6
 8002912:	d015      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x8c>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800291a:	d011      	beq.n	8002940 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f042 0201 	orr.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800292c:	e008      	b.n	8002940 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f042 0201 	orr.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	e000      	b.n	8002942 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002940:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40014000 	.word	0x40014000
 8002958:	00010007 	.word	0x00010007

0800295c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6a1a      	ldr	r2, [r3, #32]
 800297a:	f241 1311 	movw	r3, #4369	; 0x1111
 800297e:	4013      	ands	r3, r2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d10f      	bne.n	80029a4 <HAL_TIM_Base_Stop_IT+0x48>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6a1a      	ldr	r2, [r3, #32]
 800298a:	f240 4344 	movw	r3, #1092	; 0x444
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <HAL_TIM_Base_Stop_IT+0x48>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d122      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d11b      	bne.n	8002a16 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f06f 0202 	mvn.w	r2, #2
 80029e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	f003 0303 	and.w	r3, r3, #3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 f905 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002a02:	e005      	b.n	8002a10 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f8f7 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f908 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d122      	bne.n	8002a6a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d11b      	bne.n	8002a6a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f06f 0204 	mvn.w	r2, #4
 8002a3a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f8db 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002a56:	e005      	b.n	8002a64 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f8cd 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8de 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f003 0308 	and.w	r3, r3, #8
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d122      	bne.n	8002abe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d11b      	bne.n	8002abe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f06f 0208 	mvn.w	r2, #8
 8002a8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2204      	movs	r2, #4
 8002a94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	69db      	ldr	r3, [r3, #28]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f8b1 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002aaa:	e005      	b.n	8002ab8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 f8a3 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8b4 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b10      	cmp	r3, #16
 8002aca:	d122      	bne.n	8002b12 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d11b      	bne.n	8002b12 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0210 	mvn.w	r2, #16
 8002ae2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2208      	movs	r2, #8
 8002ae8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	69db      	ldr	r3, [r3, #28]
 8002af0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f887 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 8002afe:	e005      	b.n	8002b0c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f879 	bl	8002bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f88a 	bl	8002c20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d10e      	bne.n	8002b3e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f06f 0201 	mvn.w	r2, #1
 8002b36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fd fd0f 	bl	800055c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b48:	2b80      	cmp	r3, #128	; 0x80
 8002b4a:	d10e      	bne.n	8002b6a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d107      	bne.n	8002b6a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 f943 	bl	8002df0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b78:	d10e      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b80      	cmp	r3, #128	; 0x80
 8002b86:	d107      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 f936 	bl	8002e04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f838 	bl	8002c34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0220 	mvn.w	r2, #32
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f8f6 	bl	8002ddc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <TIM_Base_SetConfig+0xbc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d003      	beq.n	8002c68 <TIM_Base_SetConfig+0x20>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c66:	d108      	bne.n	8002c7a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	68fa      	ldr	r2, [r7, #12]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <TIM_Base_SetConfig+0xbc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d00b      	beq.n	8002c9a <TIM_Base_SetConfig+0x52>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c88:	d007      	beq.n	8002c9a <TIM_Base_SetConfig+0x52>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <TIM_Base_SetConfig+0xc0>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d003      	beq.n	8002c9a <TIM_Base_SetConfig+0x52>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <TIM_Base_SetConfig+0xc4>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d108      	bne.n	8002cac <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ca0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a0c      	ldr	r2, [pc, #48]	; (8002d04 <TIM_Base_SetConfig+0xbc>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d007      	beq.n	8002ce8 <TIM_Base_SetConfig+0xa0>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0b      	ldr	r2, [pc, #44]	; (8002d08 <TIM_Base_SetConfig+0xc0>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d003      	beq.n	8002ce8 <TIM_Base_SetConfig+0xa0>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <TIM_Base_SetConfig+0xc4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d103      	bne.n	8002cf0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	615a      	str	r2, [r3, #20]
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40012c00 	.word	0x40012c00
 8002d08:	40014000 	.word	0x40014000
 8002d0c:	40014400 	.word	0x40014400

08002d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d101      	bne.n	8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d24:	2302      	movs	r3, #2
 8002d26:	e04f      	b.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a21      	ldr	r2, [pc, #132]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d108      	bne.n	8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002d58:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a14      	ldr	r2, [pc, #80]	; (8002dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d009      	beq.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d90:	d004      	beq.n	8002d9c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d10c      	bne.n	8002db6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002da2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	68ba      	ldr	r2, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68ba      	ldr	r2, [r7, #8]
 8002db4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3714      	adds	r7, #20
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr
 8002dd4:	40012c00 	.word	0x40012c00
 8002dd8:	40014000 	.word	0x40014000

08002ddc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e040      	b.n	8002eac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7fd ff42 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0201 	bic.w	r2, r2, #1
 8002e54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fbf2 	bl	8003640 <UART_SetConfig>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d101      	bne.n	8002e66 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e022      	b.n	8002eac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 fe12 	bl	8003a98 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fe99 	bl	8003bdc <UART_CheckIdleState>
 8002eaa:	4603      	mov	r3, r0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3708      	adds	r7, #8
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b08b      	sub	sp, #44	; 0x2c
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d156      	bne.n	8002f78 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d002      	beq.n	8002ed6 <HAL_UART_Transmit_IT+0x22>
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e04f      	b.n	8002f7a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_UART_Transmit_IT+0x34>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e048      	b.n	8002f7a <HAL_UART_Transmit_IT+0xc6>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2221      	movs	r2, #33	; 0x21
 8002f18:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f22:	d107      	bne.n	8002f34 <HAL_UART_Transmit_IT+0x80>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d103      	bne.n	8002f34 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a16      	ldr	r2, [pc, #88]	; (8002f88 <HAL_UART_Transmit_IT+0xd4>)
 8002f30:	669a      	str	r2, [r3, #104]	; 0x68
 8002f32:	e002      	b.n	8002f3a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4a15      	ldr	r2, [pc, #84]	; (8002f8c <HAL_UART_Transmit_IT+0xd8>)
 8002f38:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	e853 3f00 	ldrex	r3, [r3]
 8002f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f56:	627b      	str	r3, [r7, #36]	; 0x24
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f64:	69f9      	ldr	r1, [r7, #28]
 8002f66:	6a3a      	ldr	r2, [r7, #32]
 8002f68:	e841 2300 	strex	r3, r2, [r1]
 8002f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1e6      	bne.n	8002f42 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	372c      	adds	r7, #44	; 0x2c
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	08004137 	.word	0x08004137
 8002f8c:	0800407f 	.word	0x0800407f

08002f90 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa2:	2b20      	cmp	r3, #32
 8002fa4:	d142      	bne.n	800302c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d002      	beq.n	8002fb2 <HAL_UART_Receive_IT+0x22>
 8002fac:	88fb      	ldrh	r3, [r7, #6]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e03b      	b.n	800302e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d101      	bne.n	8002fc4 <HAL_UART_Receive_IT+0x34>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	e034      	b.n	800302e <HAL_UART_Receive_IT+0x9e>
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a18      	ldr	r2, [pc, #96]	; (8003038 <HAL_UART_Receive_IT+0xa8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d01f      	beq.n	800301c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d018      	beq.n	800301c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	461a      	mov	r2, r3
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	623b      	str	r3, [r7, #32]
 800300a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	69f9      	ldr	r1, [r7, #28]
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	61bb      	str	r3, [r7, #24]
   return(result);
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e6      	bne.n	8002fea <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800301c:	88fb      	ldrh	r3, [r7, #6]
 800301e:	461a      	mov	r2, r3
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fee8 	bl	8003df8 <UART_Start_Receive_IT>
 8003028:	4603      	mov	r3, r0
 800302a:	e000      	b.n	800302e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800302c:	2302      	movs	r3, #2
  }
}
 800302e:	4618      	mov	r0, r3
 8003030:	3728      	adds	r7, #40	; 0x28
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	40008000 	.word	0x40008000

0800303c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b0ba      	sub	sp, #232	; 0xe8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003062:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003066:	f640 030f 	movw	r3, #2063	; 0x80f
 800306a:	4013      	ands	r3, r2
 800306c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003070:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003074:	2b00      	cmp	r3, #0
 8003076:	d115      	bne.n	80030a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307c:	f003 0320 	and.w	r3, r3, #32
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00f      	beq.n	80030a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003088:	f003 0320 	and.w	r3, r3, #32
 800308c:	2b00      	cmp	r3, #0
 800308e:	d009      	beq.n	80030a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 82a6 	beq.w	80035e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
      }
      return;
 80030a2:	e2a0      	b.n	80035e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80030a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8117 	beq.w	80032dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d106      	bne.n	80030c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030be:	4b85      	ldr	r3, [pc, #532]	; (80032d4 <HAL_UART_IRQHandler+0x298>)
 80030c0:	4013      	ands	r3, r2
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 810a 	beq.w	80032dc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030cc:	f003 0301 	and.w	r3, r3, #1
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d011      	beq.n	80030f8 <HAL_UART_IRQHandler+0xbc>
 80030d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2201      	movs	r2, #1
 80030e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030ee:	f043 0201 	orr.w	r2, r3, #1
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d011      	beq.n	8003128 <HAL_UART_IRQHandler+0xec>
 8003104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2202      	movs	r2, #2
 8003116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800311e:	f043 0204 	orr.w	r2, r3, #4
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d011      	beq.n	8003158 <HAL_UART_IRQHandler+0x11c>
 8003134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b00      	cmp	r3, #0
 800313e:	d00b      	beq.n	8003158 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2204      	movs	r2, #4
 8003146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800314e:	f043 0202 	orr.w	r2, r3, #2
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d017      	beq.n	8003194 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003168:	f003 0320 	and.w	r3, r3, #32
 800316c:	2b00      	cmp	r3, #0
 800316e:	d105      	bne.n	800317c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003170:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003174:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00b      	beq.n	8003194 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318a:	f043 0208 	orr.w	r2, r3, #8
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319c:	2b00      	cmp	r3, #0
 800319e:	d012      	beq.n	80031c6 <HAL_UART_IRQHandler+0x18a>
 80031a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00c      	beq.n	80031c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031bc:	f043 0220 	orr.w	r2, r3, #32
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 820c 	beq.w	80035ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d6:	f003 0320 	and.w	r3, r3, #32
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00d      	beq.n	80031fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e2:	f003 0320 	and.w	r3, r3, #32
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003200:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800320e:	2b40      	cmp	r3, #64	; 0x40
 8003210:	d005      	beq.n	800321e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003212:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003216:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800321a:	2b00      	cmp	r3, #0
 800321c:	d04f      	beq.n	80032be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 feb4 	bl	8003f8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d141      	bne.n	80032b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3308      	adds	r3, #8
 8003238:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003240:	e853 3f00 	ldrex	r3, [r3]
 8003244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003248:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800324c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003250:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3308      	adds	r3, #8
 800325a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800325e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003262:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800326a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003276:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1d9      	bne.n	8003232 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	2b00      	cmp	r3, #0
 8003284:	d013      	beq.n	80032ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328a:	4a13      	ldr	r2, [pc, #76]	; (80032d8 <HAL_UART_IRQHandler+0x29c>)
 800328c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd ff87 	bl	80011a6 <HAL_DMA_Abort_IT>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d017      	beq.n	80032ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80032a8:	4610      	mov	r0, r2
 80032aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ac:	e00f      	b.n	80032ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 f9b0 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	e00b      	b.n	80032ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 f9ac 	bl	8003614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032bc:	e007      	b.n	80032ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f9a8 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032cc:	e18d      	b.n	80035ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ce:	bf00      	nop
    return;
 80032d0:	e18b      	b.n	80035ea <HAL_UART_IRQHandler+0x5ae>
 80032d2:	bf00      	nop
 80032d4:	04000120 	.word	0x04000120
 80032d8:	08004053 	.word	0x08004053

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	f040 8146 	bne.w	8003572 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 813f 	beq.w	8003572 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032f8:	f003 0310 	and.w	r3, r3, #16
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8138 	beq.w	8003572 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2210      	movs	r2, #16
 8003308:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003314:	2b40      	cmp	r3, #64	; 0x40
 8003316:	f040 80b4 	bne.w	8003482 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003326:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 815f 	beq.w	80035ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003336:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800333a:	429a      	cmp	r2, r3
 800333c:	f080 8157 	bcs.w	80035ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003346:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	f040 8085 	bne.w	8003466 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003368:	e853 3f00 	ldrex	r3, [r3]
 800336c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800338a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800338e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003392:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003396:	e841 2300 	strex	r3, r2, [r1]
 800339a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800339e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1da      	bne.n	800335c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	3308      	adds	r3, #8
 80033ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b8:	f023 0301 	bic.w	r3, r3, #1
 80033bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	3308      	adds	r3, #8
 80033c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e1      	bne.n	80033a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3308      	adds	r3, #8
 80033e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3308      	adds	r3, #8
 8003402:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003406:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003408:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800340c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e3      	bne.n	80033e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800342e:	e853 3f00 	ldrex	r3, [r3]
 8003432:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003434:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003436:	f023 0310 	bic.w	r3, r3, #16
 800343a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	461a      	mov	r2, r3
 8003444:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003448:	65bb      	str	r3, [r7, #88]	; 0x58
 800344a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800344e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e4      	bne.n	8003426 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4618      	mov	r0, r3
 8003462:	f7fd fe62 	bl	800112a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003472:	b29b      	uxth	r3, r3
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	b29b      	uxth	r3, r3
 8003478:	4619      	mov	r1, r3
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f8d4 	bl	8003628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003480:	e0b5      	b.n	80035ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800348e:	b29b      	uxth	r3, r3
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800349c:	b29b      	uxth	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a7 	beq.w	80035f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80034a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 80a2 	beq.w	80035f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b6:	e853 3f00 	ldrex	r3, [r3]
 80034ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	461a      	mov	r2, r3
 80034cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034d0:	647b      	str	r3, [r7, #68]	; 0x44
 80034d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e4      	bne.n	80034ae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	623b      	str	r3, [r7, #32]
   return(result);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3308      	adds	r3, #8
 8003504:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003508:	633a      	str	r2, [r7, #48]	; 0x30
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800350e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e3      	bne.n	80034e4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2220      	movs	r2, #32
 8003520:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	e853 3f00 	ldrex	r3, [r3]
 800353a:	60fb      	str	r3, [r7, #12]
   return(result);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0310 	bic.w	r3, r3, #16
 8003542:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003550:	61fb      	str	r3, [r7, #28]
 8003552:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003554:	69b9      	ldr	r1, [r7, #24]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	e841 2300 	strex	r3, r2, [r1]
 800355c:	617b      	str	r3, [r7, #20]
   return(result);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1e4      	bne.n	800352e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003568:	4619      	mov	r1, r3
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f85c 	bl	8003628 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003570:	e03f      	b.n	80035f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00e      	beq.n	800359c <HAL_UART_IRQHandler+0x560>
 800357e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d008      	beq.n	800359c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003592:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 ffb8 	bl	800450a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800359a:	e02d      	b.n	80035f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800359c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00e      	beq.n	80035c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01c      	beq.n	80035f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	4798      	blx	r3
    }
    return;
 80035c4:	e017      	b.n	80035f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d012      	beq.n	80035f8 <HAL_UART_IRQHandler+0x5bc>
 80035d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00c      	beq.n	80035f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 fe09 	bl	80041f6 <UART_EndTransmit_IT>
    return;
 80035e4:	e008      	b.n	80035f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035e6:	bf00      	nop
 80035e8:	e006      	b.n	80035f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80035ea:	bf00      	nop
 80035ec:	e004      	b.n	80035f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80035f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035f8:	37e8      	adds	r7, #232	; 0xe8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop

08003600 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003644:	b08a      	sub	sp, #40	; 0x28
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800364a:	2300      	movs	r3, #0
 800364c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4313      	orrs	r3, r2
 8003666:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4bb4      	ldr	r3, [pc, #720]	; (8003940 <UART_SetConfig+0x300>)
 8003670:	4013      	ands	r3, r2
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003678:	430b      	orrs	r3, r1
 800367a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4aa9      	ldr	r2, [pc, #676]	; (8003944 <UART_SetConfig+0x304>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a8:	4313      	orrs	r3, r2
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4aa0      	ldr	r2, [pc, #640]	; (8003948 <UART_SetConfig+0x308>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d126      	bne.n	8003718 <UART_SetConfig+0xd8>
 80036ca:	4ba0      	ldr	r3, [pc, #640]	; (800394c <UART_SetConfig+0x30c>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d81b      	bhi.n	8003710 <UART_SetConfig+0xd0>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0xa0>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	08003701 	.word	0x08003701
 80036e8:	080036f9 	.word	0x080036f9
 80036ec:	08003709 	.word	0x08003709
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e080      	b.n	80037fa <UART_SetConfig+0x1ba>
 80036f8:	2302      	movs	r3, #2
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e07c      	b.n	80037fa <UART_SetConfig+0x1ba>
 8003700:	2304      	movs	r3, #4
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e078      	b.n	80037fa <UART_SetConfig+0x1ba>
 8003708:	2308      	movs	r3, #8
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e074      	b.n	80037fa <UART_SetConfig+0x1ba>
 8003710:	2310      	movs	r3, #16
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e070      	b.n	80037fa <UART_SetConfig+0x1ba>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a8c      	ldr	r2, [pc, #560]	; (8003950 <UART_SetConfig+0x310>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d138      	bne.n	8003794 <UART_SetConfig+0x154>
 8003722:	4b8a      	ldr	r3, [pc, #552]	; (800394c <UART_SetConfig+0x30c>)
 8003724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b0c      	cmp	r3, #12
 800372e:	d82d      	bhi.n	800378c <UART_SetConfig+0x14c>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <UART_SetConfig+0xf8>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	0800376d 	.word	0x0800376d
 800373c:	0800378d 	.word	0x0800378d
 8003740:	0800378d 	.word	0x0800378d
 8003744:	0800378d 	.word	0x0800378d
 8003748:	0800377d 	.word	0x0800377d
 800374c:	0800378d 	.word	0x0800378d
 8003750:	0800378d 	.word	0x0800378d
 8003754:	0800378d 	.word	0x0800378d
 8003758:	08003775 	.word	0x08003775
 800375c:	0800378d 	.word	0x0800378d
 8003760:	0800378d 	.word	0x0800378d
 8003764:	0800378d 	.word	0x0800378d
 8003768:	08003785 	.word	0x08003785
 800376c:	2300      	movs	r3, #0
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003772:	e042      	b.n	80037fa <UART_SetConfig+0x1ba>
 8003774:	2302      	movs	r3, #2
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377a:	e03e      	b.n	80037fa <UART_SetConfig+0x1ba>
 800377c:	2304      	movs	r3, #4
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e03a      	b.n	80037fa <UART_SetConfig+0x1ba>
 8003784:	2308      	movs	r3, #8
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e036      	b.n	80037fa <UART_SetConfig+0x1ba>
 800378c:	2310      	movs	r3, #16
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003792:	e032      	b.n	80037fa <UART_SetConfig+0x1ba>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a6a      	ldr	r2, [pc, #424]	; (8003944 <UART_SetConfig+0x304>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d12a      	bne.n	80037f4 <UART_SetConfig+0x1b4>
 800379e:	4b6b      	ldr	r3, [pc, #428]	; (800394c <UART_SetConfig+0x30c>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ac:	d01a      	beq.n	80037e4 <UART_SetConfig+0x1a4>
 80037ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037b2:	d81b      	bhi.n	80037ec <UART_SetConfig+0x1ac>
 80037b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037b8:	d00c      	beq.n	80037d4 <UART_SetConfig+0x194>
 80037ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037be:	d815      	bhi.n	80037ec <UART_SetConfig+0x1ac>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <UART_SetConfig+0x18c>
 80037c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037c8:	d008      	beq.n	80037dc <UART_SetConfig+0x19c>
 80037ca:	e00f      	b.n	80037ec <UART_SetConfig+0x1ac>
 80037cc:	2300      	movs	r3, #0
 80037ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d2:	e012      	b.n	80037fa <UART_SetConfig+0x1ba>
 80037d4:	2302      	movs	r3, #2
 80037d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037da:	e00e      	b.n	80037fa <UART_SetConfig+0x1ba>
 80037dc:	2304      	movs	r3, #4
 80037de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e2:	e00a      	b.n	80037fa <UART_SetConfig+0x1ba>
 80037e4:	2308      	movs	r3, #8
 80037e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ea:	e006      	b.n	80037fa <UART_SetConfig+0x1ba>
 80037ec:	2310      	movs	r3, #16
 80037ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f2:	e002      	b.n	80037fa <UART_SetConfig+0x1ba>
 80037f4:	2310      	movs	r3, #16
 80037f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a51      	ldr	r2, [pc, #324]	; (8003944 <UART_SetConfig+0x304>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d17a      	bne.n	80038fa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003804:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003808:	2b08      	cmp	r3, #8
 800380a:	d824      	bhi.n	8003856 <UART_SetConfig+0x216>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0x1d4>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003839 	.word	0x08003839
 8003818:	08003857 	.word	0x08003857
 800381c:	08003841 	.word	0x08003841
 8003820:	08003857 	.word	0x08003857
 8003824:	08003847 	.word	0x08003847
 8003828:	08003857 	.word	0x08003857
 800382c:	08003857 	.word	0x08003857
 8003830:	08003857 	.word	0x08003857
 8003834:	0800384f 	.word	0x0800384f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003838:	f7fe fc70 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 800383c:	61f8      	str	r0, [r7, #28]
        break;
 800383e:	e010      	b.n	8003862 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003840:	4b44      	ldr	r3, [pc, #272]	; (8003954 <UART_SetConfig+0x314>)
 8003842:	61fb      	str	r3, [r7, #28]
        break;
 8003844:	e00d      	b.n	8003862 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003846:	f7fe fbd1 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 800384a:	61f8      	str	r0, [r7, #28]
        break;
 800384c:	e009      	b.n	8003862 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800384e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003852:	61fb      	str	r3, [r7, #28]
        break;
 8003854:	e005      	b.n	8003862 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003860:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8107 	beq.w	8003a78 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	429a      	cmp	r2, r3
 8003878:	d305      	bcc.n	8003886 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	429a      	cmp	r2, r3
 8003884:	d903      	bls.n	800388e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800388c:	e0f4      	b.n	8003a78 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2200      	movs	r2, #0
 8003892:	461c      	mov	r4, r3
 8003894:	4615      	mov	r5, r2
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	f04f 0300 	mov.w	r3, #0
 800389e:	022b      	lsls	r3, r5, #8
 80038a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038a4:	0222      	lsls	r2, r4, #8
 80038a6:	68f9      	ldr	r1, [r7, #12]
 80038a8:	6849      	ldr	r1, [r1, #4]
 80038aa:	0849      	lsrs	r1, r1, #1
 80038ac:	2000      	movs	r0, #0
 80038ae:	4688      	mov	r8, r1
 80038b0:	4681      	mov	r9, r0
 80038b2:	eb12 0a08 	adds.w	sl, r2, r8
 80038b6:	eb43 0b09 	adc.w	fp, r3, r9
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	603b      	str	r3, [r7, #0]
 80038c2:	607a      	str	r2, [r7, #4]
 80038c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038c8:	4650      	mov	r0, sl
 80038ca:	4659      	mov	r1, fp
 80038cc:	f7fc fc7e 	bl	80001cc <__aeabi_uldivmod>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4613      	mov	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038de:	d308      	bcc.n	80038f2 <UART_SetConfig+0x2b2>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e6:	d204      	bcs.n	80038f2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69ba      	ldr	r2, [r7, #24]
 80038ee:	60da      	str	r2, [r3, #12]
 80038f0:	e0c2      	b.n	8003a78 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038f8:	e0be      	b.n	8003a78 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003902:	d16a      	bne.n	80039da <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003908:	2b08      	cmp	r3, #8
 800390a:	d834      	bhi.n	8003976 <UART_SetConfig+0x336>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <UART_SetConfig+0x2d4>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003939 	.word	0x08003939
 8003918:	08003959 	.word	0x08003959
 800391c:	08003961 	.word	0x08003961
 8003920:	08003977 	.word	0x08003977
 8003924:	08003967 	.word	0x08003967
 8003928:	08003977 	.word	0x08003977
 800392c:	08003977 	.word	0x08003977
 8003930:	08003977 	.word	0x08003977
 8003934:	0800396f 	.word	0x0800396f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7fe fbf0 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 800393c:	61f8      	str	r0, [r7, #28]
        break;
 800393e:	e020      	b.n	8003982 <UART_SetConfig+0x342>
 8003940:	efff69f3 	.word	0xefff69f3
 8003944:	40008000 	.word	0x40008000
 8003948:	40013800 	.word	0x40013800
 800394c:	40021000 	.word	0x40021000
 8003950:	40004400 	.word	0x40004400
 8003954:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7fe fbf6 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 800395c:	61f8      	str	r0, [r7, #28]
        break;
 800395e:	e010      	b.n	8003982 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003960:	4b4c      	ldr	r3, [pc, #304]	; (8003a94 <UART_SetConfig+0x454>)
 8003962:	61fb      	str	r3, [r7, #28]
        break;
 8003964:	e00d      	b.n	8003982 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003966:	f7fe fb41 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 800396a:	61f8      	str	r0, [r7, #28]
        break;
 800396c:	e009      	b.n	8003982 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800396e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003972:	61fb      	str	r3, [r7, #28]
        break;
 8003974:	e005      	b.n	8003982 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003976:	2300      	movs	r3, #0
 8003978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003980:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d077      	beq.n	8003a78 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	005a      	lsls	r2, r3, #1
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	441a      	add	r2, r3
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	fbb2 f3f3 	udiv	r3, r2, r3
 800399c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	2b0f      	cmp	r3, #15
 80039a2:	d916      	bls.n	80039d2 <UART_SetConfig+0x392>
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039aa:	d212      	bcs.n	80039d2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f023 030f 	bic.w	r3, r3, #15
 80039b4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	f003 0307 	and.w	r3, r3, #7
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	8afb      	ldrh	r3, [r7, #22]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	8afa      	ldrh	r2, [r7, #22]
 80039ce:	60da      	str	r2, [r3, #12]
 80039d0:	e052      	b.n	8003a78 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039d8:	e04e      	b.n	8003a78 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d827      	bhi.n	8003a32 <UART_SetConfig+0x3f2>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0x3a8>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a33 	.word	0x08003a33
 80039f8:	08003a23 	.word	0x08003a23
 80039fc:	08003a33 	.word	0x08003a33
 8003a00:	08003a33 	.word	0x08003a33
 8003a04:	08003a33 	.word	0x08003a33
 8003a08:	08003a2b 	.word	0x08003a2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe fb86 	bl	800211c <HAL_RCC_GetPCLK1Freq>
 8003a10:	61f8      	str	r0, [r7, #28]
        break;
 8003a12:	e014      	b.n	8003a3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a14:	f7fe fb98 	bl	8002148 <HAL_RCC_GetPCLK2Freq>
 8003a18:	61f8      	str	r0, [r7, #28]
        break;
 8003a1a:	e010      	b.n	8003a3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <UART_SetConfig+0x454>)
 8003a1e:	61fb      	str	r3, [r7, #28]
        break;
 8003a20:	e00d      	b.n	8003a3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a22:	f7fe fae3 	bl	8001fec <HAL_RCC_GetSysClockFreq>
 8003a26:	61f8      	str	r0, [r7, #28]
        break;
 8003a28:	e009      	b.n	8003a3e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a2e:	61fb      	str	r3, [r7, #28]
        break;
 8003a30:	e005      	b.n	8003a3e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003a32:	2300      	movs	r3, #0
 8003a34:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a3c:	bf00      	nop
    }

    if (pclk != 0U)
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d019      	beq.n	8003a78 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	085a      	lsrs	r2, r3, #1
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	441a      	add	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a56:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	2b0f      	cmp	r3, #15
 8003a5c:	d909      	bls.n	8003a72 <UART_SetConfig+0x432>
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a64:	d205      	bcs.n	8003a72 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
 8003a70:	e002      	b.n	8003a78 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003a84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3728      	adds	r7, #40	; 0x28
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a92:	bf00      	nop
 8003a94:	00f42400 	.word	0x00f42400

08003a98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d00a      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	f003 0302 	and.w	r3, r3, #2
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00a      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00a      	beq.n	8003b06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00a      	beq.n	8003b28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	f003 0310 	and.w	r3, r3, #16
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00a      	beq.n	8003b4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00a      	beq.n	8003b6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01a      	beq.n	8003bae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b96:	d10a      	bne.n	8003bae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00a      	beq.n	8003bd0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	430a      	orrs	r2, r1
 8003bce:	605a      	str	r2, [r3, #4]
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003bec:	f7fd f95c 	bl	8000ea8 <HAL_GetTick>
 8003bf0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0308 	and.w	r3, r3, #8
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d10e      	bne.n	8003c1e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c00:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f82d 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e023      	b.n	8003c66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d10e      	bne.n	8003c4a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f817 	bl	8003c6e <UART_WaitOnFlagUntilTimeout>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e00d      	b.n	8003c66 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2220      	movs	r2, #32
 8003c4e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2220      	movs	r2, #32
 8003c54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b09c      	sub	sp, #112	; 0x70
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	60f8      	str	r0, [r7, #12]
 8003c76:	60b9      	str	r1, [r7, #8]
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c7e:	e0a5      	b.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c86:	f000 80a1 	beq.w	8003dcc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7fd f90d 	bl	8000ea8 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003c9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d13e      	bne.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cb0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cb4:	667b      	str	r3, [r7, #100]	; 0x64
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	461a      	mov	r2, r3
 8003cbc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cc0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cc4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d1e6      	bne.n	8003ca0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	3308      	adds	r3, #8
 8003cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cdc:	e853 3f00 	ldrex	r3, [r3]
 8003ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	663b      	str	r3, [r7, #96]	; 0x60
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3308      	adds	r3, #8
 8003cf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003cf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003cf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfa:	e841 2300 	strex	r3, r2, [r1]
 8003cfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d1e5      	bne.n	8003cd2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e067      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d04f      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d3a:	d147      	bne.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d44:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4e:	e853 3f00 	ldrex	r3, [r3]
 8003d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	461a      	mov	r2, r3
 8003d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d64:	637b      	str	r3, [r7, #52]	; 0x34
 8003d66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d6c:	e841 2300 	strex	r3, r2, [r1]
 8003d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e6      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	3308      	adds	r3, #8
 8003d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	e853 3f00 	ldrex	r3, [r3]
 8003d86:	613b      	str	r3, [r7, #16]
   return(result);
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d98:	623a      	str	r2, [r7, #32]
 8003d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9c:	69f9      	ldr	r1, [r7, #28]
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	e841 2300 	strex	r3, r2, [r1]
 8003da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1e5      	bne.n	8003d78 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e010      	b.n	8003dee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	bf0c      	ite	eq
 8003ddc:	2301      	moveq	r3, #1
 8003dde:	2300      	movne	r3, #0
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	79fb      	ldrb	r3, [r7, #7]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	f43f af4a 	beq.w	8003c80 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3770      	adds	r7, #112	; 0x70
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b097      	sub	sp, #92	; 0x5c
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	4613      	mov	r3, r2
 8003e04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68ba      	ldr	r2, [r7, #8]
 8003e0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	88fa      	ldrh	r2, [r7, #6]
 8003e10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	88fa      	ldrh	r2, [r7, #6]
 8003e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e2a:	d10e      	bne.n	8003e4a <UART_Start_Receive_IT+0x52>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d105      	bne.n	8003e40 <UART_Start_Receive_IT+0x48>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e3e:	e02d      	b.n	8003e9c <UART_Start_Receive_IT+0xa4>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	22ff      	movs	r2, #255	; 0xff
 8003e44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e48:	e028      	b.n	8003e9c <UART_Start_Receive_IT+0xa4>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10d      	bne.n	8003e6e <UART_Start_Receive_IT+0x76>
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d104      	bne.n	8003e64 <UART_Start_Receive_IT+0x6c>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	22ff      	movs	r2, #255	; 0xff
 8003e5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e62:	e01b      	b.n	8003e9c <UART_Start_Receive_IT+0xa4>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	227f      	movs	r2, #127	; 0x7f
 8003e68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e6c:	e016      	b.n	8003e9c <UART_Start_Receive_IT+0xa4>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e76:	d10d      	bne.n	8003e94 <UART_Start_Receive_IT+0x9c>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d104      	bne.n	8003e8a <UART_Start_Receive_IT+0x92>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	227f      	movs	r2, #127	; 0x7f
 8003e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e88:	e008      	b.n	8003e9c <UART_Start_Receive_IT+0xa4>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	223f      	movs	r2, #63	; 0x3f
 8003e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e92:	e003      	b.n	8003e9c <UART_Start_Receive_IT+0xa4>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2222      	movs	r2, #34	; 0x22
 8003ea8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	3308      	adds	r3, #8
 8003eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3308      	adds	r3, #8
 8003ec8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003eca:	64ba      	str	r2, [r7, #72]	; 0x48
 8003ecc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ed0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e5      	bne.n	8003eaa <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee6:	d107      	bne.n	8003ef8 <UART_Start_Receive_IT+0x100>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d103      	bne.n	8003ef8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a24      	ldr	r2, [pc, #144]	; (8003f84 <UART_Start_Receive_IT+0x18c>)
 8003ef4:	665a      	str	r2, [r3, #100]	; 0x64
 8003ef6:	e002      	b.n	8003efe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <UART_Start_Receive_IT+0x190>)
 8003efc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d019      	beq.n	8003f42 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f1e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e6      	bne.n	8003f0e <UART_Start_Receive_IT+0x116>
 8003f40:	e018      	b.n	8003f74 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f043 0320 	orr.w	r3, r3, #32
 8003f56:	653b      	str	r3, [r7, #80]	; 0x50
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f60:	623b      	str	r3, [r7, #32]
 8003f62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	69f9      	ldr	r1, [r7, #28]
 8003f66:	6a3a      	ldr	r2, [r7, #32]
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e6      	bne.n	8003f42 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	375c      	adds	r7, #92	; 0x5c
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	080043ab 	.word	0x080043ab
 8003f88:	0800424b 	.word	0x0800424b

08003f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b095      	sub	sp, #84	; 0x54
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fa4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fa8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fb2:	643b      	str	r3, [r7, #64]	; 0x40
 8003fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e6      	bne.n	8003f94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3308      	adds	r3, #8
 8003fcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e5      	bne.n	8003fc6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d118      	bne.n	8004034 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f023 0310 	bic.w	r3, r3, #16
 8004016:	647b      	str	r3, [r7, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004020:	61bb      	str	r3, [r7, #24]
 8004022:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6979      	ldr	r1, [r7, #20]
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	613b      	str	r3, [r7, #16]
   return(result);
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004046:	bf00      	nop
 8004048:	3754      	adds	r7, #84	; 0x54
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr

08004052 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b084      	sub	sp, #16
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff facf 	bl	8003614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004076:	bf00      	nop
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800407e:	b480      	push	{r7}
 8004080:	b08f      	sub	sp, #60	; 0x3c
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408a:	2b21      	cmp	r3, #33	; 0x21
 800408c:	d14d      	bne.n	800412a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d132      	bne.n	8004100 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	e853 3f00 	ldrex	r3, [r3]
 80040a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040ae:	637b      	str	r3, [r7, #52]	; 0x34
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	461a      	mov	r2, r3
 80040b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040ba:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e6      	bne.n	800409a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	e853 3f00 	ldrex	r3, [r3]
 80040d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040e0:	633b      	str	r3, [r7, #48]	; 0x30
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ea:	61bb      	str	r3, [r7, #24]
 80040ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ee:	6979      	ldr	r1, [r7, #20]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	e841 2300 	strex	r3, r2, [r1]
 80040f6:	613b      	str	r3, [r7, #16]
   return(result);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1e6      	bne.n	80040cc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80040fe:	e014      	b.n	800412a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004104:	781a      	ldrb	r2, [r3, #0]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	b292      	uxth	r2, r2
 800410c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800412a:	bf00      	nop
 800412c:	373c      	adds	r7, #60	; 0x3c
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004136:	b480      	push	{r7}
 8004138:	b091      	sub	sp, #68	; 0x44
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004142:	2b21      	cmp	r3, #33	; 0x21
 8004144:	d151      	bne.n	80041ea <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d132      	bne.n	80041b8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	623b      	str	r3, [r7, #32]
   return(result);
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	461a      	mov	r2, r3
 800416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004170:	633b      	str	r3, [r7, #48]	; 0x30
 8004172:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800417e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e6      	bne.n	8004152 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	e853 3f00 	ldrex	r3, [r3]
 8004190:	60fb      	str	r3, [r7, #12]
   return(result);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004198:	637b      	str	r3, [r7, #52]	; 0x34
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	61fb      	str	r3, [r7, #28]
 80041a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a6:	69b9      	ldr	r1, [r7, #24]
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	617b      	str	r3, [r7, #20]
   return(result);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1e6      	bne.n	8004184 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041b6:	e018      	b.n	80041ea <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041bc:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c0:	881a      	ldrh	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041ca:	b292      	uxth	r2, r2
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	1c9a      	adds	r2, r3, #2
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041ea:	bf00      	nop
 80041ec:	3744      	adds	r7, #68	; 0x44
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b088      	sub	sp, #32
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	60bb      	str	r3, [r7, #8]
   return(result);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	6979      	ldr	r1, [r7, #20]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	613b      	str	r3, [r7, #16]
   return(result);
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e6      	bne.n	80041fe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff f9df 	bl	8003600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004242:	bf00      	nop
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}

0800424a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	b096      	sub	sp, #88	; 0x58
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004258:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004260:	2b22      	cmp	r3, #34	; 0x22
 8004262:	f040 8094 	bne.w	800438e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800426c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004270:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004274:	b2d9      	uxtb	r1, r3
 8004276:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800427a:	b2da      	uxtb	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004280:	400a      	ands	r2, r1
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004296:	b29b      	uxth	r3, r3
 8004298:	3b01      	subs	r3, #1
 800429a:	b29a      	uxth	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d179      	bne.n	80043a2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b6:	e853 3f00 	ldrex	r3, [r3]
 80042ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042c2:	653b      	str	r3, [r7, #80]	; 0x50
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	461a      	mov	r2, r3
 80042ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
 80042ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d4:	e841 2300 	strex	r3, r2, [r1]
 80042d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d1e6      	bne.n	80042ae <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	3308      	adds	r3, #8
 80042e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	623b      	str	r3, [r7, #32]
   return(result);
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f023 0301 	bic.w	r3, r3, #1
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3308      	adds	r3, #8
 80042fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004300:	633a      	str	r2, [r7, #48]	; 0x30
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800430e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2220      	movs	r2, #32
 8004318:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004324:	2b01      	cmp	r3, #1
 8004326:	d12e      	bne.n	8004386 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60fb      	str	r3, [r7, #12]
   return(result);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0310 	bic.w	r3, r3, #16
 8004342:	64bb      	str	r3, [r7, #72]	; 0x48
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	69b9      	ldr	r1, [r7, #24]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	617b      	str	r3, [r7, #20]
   return(result);
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69db      	ldr	r3, [r3, #28]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b10      	cmp	r3, #16
 800436c:	d103      	bne.n	8004376 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2210      	movs	r2, #16
 8004374:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800437c:	4619      	mov	r1, r3
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7ff f952 	bl	8003628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004384:	e00d      	b.n	80043a2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fc f8a2 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 800438c:	e009      	b.n	80043a2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	8b1b      	ldrh	r3, [r3, #24]
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f042 0208 	orr.w	r2, r2, #8
 800439e:	b292      	uxth	r2, r2
 80043a0:	831a      	strh	r2, [r3, #24]
}
 80043a2:	bf00      	nop
 80043a4:	3758      	adds	r7, #88	; 0x58
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}

080043aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b096      	sub	sp, #88	; 0x58
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80043b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043c0:	2b22      	cmp	r3, #34	; 0x22
 80043c2:	f040 8094 	bne.w	80044ee <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80043cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80043d6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80043da:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80043de:	4013      	ands	r3, r2
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ea:	1c9a      	adds	r2, r3, #2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	3b01      	subs	r3, #1
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	d179      	bne.n	8004502 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	e853 3f00 	ldrex	r3, [r3]
 800441a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004422:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	461a      	mov	r2, r3
 800442a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800442c:	643b      	str	r3, [r7, #64]	; 0x40
 800442e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004430:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004432:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004434:	e841 2300 	strex	r3, r2, [r1]
 8004438:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	2b00      	cmp	r3, #0
 800443e:	d1e6      	bne.n	800440e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	3308      	adds	r3, #8
 8004446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	e853 3f00 	ldrex	r3, [r3]
 800444e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	f023 0301 	bic.w	r3, r3, #1
 8004456:	64bb      	str	r3, [r7, #72]	; 0x48
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	3308      	adds	r3, #8
 800445e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004460:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004464:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004468:	e841 2300 	strex	r3, r2, [r1]
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1e5      	bne.n	8004440 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004484:	2b01      	cmp	r3, #1
 8004486:	d12e      	bne.n	80044e6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	e853 3f00 	ldrex	r3, [r3]
 800449a:	60bb      	str	r3, [r7, #8]
   return(result);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	f023 0310 	bic.w	r3, r3, #16
 80044a2:	647b      	str	r3, [r7, #68]	; 0x44
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	461a      	mov	r2, r3
 80044aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b0:	6979      	ldr	r1, [r7, #20]
 80044b2:	69ba      	ldr	r2, [r7, #24]
 80044b4:	e841 2300 	strex	r3, r2, [r1]
 80044b8:	613b      	str	r3, [r7, #16]
   return(result);
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e6      	bne.n	800448e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	2b10      	cmp	r3, #16
 80044cc:	d103      	bne.n	80044d6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2210      	movs	r2, #16
 80044d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044dc:	4619      	mov	r1, r3
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7ff f8a2 	bl	8003628 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80044e4:	e00d      	b.n	8004502 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7fb fff2 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 80044ec:	e009      	b.n	8004502 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	8b1b      	ldrh	r3, [r3, #24]
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0208 	orr.w	r2, r2, #8
 80044fe:	b292      	uxth	r2, r2
 8004500:	831a      	strh	r2, [r3, #24]
}
 8004502:	bf00      	nop
 8004504:	3758      	adds	r7, #88	; 0x58
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <__libc_init_array>:
 8004520:	b570      	push	{r4, r5, r6, lr}
 8004522:	4d0d      	ldr	r5, [pc, #52]	; (8004558 <__libc_init_array+0x38>)
 8004524:	4c0d      	ldr	r4, [pc, #52]	; (800455c <__libc_init_array+0x3c>)
 8004526:	1b64      	subs	r4, r4, r5
 8004528:	10a4      	asrs	r4, r4, #2
 800452a:	2600      	movs	r6, #0
 800452c:	42a6      	cmp	r6, r4
 800452e:	d109      	bne.n	8004544 <__libc_init_array+0x24>
 8004530:	4d0b      	ldr	r5, [pc, #44]	; (8004560 <__libc_init_array+0x40>)
 8004532:	4c0c      	ldr	r4, [pc, #48]	; (8004564 <__libc_init_array+0x44>)
 8004534:	f000 f820 	bl	8004578 <_init>
 8004538:	1b64      	subs	r4, r4, r5
 800453a:	10a4      	asrs	r4, r4, #2
 800453c:	2600      	movs	r6, #0
 800453e:	42a6      	cmp	r6, r4
 8004540:	d105      	bne.n	800454e <__libc_init_array+0x2e>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	f855 3b04 	ldr.w	r3, [r5], #4
 8004548:	4798      	blx	r3
 800454a:	3601      	adds	r6, #1
 800454c:	e7ee      	b.n	800452c <__libc_init_array+0xc>
 800454e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004552:	4798      	blx	r3
 8004554:	3601      	adds	r6, #1
 8004556:	e7f2      	b.n	800453e <__libc_init_array+0x1e>
 8004558:	080045e0 	.word	0x080045e0
 800455c:	080045e0 	.word	0x080045e0
 8004560:	080045e0 	.word	0x080045e0
 8004564:	080045e4 	.word	0x080045e4

08004568 <memset>:
 8004568:	4402      	add	r2, r0
 800456a:	4603      	mov	r3, r0
 800456c:	4293      	cmp	r3, r2
 800456e:	d100      	bne.n	8004572 <memset+0xa>
 8004570:	4770      	bx	lr
 8004572:	f803 1b01 	strb.w	r1, [r3], #1
 8004576:	e7f9      	b.n	800456c <memset+0x4>

08004578 <_init>:
 8004578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457a:	bf00      	nop
 800457c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457e:	bc08      	pop	{r3}
 8004580:	469e      	mov	lr, r3
 8004582:	4770      	bx	lr

08004584 <_fini>:
 8004584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004586:	bf00      	nop
 8004588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458a:	bc08      	pop	{r3}
 800458c:	469e      	mov	lr, r3
 800458e:	4770      	bx	lr
