
MKS42DwithSTM32L432KCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ad8  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003c64  08003c64  00013c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cac  08003cac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cac  08003cac  00013cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cb4  08003cb4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cb4  08003cb4  00013cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cb8  08003cb8  00013cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003cbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  2000000c  08003cc8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08003cc8  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c59e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dfc  00000000  00000000  0002c5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009d0  00000000  00000000  0002e3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002eda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f759  00000000  00000000  0002f6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d877  00000000  00000000  0004ee09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bd309  00000000  00000000  0005c680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119989  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002698  00000000  00000000  001199dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003c4c 	.word	0x08003c4c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003c4c 	.word	0x08003c4c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <MX_GPIO_Init+0x2c>)
 80004d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <MX_GPIO_Init+0x2c>)
 80004dc:	f043 0301 	orr.w	r3, r3, #1
 80004e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <MX_GPIO_Init+0x2c>)
 80004e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	40021000 	.word	0x40021000

08000500 <CRC_calc>:
int32_t read_rotation = 0;
float angle = 0;
int16_t read_error = 0;
float angle_err = 0;

uint8_t CRC_calc(uint8_t length){
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	uint8_t sum = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length; i++){
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	e009      	b.n	8000528 <CRC_calc+0x28>
		sum += transmit[i];
 8000514:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <CRC_calc+0x40>)
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	4413      	add	r3, r2
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	7bfb      	ldrb	r3, [r7, #15]
 800051e:	4413      	add	r3, r2
 8000520:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length; i++){
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	3301      	adds	r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	68ba      	ldr	r2, [r7, #8]
 800052c:	429a      	cmp	r2, r3
 800052e:	dbf1      	blt.n	8000514 <CRC_calc+0x14>
	}
	return sum;
 8000530:	7bfb      	ldrb	r3, [r7, #15]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	2000002c 	.word	0x2000002c

08000544 <MKS_read_param>:

void MKS_read_param(uint8_t param, uint8_t length_of_param){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	460a      	mov	r2, r1
 800054e:	71fb      	strb	r3, [r7, #7]
 8000550:	4613      	mov	r3, r2
 8000552:	71bb      	strb	r3, [r7, #6]
	transmit[0] = Address;
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <MKS_read_param+0x54>)
 8000556:	22e0      	movs	r2, #224	; 0xe0
 8000558:	701a      	strb	r2, [r3, #0]
	transmit[1] = param;
 800055a:	4a0f      	ldr	r2, [pc, #60]	; (8000598 <MKS_read_param+0x54>)
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	7053      	strb	r3, [r2, #1]
	transmit[2] = CRC_calc(2);
 8000560:	2002      	movs	r0, #2
 8000562:	f7ff ffcd 	bl	8000500 <CRC_calc>
 8000566:	4603      	mov	r3, r0
 8000568:	461a      	mov	r2, r3
 800056a:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <MKS_read_param+0x54>)
 800056c:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, transmit, 3, 10);
 800056e:	230a      	movs	r3, #10
 8000570:	2203      	movs	r2, #3
 8000572:	4909      	ldr	r1, [pc, #36]	; (8000598 <MKS_read_param+0x54>)
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <MKS_read_param+0x58>)
 8000576:	f002 f893 	bl	80026a0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, receive, length_of_param);
 800057a:	79bb      	ldrb	r3, [r7, #6]
 800057c:	b29b      	uxth	r3, r3
 800057e:	461a      	mov	r2, r3
 8000580:	4907      	ldr	r1, [pc, #28]	; (80005a0 <MKS_read_param+0x5c>)
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <MKS_read_param+0x58>)
 8000584:	f002 f920 	bl	80027c8 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000588:	200a      	movs	r0, #10
 800058a:	f000 fb99 	bl	8000cc0 <HAL_Delay>
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	2000002c 	.word	0x2000002c
 800059c:	20000058 	.word	0x20000058
 80005a0:	20000034 	.word	0x20000034

080005a4 <MKS_set_param>:
		HAL_UART_Transmit(&huart1, transmit, 3, 10);
		HAL_UART_Receive_IT(&huart1, receive, length_of_param);
	}while(transmit[length_of_param] != CRC_calc(length_of_param));
}

void MKS_set_param(uint8_t param, uint8_t value){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	460a      	mov	r2, r1
 80005ae:	71fb      	strb	r3, [r7, #7]
 80005b0:	4613      	mov	r3, r2
 80005b2:	71bb      	strb	r3, [r7, #6]
	transmit[0] = Address;
 80005b4:	4b0f      	ldr	r3, [pc, #60]	; (80005f4 <MKS_set_param+0x50>)
 80005b6:	22e0      	movs	r2, #224	; 0xe0
 80005b8:	701a      	strb	r2, [r3, #0]
	transmit[1] = param;
 80005ba:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <MKS_set_param+0x50>)
 80005bc:	79fb      	ldrb	r3, [r7, #7]
 80005be:	7053      	strb	r3, [r2, #1]
	transmit[2] = value;
 80005c0:	4a0c      	ldr	r2, [pc, #48]	; (80005f4 <MKS_set_param+0x50>)
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	7093      	strb	r3, [r2, #2]
	transmit[3] = CRC_calc(3);
 80005c6:	2003      	movs	r0, #3
 80005c8:	f7ff ff9a 	bl	8000500 <CRC_calc>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <MKS_set_param+0x50>)
 80005d2:	70da      	strb	r2, [r3, #3]
	HAL_UART_Transmit(&huart1, transmit, 4, HAL_MAX_DELAY);
 80005d4:	f04f 33ff 	mov.w	r3, #4294967295
 80005d8:	2204      	movs	r2, #4
 80005da:	4906      	ldr	r1, [pc, #24]	; (80005f4 <MKS_set_param+0x50>)
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <MKS_set_param+0x54>)
 80005de:	f002 f85f 	bl	80026a0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, receive, 3);
 80005e2:	2203      	movs	r2, #3
 80005e4:	4905      	ldr	r1, [pc, #20]	; (80005fc <MKS_set_param+0x58>)
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MKS_set_param+0x54>)
 80005e8:	f002 f8ee 	bl	80027c8 <HAL_UART_Receive_IT>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	2000002c 	.word	0x2000002c
 80005f8:	20000058 	.word	0x20000058
 80005fc:	20000034 	.word	0x20000034

08000600 <MKS_rotate>:

void MKS_rotate(uint16_t rot, uint8_t speed, bool clockwise){
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	4603      	mov	r3, r0
 8000608:	80fb      	strh	r3, [r7, #6]
 800060a:	460b      	mov	r3, r1
 800060c:	717b      	strb	r3, [r7, #5]
 800060e:	4613      	mov	r3, r2
 8000610:	713b      	strb	r3, [r7, #4]
	uint32_t pulses;
	if(clockwise){
 8000612:	793b      	ldrb	r3, [r7, #4]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d004      	beq.n	8000622 <MKS_rotate+0x22>
		speed &= 0x7F;
 8000618:	797b      	ldrb	r3, [r7, #5]
 800061a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800061e:	717b      	strb	r3, [r7, #5]
 8000620:	e003      	b.n	800062a <MKS_rotate+0x2a>
	}else{
		speed |= 0x80;
 8000622:	797b      	ldrb	r3, [r7, #5]
 8000624:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000628:	717b      	strb	r3, [r7, #5]
	}
	pulses = rot * one_full_rotation_pulses / one_rotation_in_degrees;
 800062a:	88fb      	ldrh	r3, [r7, #6]
 800062c:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8000630:	fb02 f303 	mul.w	r3, r2, r3
 8000634:	ee07 3a90 	vmov	s15, r3
 8000638:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800063c:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80006bc <MKS_rotate+0xbc>
 8000640:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000644:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000648:	ee17 3a90 	vmov	r3, s15
 800064c:	60fb      	str	r3, [r7, #12]
	transmit[0] = Address;
 800064e:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MKS_rotate+0xc0>)
 8000650:	22e0      	movs	r2, #224	; 0xe0
 8000652:	701a      	strb	r2, [r3, #0]
	transmit[1] = Rotate;
 8000654:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MKS_rotate+0xc0>)
 8000656:	22fd      	movs	r2, #253	; 0xfd
 8000658:	705a      	strb	r2, [r3, #1]
	transmit[2] = (uint8_t)speed;
 800065a:	4a19      	ldr	r2, [pc, #100]	; (80006c0 <MKS_rotate+0xc0>)
 800065c:	797b      	ldrb	r3, [r7, #5]
 800065e:	7093      	strb	r3, [r2, #2]
	transmit[3] = (uint8_t)(pulses >> 24);
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	0e1b      	lsrs	r3, r3, #24
 8000664:	b2da      	uxtb	r2, r3
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MKS_rotate+0xc0>)
 8000668:	70da      	strb	r2, [r3, #3]
	transmit[4] = (uint8_t)(pulses >> 16);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	0c1b      	lsrs	r3, r3, #16
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MKS_rotate+0xc0>)
 8000672:	711a      	strb	r2, [r3, #4]
	transmit[5] = (uint8_t)(pulses >> 8);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	0a1b      	lsrs	r3, r3, #8
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MKS_rotate+0xc0>)
 800067c:	715a      	strb	r2, [r3, #5]
	transmit[6] = (uint8_t)(pulses);
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	b2da      	uxtb	r2, r3
 8000682:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MKS_rotate+0xc0>)
 8000684:	719a      	strb	r2, [r3, #6]
	transmit[7] = CRC_calc(7);
 8000686:	2007      	movs	r0, #7
 8000688:	f7ff ff3a 	bl	8000500 <CRC_calc>
 800068c:	4603      	mov	r3, r0
 800068e:	461a      	mov	r2, r3
 8000690:	4b0b      	ldr	r3, [pc, #44]	; (80006c0 <MKS_rotate+0xc0>)
 8000692:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart1, transmit, 8, HAL_MAX_DELAY);
 8000694:	f04f 33ff 	mov.w	r3, #4294967295
 8000698:	2208      	movs	r2, #8
 800069a:	4909      	ldr	r1, [pc, #36]	; (80006c0 <MKS_rotate+0xc0>)
 800069c:	4809      	ldr	r0, [pc, #36]	; (80006c4 <MKS_rotate+0xc4>)
 800069e:	f001 ffff 	bl	80026a0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, receive, 3);
 80006a2:	2203      	movs	r2, #3
 80006a4:	4908      	ldr	r1, [pc, #32]	; (80006c8 <MKS_rotate+0xc8>)
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <MKS_rotate+0xc4>)
 80006a8:	f002 f88e 	bl	80027c8 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 80006ac:	200a      	movs	r0, #10
 80006ae:	f000 fb07 	bl	8000cc0 <HAL_Delay>
}
 80006b2:	bf00      	nop
 80006b4:	3710      	adds	r7, #16
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	43b40000 	.word	0x43b40000
 80006c0:	2000002c 	.word	0x2000002c
 80006c4:	20000058 	.word	0x20000058
 80006c8:	20000034 	.word	0x20000034

080006cc <MKS_stop>:
	transmit[1] = Rotate;
	transmit[2] = (uint8_t)speed;
	transmit[3] = CRC_calc(3);
}

void MKS_stop(void){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	transmit[0] = Address;
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MKS_stop+0x3c>)
 80006d2:	22e0      	movs	r2, #224	; 0xe0
 80006d4:	701a      	strb	r2, [r3, #0]
	transmit[1] = Stop;
 80006d6:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MKS_stop+0x3c>)
 80006d8:	22f7      	movs	r2, #247	; 0xf7
 80006da:	705a      	strb	r2, [r3, #1]
	transmit[2] = CRC_calc(2);
 80006dc:	2002      	movs	r0, #2
 80006de:	f7ff ff0f 	bl	8000500 <CRC_calc>
 80006e2:	4603      	mov	r3, r0
 80006e4:	461a      	mov	r2, r3
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MKS_stop+0x3c>)
 80006e8:	709a      	strb	r2, [r3, #2]
	HAL_UART_Transmit(&huart1, transmit, 3, HAL_MAX_DELAY);
 80006ea:	f04f 33ff 	mov.w	r3, #4294967295
 80006ee:	2203      	movs	r2, #3
 80006f0:	4905      	ldr	r1, [pc, #20]	; (8000708 <MKS_stop+0x3c>)
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MKS_stop+0x40>)
 80006f4:	f001 ffd4 	bl	80026a0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1, receive, 3);
 80006f8:	2203      	movs	r2, #3
 80006fa:	4905      	ldr	r1, [pc, #20]	; (8000710 <MKS_stop+0x44>)
 80006fc:	4803      	ldr	r0, [pc, #12]	; (800070c <MKS_stop+0x40>)
 80006fe:	f002 f863 	bl	80027c8 <HAL_UART_Receive_IT>
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	2000002c 	.word	0x2000002c
 800070c:	20000058 	.word	0x20000058
 8000710:	20000034 	.word	0x20000034

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000718:	f000 fa5d 	bl	8000bd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071c:	f000 f8e0 	bl	80008e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000720:	f7ff fed6 	bl	80004d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000724:	f000 f99e 	bl	8000a64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart1);
 8000728:	485e      	ldr	r0, [pc, #376]	; (80008a4 <main+0x190>)
 800072a:	f001 ff6b 	bl	8002604 <HAL_UART_Init>
  MKS_set_param(0x90, 0x02);
 800072e:	2102      	movs	r1, #2
 8000730:	2090      	movs	r0, #144	; 0x90
 8000732:	f7ff ff37 	bl	80005a4 <MKS_set_param>
  MKS_set_param(Enable_move, 0x01);
 8000736:	2101      	movs	r1, #1
 8000738:	20f3      	movs	r0, #243	; 0xf3
 800073a:	f7ff ff33 	bl	80005a4 <MKS_set_param>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(read_rotation < 400000 && read_rotation > -400000){
 800073e:	4b5a      	ldr	r3, [pc, #360]	; (80008a8 <main+0x194>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a5a      	ldr	r2, [pc, #360]	; (80008ac <main+0x198>)
 8000744:	4293      	cmp	r3, r2
 8000746:	dc0b      	bgt.n	8000760 <main+0x4c>
 8000748:	4b57      	ldr	r3, [pc, #348]	; (80008a8 <main+0x194>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a58      	ldr	r2, [pc, #352]	; (80008b0 <main+0x19c>)
 800074e:	4293      	cmp	r3, r2
 8000750:	db06      	blt.n	8000760 <main+0x4c>
		  MKS_rotate(18, 15, flag);
 8000752:	4b58      	ldr	r3, [pc, #352]	; (80008b4 <main+0x1a0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	461a      	mov	r2, r3
 8000758:	210f      	movs	r1, #15
 800075a:	2012      	movs	r0, #18
 800075c:	f7ff ff50 	bl	8000600 <MKS_rotate>
	  }
	  HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	; 0x64
 8000762:	f000 faad 	bl	8000cc0 <HAL_Delay>
	  MKS_read_param(Position_angle, Position_angle_length);
 8000766:	2106      	movs	r1, #6
 8000768:	2036      	movs	r0, #54	; 0x36
 800076a:	f7ff feeb 	bl	8000544 <MKS_read_param>
	  MKS_read_param(Position_angle, Position_angle_length);
 800076e:	2106      	movs	r1, #6
 8000770:	2036      	movs	r0, #54	; 0x36
 8000772:	f7ff fee7 	bl	8000544 <MKS_read_param>
	  read_rotation = (int32_t)((receive[1] << 24) + (receive[2] << 16) + (receive[3] << 8) + receive[4]);
 8000776:	4b50      	ldr	r3, [pc, #320]	; (80008b8 <main+0x1a4>)
 8000778:	785b      	ldrb	r3, [r3, #1]
 800077a:	061a      	lsls	r2, r3, #24
 800077c:	4b4e      	ldr	r3, [pc, #312]	; (80008b8 <main+0x1a4>)
 800077e:	789b      	ldrb	r3, [r3, #2]
 8000780:	041b      	lsls	r3, r3, #16
 8000782:	441a      	add	r2, r3
 8000784:	4b4c      	ldr	r3, [pc, #304]	; (80008b8 <main+0x1a4>)
 8000786:	78db      	ldrb	r3, [r3, #3]
 8000788:	021b      	lsls	r3, r3, #8
 800078a:	4413      	add	r3, r2
 800078c:	4a4a      	ldr	r2, [pc, #296]	; (80008b8 <main+0x1a4>)
 800078e:	7912      	ldrb	r2, [r2, #4]
 8000790:	4413      	add	r3, r2
 8000792:	4a45      	ldr	r2, [pc, #276]	; (80008a8 <main+0x194>)
 8000794:	6013      	str	r3, [r2, #0]
	  angle = (float)(read_rotation)/(encoder_quality/one_rotation_in_degrees);
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <main+0x194>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	ee07 3a90 	vmov	s15, r3
 800079e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007a2:	eddf 6a46 	vldr	s13, [pc, #280]	; 80008bc <main+0x1a8>
 80007a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007aa:	4b45      	ldr	r3, [pc, #276]	; (80008c0 <main+0x1ac>)
 80007ac:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(10);
 80007b0:	200a      	movs	r0, #10
 80007b2:	f000 fa85 	bl	8000cc0 <HAL_Delay>
	  MKS_read_param(Position_error, Position_error_length);
 80007b6:	2104      	movs	r1, #4
 80007b8:	2039      	movs	r0, #57	; 0x39
 80007ba:	f7ff fec3 	bl	8000544 <MKS_read_param>
	  MKS_read_param(Position_error, Position_error_length);
 80007be:	2104      	movs	r1, #4
 80007c0:	2039      	movs	r0, #57	; 0x39
 80007c2:	f7ff febf 	bl	8000544 <MKS_read_param>
	  read_error = (int16_t)((receive[1] << 8) + (receive[2]));
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <main+0x1a4>)
 80007c8:	785b      	ldrb	r3, [r3, #1]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	021b      	lsls	r3, r3, #8
 80007ce:	b29a      	uxth	r2, r3
 80007d0:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <main+0x1a4>)
 80007d2:	789b      	ldrb	r3, [r3, #2]
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	4413      	add	r3, r2
 80007d8:	b29b      	uxth	r3, r3
 80007da:	b21a      	sxth	r2, r3
 80007dc:	4b39      	ldr	r3, [pc, #228]	; (80008c4 <main+0x1b0>)
 80007de:	801a      	strh	r2, [r3, #0]
	  angle_err = (float)(read_error)/(encoder_quality/one_rotation_in_degrees);
 80007e0:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <main+0x1b0>)
 80007e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007e6:	ee07 3a90 	vmov	s15, r3
 80007ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80007ee:	eddf 6a33 	vldr	s13, [pc, #204]	; 80008bc <main+0x1a8>
 80007f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80007f6:	4b34      	ldr	r3, [pc, #208]	; (80008c8 <main+0x1b4>)
 80007f8:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(10);
 80007fc:	200a      	movs	r0, #10
 80007fe:	f000 fa5f 	bl	8000cc0 <HAL_Delay>
	  MKS_read_param(En_value, En_value_length);
 8000802:	2109      	movs	r1, #9
 8000804:	2030      	movs	r0, #48	; 0x30
 8000806:	f7ff fe9d 	bl	8000544 <MKS_read_param>
	  MKS_read_param(En_value, En_value_length);
 800080a:	2109      	movs	r1, #9
 800080c:	2030      	movs	r0, #48	; 0x30
 800080e:	f7ff fe99 	bl	8000544 <MKS_read_param>
	  encoder_rotations = (int32_t)((receive[1] << 24) + (receive[2] << 16) + (receive[3] << 8) + receive[4]);
 8000812:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <main+0x1a4>)
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	061a      	lsls	r2, r3, #24
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <main+0x1a4>)
 800081a:	789b      	ldrb	r3, [r3, #2]
 800081c:	041b      	lsls	r3, r3, #16
 800081e:	441a      	add	r2, r3
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <main+0x1a4>)
 8000822:	78db      	ldrb	r3, [r3, #3]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	4413      	add	r3, r2
 8000828:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <main+0x1a4>)
 800082a:	7912      	ldrb	r2, [r2, #4]
 800082c:	4413      	add	r3, r2
 800082e:	4a27      	ldr	r2, [pc, #156]	; (80008cc <main+0x1b8>)
 8000830:	6013      	str	r3, [r2, #0]
	  encoder_value = (uint16_t)((receive[5] << 8) + receive[6]);
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <main+0x1a4>)
 8000834:	795b      	ldrb	r3, [r3, #5]
 8000836:	b29b      	uxth	r3, r3
 8000838:	021b      	lsls	r3, r3, #8
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <main+0x1a4>)
 800083e:	799b      	ldrb	r3, [r3, #6]
 8000840:	b29b      	uxth	r3, r3
 8000842:	4413      	add	r3, r2
 8000844:	b29a      	uxth	r2, r3
 8000846:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <main+0x1bc>)
 8000848:	801a      	strh	r2, [r3, #0]
	  angle_en = (float)(encoder_value)/(encoder_quality/one_rotation_in_degrees);
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <main+0x1bc>)
 800084c:	881b      	ldrh	r3, [r3, #0]
 800084e:	ee07 3a90 	vmov	s15, r3
 8000852:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000856:	eddf 6a19 	vldr	s13, [pc, #100]	; 80008bc <main+0x1a8>
 800085a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800085e:	4b1d      	ldr	r3, [pc, #116]	; (80008d4 <main+0x1c0>)
 8000860:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(200);
 8000864:	20c8      	movs	r0, #200	; 0xc8
 8000866:	f000 fa2b 	bl	8000cc0 <HAL_Delay>
//	  }
//	  if(angle < -180){
//		  flag = false;
//	  }

	  if(encoder_rotations >= 1){
 800086a:	4b18      	ldr	r3, [pc, #96]	; (80008cc <main+0x1b8>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b00      	cmp	r3, #0
 8000870:	dd02      	ble.n	8000878 <main+0x164>
		  flag = true;
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <main+0x1a0>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
	  }
	  if(encoder_rotations <= -1){
 8000878:	4b14      	ldr	r3, [pc, #80]	; (80008cc <main+0x1b8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	da02      	bge.n	8000886 <main+0x172>
		  flag = false;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <main+0x1a0>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
	  }
	  if(read_rotation > 800000 || read_rotation < -800000){
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <main+0x194>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4a13      	ldr	r2, [pc, #76]	; (80008d8 <main+0x1c4>)
 800088c:	4293      	cmp	r3, r2
 800088e:	dc05      	bgt.n	800089c <main+0x188>
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <main+0x194>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a11      	ldr	r2, [pc, #68]	; (80008dc <main+0x1c8>)
 8000896:	4293      	cmp	r3, r2
 8000898:	f6bf af51 	bge.w	800073e <main+0x2a>
		  MKS_stop();
 800089c:	f7ff ff16 	bl	80006cc <MKS_stop>
	  if(read_rotation < 400000 && read_rotation > -400000){
 80008a0:	e74d      	b.n	800073e <main+0x2a>
 80008a2:	bf00      	nop
 80008a4:	20000058 	.word	0x20000058
 80008a8:	20000048 	.word	0x20000048
 80008ac:	00061a7f 	.word	0x00061a7f
 80008b0:	fff9e581 	.word	0xfff9e581
 80008b4:	20000028 	.word	0x20000028
 80008b8:	20000034 	.word	0x20000034
 80008bc:	43360b61 	.word	0x43360b61
 80008c0:	2000004c 	.word	0x2000004c
 80008c4:	20000050 	.word	0x20000050
 80008c8:	20000054 	.word	0x20000054
 80008cc:	20000040 	.word	0x20000040
 80008d0:	2000003c 	.word	0x2000003c
 80008d4:	20000044 	.word	0x20000044
 80008d8:	000c3500 	.word	0x000c3500
 80008dc:	fff3cb00 	.word	0xfff3cb00

080008e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b096      	sub	sp, #88	; 0x58
 80008e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	2244      	movs	r2, #68	; 0x44
 80008ec:	2100      	movs	r1, #0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 f9a4 	bl	8003c3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000902:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000906:	f000 fd07 	bl	8001318 <HAL_PWREx_ControlVoltageScaling>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000910:	f000 f838 	bl	8000984 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000914:	2310      	movs	r3, #16
 8000916:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000918:	2301      	movs	r3, #1
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000920:	2360      	movs	r3, #96	; 0x60
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000928:	2301      	movs	r3, #1
 800092a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800092c:	2301      	movs	r3, #1
 800092e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000930:	2328      	movs	r3, #40	; 0x28
 8000932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000934:	2307      	movs	r3, #7
 8000936:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800093c:	2302      	movs	r3, #2
 800093e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4618      	mov	r0, r3
 8000946:	f000 fd3d 	bl	80013c4 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000950:	f000 f818 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2303      	movs	r3, #3
 800095a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000964:	2300      	movs	r3, #0
 8000966:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000968:	463b      	mov	r3, r7
 800096a:	2104      	movs	r1, #4
 800096c:	4618      	mov	r0, r3
 800096e:	f001 f93d 	bl	8001bec <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000978:	f000 f804 	bl	8000984 <Error_Handler>
  }
}
 800097c:	bf00      	nop
 800097e:	3758      	adds	r7, #88	; 0x58
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	e7fe      	b.n	800098c <Error_Handler+0x8>
	...

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0f      	ldr	r3, [pc, #60]	; (80009d4 <HAL_MspInit+0x44>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a0e      	ldr	r2, [pc, #56]	; (80009d4 <HAL_MspInit+0x44>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <HAL_MspInit+0x44>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ae:	4b09      	ldr	r3, [pc, #36]	; (80009d4 <HAL_MspInit+0x44>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	4a08      	ldr	r2, [pc, #32]	; (80009d4 <HAL_MspInit+0x44>)
 80009b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b8:	6593      	str	r3, [r2, #88]	; 0x58
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_MspInit+0x44>)
 80009bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c2:	603b      	str	r3, [r7, #0]
 80009c4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	40021000 	.word	0x40021000

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <NMI_Handler+0x4>

080009de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <MemManage_Handler+0x4>

080009ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr

08000a12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a12:	b480      	push	{r7}
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a24:	f000 f92c 	bl	8000c80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a30:	4802      	ldr	r0, [pc, #8]	; (8000a3c <USART1_IRQHandler+0x10>)
 8000a32:	f001 ff1f 	bl	8002874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000058 	.word	0x20000058

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <SystemInit+0x20>)
 8000a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a4a:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <SystemInit+0x20>)
 8000a4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a6a:	4a15      	ldr	r2, [pc, #84]	; (8000ac0 <MX_USART1_UART_Init+0x5c>)
 8000a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a8a:	220c      	movs	r2, #12
 8000a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8e:	4b0b      	ldr	r3, [pc, #44]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a94:	4b09      	ldr	r3, [pc, #36]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9a:	4b08      	ldr	r3, [pc, #32]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aa6:	4805      	ldr	r0, [pc, #20]	; (8000abc <MX_USART1_UART_Init+0x58>)
 8000aa8:	f001 fdac 	bl	8002604 <HAL_UART_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000ab2:	f7ff ff67 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000058 	.word	0x20000058
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b09e      	sub	sp, #120	; 0x78
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2254      	movs	r2, #84	; 0x54
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 f8a9 	bl	8003c3c <memset>
  if(uartHandle->Instance==USART1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <HAL_UART_MspInit+0xb8>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d13f      	bne.n	8000b74 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000af4:	2301      	movs	r3, #1
 8000af6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000af8:	2300      	movs	r3, #0
 8000afa:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fa97 	bl	8002034 <HAL_RCCEx_PeriphCLKConfig>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b0c:	f7ff ff3a 	bl	8000984 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b10:	4b1b      	ldr	r3, [pc, #108]	; (8000b80 <HAL_UART_MspInit+0xbc>)
 8000b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b14:	4a1a      	ldr	r2, [pc, #104]	; (8000b80 <HAL_UART_MspInit+0xbc>)
 8000b16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b1a:	6613      	str	r3, [r2, #96]	; 0x60
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0xbc>)
 8000b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b28:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_UART_MspInit+0xbc>)
 8000b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2c:	4a14      	ldr	r2, [pc, #80]	; (8000b80 <HAL_UART_MspInit+0xbc>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_UART_MspInit+0xbc>)
 8000b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b40:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b44:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b52:	2307      	movs	r3, #7
 8000b54:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f000 fa62 	bl	8001028 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	210a      	movs	r1, #10
 8000b68:	2025      	movs	r0, #37	; 0x25
 8000b6a:	f000 f9a8 	bl	8000ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b6e:	2025      	movs	r0, #37	; 0x25
 8000b70:	f000 f9c1 	bl	8000ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b74:	bf00      	nop
 8000b76:	3778      	adds	r7, #120	; 0x78
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	40021000 	.word	0x40021000

08000b84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bbc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff ff5a 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopForever+0xe>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopForever+0x16>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f003 f81f 	bl	8003bf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bb6:	f7ff fdad 	bl	8000714 <main>

08000bba <LoopForever>:

LoopForever:
    b LoopForever
 8000bba:	e7fe      	b.n	8000bba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bbc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bc8:	08003cbc 	.word	0x08003cbc
  ldr r2, =_sbss
 8000bcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bd0:	200000e0 	.word	0x200000e0

08000bd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_IRQHandler>

08000bd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be0:	2003      	movs	r0, #3
 8000be2:	f000 f961 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000be6:	200f      	movs	r0, #15
 8000be8:	f000 f80e 	bl	8000c08 <HAL_InitTick>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d002      	beq.n	8000bf8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	71fb      	strb	r3, [r7, #7]
 8000bf6:	e001      	b.n	8000bfc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bf8:	f7ff feca 	bl	8000990 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c10:	2300      	movs	r3, #0
 8000c12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d023      	beq.n	8000c64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c1c:	4b16      	ldr	r3, [pc, #88]	; (8000c78 <HAL_InitTick+0x70>)
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <HAL_InitTick+0x6c>)
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f96d 	bl	8000f12 <HAL_SYSTICK_Config>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d10f      	bne.n	8000c5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d809      	bhi.n	8000c58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f937 	bl	8000ebe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c50:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <HAL_InitTick+0x74>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
 8000c56:	e007      	b.n	8000c68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	73fb      	strb	r3, [r7, #15]
 8000c5c:	e004      	b.n	8000c68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	73fb      	strb	r3, [r7, #15]
 8000c62:	e001      	b.n	8000c68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	20000004 	.word	0x20000004

08000c80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_IncTick+0x20>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a04      	ldr	r2, [pc, #16]	; (8000ca4 <HAL_IncTick+0x24>)
 8000c92:	6013      	str	r3, [r2, #0]
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000008 	.word	0x20000008
 8000ca4:	200000dc 	.word	0x200000dc

08000ca8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return uwTick;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <HAL_GetTick+0x14>)
 8000cae:	681b      	ldr	r3, [r3, #0]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	200000dc 	.word	0x200000dc

08000cc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cc8:	f7ff ffee 	bl	8000ca8 <HAL_GetTick>
 8000ccc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cd8:	d005      	beq.n	8000ce6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <HAL_Delay+0x44>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ce6:	bf00      	nop
 8000ce8:	f7ff ffde 	bl	8000ca8 <HAL_GetTick>
 8000cec:	4602      	mov	r2, r0
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	1ad3      	subs	r3, r2, r3
 8000cf2:	68fa      	ldr	r2, [r7, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d8f7      	bhi.n	8000ce8 <HAL_Delay+0x28>
  {
  }
}
 8000cf8:	bf00      	nop
 8000cfa:	bf00      	nop
 8000cfc:	3710      	adds	r7, #16
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	20000008 	.word	0x20000008

08000d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0307 	and.w	r3, r3, #7
 8000d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d1a:	68db      	ldr	r3, [r3, #12]
 8000d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d1e:	68ba      	ldr	r2, [r7, #8]
 8000d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d24:	4013      	ands	r3, r2
 8000d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3a:	4a04      	ldr	r2, [pc, #16]	; (8000d4c <__NVIC_SetPriorityGrouping+0x44>)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	60d3      	str	r3, [r2, #12]
}
 8000d40:	bf00      	nop
 8000d42:	3714      	adds	r7, #20
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d54:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <__NVIC_GetPriorityGrouping+0x18>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	0a1b      	lsrs	r3, r3, #8
 8000d5a:	f003 0307 	and.w	r3, r3, #7
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00

08000d6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4603      	mov	r3, r0
 8000d74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	db0b      	blt.n	8000d96 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	f003 021f 	and.w	r2, r3, #31
 8000d84:	4907      	ldr	r1, [pc, #28]	; (8000da4 <__NVIC_EnableIRQ+0x38>)
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	095b      	lsrs	r3, r3, #5
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000e100 	.word	0xe000e100

08000da8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	db0a      	blt.n	8000dd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <__NVIC_SetPriority+0x4c>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	0112      	lsls	r2, r2, #4
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	440b      	add	r3, r1
 8000dcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd0:	e00a      	b.n	8000de8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	4908      	ldr	r1, [pc, #32]	; (8000df8 <__NVIC_SetPriority+0x50>)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	f003 030f 	and.w	r3, r3, #15
 8000dde:	3b04      	subs	r3, #4
 8000de0:	0112      	lsls	r2, r2, #4
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	440b      	add	r3, r1
 8000de6:	761a      	strb	r2, [r3, #24]
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000e100 	.word	0xe000e100
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff29 	bl	8000d08 <__NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff3e 	bl	8000d50 <__NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <__NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	4603      	mov	r3, r0
 8000efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff ff31 	bl	8000d6c <__NVIC_EnableIRQ>
}
 8000f0a:	bf00      	nop
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	b082      	sub	sp, #8
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ffa2 	bl	8000e64 <SysTick_Config>
 8000f20:	4603      	mov	r3, r0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b085      	sub	sp, #20
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d008      	beq.n	8000f54 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2204      	movs	r2, #4
 8000f46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e022      	b.n	8000f9a <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f022 020e 	bic.w	r2, r2, #14
 8000f62:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f022 0201 	bic.w	r2, r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f78:	f003 021c 	and.w	r2, r3, #28
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	2101      	movs	r1, #1
 8000f82:	fa01 f202 	lsl.w	r2, r1, r2
 8000f86:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2200      	movs	r2, #0
 8000f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d005      	beq.n	8000fca <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e029      	b.n	800101e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	681a      	ldr	r2, [r3, #0]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f022 020e 	bic.w	r2, r2, #14
 8000fd8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 0201 	bic.w	r2, r2, #1
 8000fe8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	f003 021c 	and.w	r2, r3, #28
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	fa01 f202 	lsl.w	r2, r1, r2
 8000ffc:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	2200      	movs	r2, #0
 800100a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001012:	2b00      	cmp	r3, #0
 8001014:	d003      	beq.n	800101e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	4798      	blx	r3
    }
  }
  return status;
 800101e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b087      	sub	sp, #28
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001036:	e148      	b.n	80012ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	2101      	movs	r1, #1
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	fa01 f303 	lsl.w	r3, r1, r3
 8001044:	4013      	ands	r3, r2
 8001046:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 813a 	beq.w	80012c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d005      	beq.n	8001068 <HAL_GPIO_Init+0x40>
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d130      	bne.n	80010ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	68da      	ldr	r2, [r3, #12]
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800109e:	2201      	movs	r2, #1
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	4013      	ands	r3, r2
 80010ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	091b      	lsrs	r3, r3, #4
 80010b4:	f003 0201 	and.w	r2, r3, #1
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4313      	orrs	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	2b03      	cmp	r3, #3
 80010d4:	d017      	beq.n	8001106 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	2203      	movs	r2, #3
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d123      	bne.n	800115a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	220f      	movs	r2, #15
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	691a      	ldr	r2, [r3, #16]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0307 	and.w	r3, r3, #7
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	4313      	orrs	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	08da      	lsrs	r2, r3, #3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	6939      	ldr	r1, [r7, #16]
 8001156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	2203      	movs	r2, #3
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f003 0203 	and.w	r2, r3, #3
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001196:	2b00      	cmp	r3, #0
 8001198:	f000 8094 	beq.w	80012c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800119c:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <HAL_GPIO_Init+0x2c0>)
 800119e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a0:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x2c0>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6613      	str	r3, [r2, #96]	; 0x60
 80011a8:	4b4f      	ldr	r3, [pc, #316]	; (80012e8 <HAL_GPIO_Init+0x2c0>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011b4:	4a4d      	ldr	r2, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x2c4>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3302      	adds	r3, #2
 80011bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	220f      	movs	r2, #15
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011de:	d00d      	beq.n	80011fc <HAL_GPIO_Init+0x1d4>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a43      	ldr	r2, [pc, #268]	; (80012f0 <HAL_GPIO_Init+0x2c8>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d007      	beq.n	80011f8 <HAL_GPIO_Init+0x1d0>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a42      	ldr	r2, [pc, #264]	; (80012f4 <HAL_GPIO_Init+0x2cc>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d101      	bne.n	80011f4 <HAL_GPIO_Init+0x1cc>
 80011f0:	2302      	movs	r3, #2
 80011f2:	e004      	b.n	80011fe <HAL_GPIO_Init+0x1d6>
 80011f4:	2307      	movs	r3, #7
 80011f6:	e002      	b.n	80011fe <HAL_GPIO_Init+0x1d6>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <HAL_GPIO_Init+0x1d6>
 80011fc:	2300      	movs	r3, #0
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	f002 0203 	and.w	r2, r2, #3
 8001204:	0092      	lsls	r2, r2, #2
 8001206:	4093      	lsls	r3, r2
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4313      	orrs	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120e:	4937      	ldr	r1, [pc, #220]	; (80012ec <HAL_GPIO_Init+0x2c4>)
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4313      	orrs	r3, r2
 800123e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001240:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800126a:	4a23      	ldr	r2, [pc, #140]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001270:	4b21      	ldr	r3, [pc, #132]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	43db      	mvns	r3, r3
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	4013      	ands	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	4313      	orrs	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001294:	4a18      	ldr	r2, [pc, #96]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4013      	ands	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	3301      	adds	r3, #1
 80012c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f47f aeaf 	bne.w	8001038 <HAL_GPIO_Init+0x10>
  }
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	48000400 	.word	0x48000400
 80012f4:	48000800 	.word	0x48000800
 80012f8:	40010400 	.word	0x40010400

080012fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_PWREx_GetVoltageRange+0x18>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40007000 	.word	0x40007000

08001318 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001326:	d130      	bne.n	800138a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001330:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001334:	d038      	beq.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800133e:	4a1e      	ldr	r2, [pc, #120]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001340:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001344:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2232      	movs	r2, #50	; 0x32
 800134c:	fb02 f303 	mul.w	r3, r2, r3
 8001350:	4a1b      	ldr	r2, [pc, #108]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	0c9b      	lsrs	r3, r3, #18
 8001358:	3301      	adds	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800135c:	e002      	b.n	8001364 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3b01      	subs	r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001370:	d102      	bne.n	8001378 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d1f2      	bne.n	800135e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001378:	4b0f      	ldr	r3, [pc, #60]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001384:	d110      	bne.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e00f      	b.n	80013aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800138a:	4b0b      	ldr	r3, [pc, #44]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001396:	d007      	beq.n	80013a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001398:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a0:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3714      	adds	r7, #20
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40007000 	.word	0x40007000
 80013bc:	20000000 	.word	0x20000000
 80013c0:	431bde83 	.word	0x431bde83

080013c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	f000 bc02 	b.w	8001bdc <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013d8:	4b96      	ldr	r3, [pc, #600]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 030c 	and.w	r3, r3, #12
 80013e0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013e2:	4b94      	ldr	r3, [pc, #592]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80e4 	beq.w	80015c2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d007      	beq.n	8001410 <HAL_RCC_OscConfig+0x4c>
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2b0c      	cmp	r3, #12
 8001404:	f040 808b 	bne.w	800151e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	2b01      	cmp	r3, #1
 800140c:	f040 8087 	bne.w	800151e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001410:	4b88      	ldr	r3, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0302 	and.w	r3, r3, #2
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_OscConfig+0x64>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d101      	bne.n	8001428 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e3d9      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1a      	ldr	r2, [r3, #32]
 800142c:	4b81      	ldr	r3, [pc, #516]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <HAL_RCC_OscConfig+0x7e>
 8001438:	4b7e      	ldr	r3, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001440:	e005      	b.n	800144e <HAL_RCC_OscConfig+0x8a>
 8001442:	4b7c      	ldr	r3, [pc, #496]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001444:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800144e:	4293      	cmp	r3, r2
 8001450:	d223      	bcs.n	800149a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	4618      	mov	r0, r3
 8001458:	f000 fd8c 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e3ba      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001466:	4b73      	ldr	r3, [pc, #460]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a72      	ldr	r2, [pc, #456]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	496d      	ldr	r1, [pc, #436]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001484:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	4968      	ldr	r1, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
 8001498:	e025      	b.n	80014e6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800149a:	4b66      	ldr	r3, [pc, #408]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014a0:	f043 0308 	orr.w	r3, r3, #8
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	4b63      	ldr	r3, [pc, #396]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a1b      	ldr	r3, [r3, #32]
 80014b2:	4960      	ldr	r1, [pc, #384]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014b8:	4b5e      	ldr	r3, [pc, #376]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	69db      	ldr	r3, [r3, #28]
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	495b      	ldr	r1, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d109      	bne.n	80014e6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fd4c 	bl	8001f74 <RCC_SetFlashLatencyFromMSIRange>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e37a      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014e6:	f000 fc81 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 80014ea:	4602      	mov	r2, r0
 80014ec:	4b51      	ldr	r3, [pc, #324]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	4950      	ldr	r1, [pc, #320]	; (8001638 <HAL_RCC_OscConfig+0x274>)
 80014f8:	5ccb      	ldrb	r3, [r1, r3]
 80014fa:	f003 031f 	and.w	r3, r3, #31
 80014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001502:	4a4e      	ldr	r2, [pc, #312]	; (800163c <HAL_RCC_OscConfig+0x278>)
 8001504:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001506:	4b4e      	ldr	r3, [pc, #312]	; (8001640 <HAL_RCC_OscConfig+0x27c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fb7c 	bl	8000c08 <HAL_InitTick>
 8001510:	4603      	mov	r3, r0
 8001512:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d052      	beq.n	80015c0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	e35e      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d032      	beq.n	800158c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a42      	ldr	r2, [pc, #264]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001532:	f7ff fbb9 	bl	8000ca8 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800153a:	f7ff fbb5 	bl	8000ca8 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e347      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0f0      	beq.n	800153a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a35      	ldr	r2, [pc, #212]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800155e:	f043 0308 	orr.w	r3, r3, #8
 8001562:	6013      	str	r3, [r2, #0]
 8001564:	4b33      	ldr	r3, [pc, #204]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a1b      	ldr	r3, [r3, #32]
 8001570:	4930      	ldr	r1, [pc, #192]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001572:	4313      	orrs	r3, r2
 8001574:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001576:	4b2f      	ldr	r3, [pc, #188]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	021b      	lsls	r3, r3, #8
 8001584:	492b      	ldr	r1, [pc, #172]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
 800158a:	e01a      	b.n	80015c2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800158c:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a28      	ldr	r2, [pc, #160]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001592:	f023 0301 	bic.w	r3, r3, #1
 8001596:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001598:	f7ff fb86 	bl	8000ca8 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800159e:	e008      	b.n	80015b2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015a0:	f7ff fb82 	bl	8000ca8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b02      	cmp	r3, #2
 80015ac:	d901      	bls.n	80015b2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e314      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015b2:	4b20      	ldr	r3, [pc, #128]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d1f0      	bne.n	80015a0 <HAL_RCC_OscConfig+0x1dc>
 80015be:	e000      	b.n	80015c2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d073      	beq.n	80016b6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b08      	cmp	r3, #8
 80015d2:	d005      	beq.n	80015e0 <HAL_RCC_OscConfig+0x21c>
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d10e      	bne.n	80015f8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2b03      	cmp	r3, #3
 80015de:	d10b      	bne.n	80015f8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d063      	beq.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d15f      	bne.n	80016b4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e2f1      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001600:	d106      	bne.n	8001610 <HAL_RCC_OscConfig+0x24c>
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001608:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	e025      	b.n	800165c <HAL_RCC_OscConfig+0x298>
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001618:	d114      	bne.n	8001644 <HAL_RCC_OscConfig+0x280>
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001624:	6013      	str	r3, [r2, #0]
 8001626:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a02      	ldr	r2, [pc, #8]	; (8001634 <HAL_RCC_OscConfig+0x270>)
 800162c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001630:	6013      	str	r3, [r2, #0]
 8001632:	e013      	b.n	800165c <HAL_RCC_OscConfig+0x298>
 8001634:	40021000 	.word	0x40021000
 8001638:	08003c64 	.word	0x08003c64
 800163c:	20000000 	.word	0x20000000
 8001640:	20000004 	.word	0x20000004
 8001644:	4ba0      	ldr	r3, [pc, #640]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a9f      	ldr	r2, [pc, #636]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800164a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b9d      	ldr	r3, [pc, #628]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a9c      	ldr	r2, [pc, #624]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001664:	f7ff fb20 	bl	8000ca8 <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fb1c 	bl	8000ca8 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e2ae      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800167e:	4b92      	ldr	r3, [pc, #584]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0f0      	beq.n	800166c <HAL_RCC_OscConfig+0x2a8>
 800168a:	e014      	b.n	80016b6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168c:	f7ff fb0c 	bl	8000ca8 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001694:	f7ff fb08 	bl	8000ca8 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e29a      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016a6:	4b88      	ldr	r3, [pc, #544]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d1f0      	bne.n	8001694 <HAL_RCC_OscConfig+0x2d0>
 80016b2:	e000      	b.n	80016b6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d060      	beq.n	8001784 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d005      	beq.n	80016d4 <HAL_RCC_OscConfig+0x310>
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b0c      	cmp	r3, #12
 80016cc:	d119      	bne.n	8001702 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d116      	bne.n	8001702 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016d4:	4b7c      	ldr	r3, [pc, #496]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d005      	beq.n	80016ec <HAL_RCC_OscConfig+0x328>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e277      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	4b76      	ldr	r3, [pc, #472]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	061b      	lsls	r3, r3, #24
 80016fa:	4973      	ldr	r1, [pc, #460]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001700:	e040      	b.n	8001784 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d023      	beq.n	8001752 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001716:	f7ff fac7 	bl	8000ca8 <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800171e:	f7ff fac3 	bl	8000ca8 <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b02      	cmp	r3, #2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e255      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001730:	4b65      	ldr	r3, [pc, #404]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0f0      	beq.n	800171e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b62      	ldr	r3, [pc, #392]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	061b      	lsls	r3, r3, #24
 800174a:	495f      	ldr	r1, [pc, #380]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	e018      	b.n	8001784 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001752:	4b5d      	ldr	r3, [pc, #372]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a5c      	ldr	r2, [pc, #368]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800175c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff faa3 	bl	8000ca8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001766:	f7ff fa9f 	bl	8000ca8 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e231      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001778:	4b53      	ldr	r3, [pc, #332]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d03c      	beq.n	800180a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d01c      	beq.n	80017d2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001798:	4b4b      	ldr	r3, [pc, #300]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800179a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179e:	4a4a      	ldr	r2, [pc, #296]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fa7e 	bl	8000ca8 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fa7a 	bl	8000ca8 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e20c      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017c2:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c8:	f003 0302 	and.w	r3, r3, #2
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d0ef      	beq.n	80017b0 <HAL_RCC_OscConfig+0x3ec>
 80017d0:	e01b      	b.n	800180a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d2:	4b3d      	ldr	r3, [pc, #244]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d8:	4a3b      	ldr	r2, [pc, #236]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017da:	f023 0301 	bic.w	r3, r3, #1
 80017de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e2:	f7ff fa61 	bl	8000ca8 <HAL_GetTick>
 80017e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017e8:	e008      	b.n	80017fc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ea:	f7ff fa5d 	bl	8000ca8 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e1ef      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017fc:	4b32      	ldr	r3, [pc, #200]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80017fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1ef      	bne.n	80017ea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0304 	and.w	r3, r3, #4
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80a6 	beq.w	8001964 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001818:	2300      	movs	r3, #0
 800181a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10d      	bne.n	8001844 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	4a26      	ldr	r2, [pc, #152]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800182e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001832:	6593      	str	r3, [r2, #88]	; 0x58
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183c:	60bb      	str	r3, [r7, #8]
 800183e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001840:	2301      	movs	r3, #1
 8001842:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001844:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HAL_RCC_OscConfig+0x508>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184c:	2b00      	cmp	r3, #0
 800184e:	d118      	bne.n	8001882 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001850:	4b1e      	ldr	r3, [pc, #120]	; (80018cc <HAL_RCC_OscConfig+0x508>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_RCC_OscConfig+0x508>)
 8001856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185c:	f7ff fa24 	bl	8000ca8 <HAL_GetTick>
 8001860:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7ff fa20 	bl	8000ca8 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e1b2      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_RCC_OscConfig+0x508>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800187e:	2b00      	cmp	r3, #0
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d108      	bne.n	800189c <HAL_RCC_OscConfig+0x4d8>
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 800188c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001890:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800189a:	e029      	b.n	80018f0 <HAL_RCC_OscConfig+0x52c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d115      	bne.n	80018d0 <HAL_RCC_OscConfig+0x50c>
 80018a4:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018aa:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80018ac:	f043 0304 	orr.w	r3, r3, #4
 80018b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b4:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80018b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ba:	4a03      	ldr	r2, [pc, #12]	; (80018c8 <HAL_RCC_OscConfig+0x504>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018c4:	e014      	b.n	80018f0 <HAL_RCC_OscConfig+0x52c>
 80018c6:	bf00      	nop
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40007000 	.word	0x40007000
 80018d0:	4b9a      	ldr	r3, [pc, #616]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 80018d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d6:	4a99      	ldr	r2, [pc, #612]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 80018d8:	f023 0301 	bic.w	r3, r3, #1
 80018dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018e0:	4b96      	ldr	r3, [pc, #600]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 80018e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e6:	4a95      	ldr	r2, [pc, #596]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 80018e8:	f023 0304 	bic.w	r3, r3, #4
 80018ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d016      	beq.n	8001926 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff f9d6 	bl	8000ca8 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018fe:	e00a      	b.n	8001916 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001900:	f7ff f9d2 	bl	8000ca8 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	f241 3288 	movw	r2, #5000	; 0x1388
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e162      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001916:	4b89      	ldr	r3, [pc, #548]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191c:	f003 0302 	and.w	r3, r3, #2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0ed      	beq.n	8001900 <HAL_RCC_OscConfig+0x53c>
 8001924:	e015      	b.n	8001952 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001926:	f7ff f9bf 	bl	8000ca8 <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800192c:	e00a      	b.n	8001944 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800192e:	f7ff f9bb 	bl	8000ca8 <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	f241 3288 	movw	r2, #5000	; 0x1388
 800193c:	4293      	cmp	r3, r2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e14b      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001944:	4b7d      	ldr	r3, [pc, #500]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1ed      	bne.n	800192e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001952:	7ffb      	ldrb	r3, [r7, #31]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d105      	bne.n	8001964 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001958:	4b78      	ldr	r3, [pc, #480]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	4a77      	ldr	r2, [pc, #476]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 800195e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001962:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d03c      	beq.n	80019ea <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001974:	2b00      	cmp	r3, #0
 8001976:	d01c      	beq.n	80019b2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001978:	4b70      	ldr	r3, [pc, #448]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 800197a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800197e:	4a6f      	ldr	r2, [pc, #444]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001988:	f7ff f98e 	bl	8000ca8 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001990:	f7ff f98a 	bl	8000ca8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e11c      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80019a2:	4b66      	ldr	r3, [pc, #408]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 80019a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d0ef      	beq.n	8001990 <HAL_RCC_OscConfig+0x5cc>
 80019b0:	e01b      	b.n	80019ea <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019b2:	4b62      	ldr	r3, [pc, #392]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 80019b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019b8:	4a60      	ldr	r2, [pc, #384]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 80019ba:	f023 0301 	bic.w	r3, r3, #1
 80019be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019c2:	f7ff f971 	bl	8000ca8 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019ca:	f7ff f96d 	bl	8000ca8 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e0ff      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019dc:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 80019de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1ef      	bne.n	80019ca <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	f000 80f3 	beq.w	8001bda <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	f040 80c9 	bne.w	8001b90 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019fe:	4b4f      	ldr	r3, [pc, #316]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f003 0203 	and.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d12c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d123      	bne.n	8001a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a2e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d11b      	bne.n	8001a6c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d113      	bne.n	8001a6c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	085b      	lsrs	r3, r3, #1
 8001a50:	3b01      	subs	r3, #1
 8001a52:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d109      	bne.n	8001a6c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	085b      	lsrs	r3, r3, #1
 8001a64:	3b01      	subs	r3, #1
 8001a66:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d06b      	beq.n	8001b44 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	2b0c      	cmp	r3, #12
 8001a70:	d062      	beq.n	8001b38 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a72:	4b32      	ldr	r3, [pc, #200]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e0ac      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a82:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001a88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a8c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a8e:	f7ff f90b 	bl	8000ca8 <HAL_GetTick>
 8001a92:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	e008      	b.n	8001aa8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a96:	f7ff f907 	bl	8000ca8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d901      	bls.n	8001aa8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001aa4:	2303      	movs	r3, #3
 8001aa6:	e099      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa8:	4b24      	ldr	r3, [pc, #144]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1f0      	bne.n	8001a96 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ab4:	4b21      	ldr	r3, [pc, #132]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001ab6:	68da      	ldr	r2, [r3, #12]
 8001ab8:	4b21      	ldr	r3, [pc, #132]	; (8001b40 <HAL_RCC_OscConfig+0x77c>)
 8001aba:	4013      	ands	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ac4:	3a01      	subs	r2, #1
 8001ac6:	0112      	lsls	r2, r2, #4
 8001ac8:	4311      	orrs	r1, r2
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ace:	0212      	lsls	r2, r2, #8
 8001ad0:	4311      	orrs	r1, r2
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001ad6:	0852      	lsrs	r2, r2, #1
 8001ad8:	3a01      	subs	r2, #1
 8001ada:	0552      	lsls	r2, r2, #21
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ae2:	0852      	lsrs	r2, r2, #1
 8001ae4:	3a01      	subs	r2, #1
 8001ae6:	0652      	lsls	r2, r2, #25
 8001ae8:	4311      	orrs	r1, r2
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001aee:	06d2      	lsls	r2, r2, #27
 8001af0:	430a      	orrs	r2, r1
 8001af2:	4912      	ldr	r1, [pc, #72]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b02:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b10:	f7ff f8ca 	bl	8000ca8 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f8c6 	bl	8000ca8 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e058      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <HAL_RCC_OscConfig+0x778>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b36:	e050      	b.n	8001bda <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e04f      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b44:	4b27      	ldr	r3, [pc, #156]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d144      	bne.n	8001bda <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b50:	4b24      	ldr	r3, [pc, #144]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5c:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a20      	ldr	r2, [pc, #128]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b68:	f7ff f89e 	bl	8000ca8 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f89a 	bl	8000ca8 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e02c      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b18      	ldr	r3, [pc, #96]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x7ac>
 8001b8e:	e024      	b.n	8001bda <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b0c      	cmp	r3, #12
 8001b94:	d01f      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b96:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001b9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ba0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba2:	f7ff f881 	bl	8000ca8 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ba8:	e008      	b.n	8001bbc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001baa:	f7ff f87d 	bl	8000ca8 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d901      	bls.n	8001bbc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	e00f      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f0      	bne.n	8001baa <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001bc8:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	4905      	ldr	r1, [pc, #20]	; (8001be4 <HAL_RCC_OscConfig+0x820>)
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <HAL_RCC_OscConfig+0x824>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60cb      	str	r3, [r1, #12]
 8001bd4:	e001      	b.n	8001bda <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e000      	b.n	8001bdc <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001bda:	2300      	movs	r3, #0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3720      	adds	r7, #32
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40021000 	.word	0x40021000
 8001be8:	feeefffc 	.word	0xfeeefffc

08001bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0e7      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c00:	4b75      	ldr	r3, [pc, #468]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d910      	bls.n	8001c30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0e:	4b72      	ldr	r3, [pc, #456]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f023 0207 	bic.w	r2, r3, #7
 8001c16:	4970      	ldr	r1, [pc, #448]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b6e      	ldr	r3, [pc, #440]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0cf      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d010      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b66      	ldr	r3, [pc, #408]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d908      	bls.n	8001c5e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b63      	ldr	r3, [pc, #396]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4960      	ldr	r1, [pc, #384]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d04c      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c72:	4b5a      	ldr	r3, [pc, #360]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d121      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0a6      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c8a:	4b54      	ldr	r3, [pc, #336]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d115      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e09a      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e08e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb2:	4b4a      	ldr	r3, [pc, #296]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e086      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cc2:	4b46      	ldr	r3, [pc, #280]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f023 0203 	bic.w	r2, r3, #3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4943      	ldr	r1, [pc, #268]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd4:	f7fe ffe8 	bl	8000ca8 <HAL_GetTick>
 8001cd8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	e00a      	b.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cdc:	f7fe ffe4 	bl	8000ca8 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e06e      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf2:	4b3a      	ldr	r3, [pc, #232]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f003 020c 	and.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d1eb      	bne.n	8001cdc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d010      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d208      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d20:	4b2e      	ldr	r3, [pc, #184]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	492b      	ldr	r1, [pc, #172]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d32:	4b29      	ldr	r3, [pc, #164]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	683a      	ldr	r2, [r7, #0]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d210      	bcs.n	8001d62 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d40:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f023 0207 	bic.w	r2, r3, #7
 8001d48:	4923      	ldr	r1, [pc, #140]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d50:	4b21      	ldr	r3, [pc, #132]	; (8001dd8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d001      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e036      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0304 	and.w	r3, r3, #4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	4918      	ldr	r1, [pc, #96]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0308 	and.w	r3, r3, #8
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d009      	beq.n	8001da0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	00db      	lsls	r3, r3, #3
 8001d9a:	4910      	ldr	r1, [pc, #64]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001da0:	f000 f824 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8001da4:	4602      	mov	r2, r0
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <HAL_RCC_ClockConfig+0x1f0>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	490b      	ldr	r1, [pc, #44]	; (8001de0 <HAL_RCC_ClockConfig+0x1f4>)
 8001db2:	5ccb      	ldrb	r3, [r1, r3]
 8001db4:	f003 031f 	and.w	r3, r3, #31
 8001db8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dbc:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001dc0:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <HAL_RCC_ClockConfig+0x1fc>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe ff1f 	bl	8000c08 <HAL_InitTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	72fb      	strb	r3, [r7, #11]

  return status;
 8001dce:	7afb      	ldrb	r3, [r7, #11]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40022000 	.word	0x40022000
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	08003c64 	.word	0x08003c64
 8001de4:	20000000 	.word	0x20000000
 8001de8:	20000004 	.word	0x20000004

08001dec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	2300      	movs	r3, #0
 8001df8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	f003 030c 	and.w	r3, r3, #12
 8001e02:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e04:	4b3b      	ldr	r3, [pc, #236]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d005      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x34>
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b0c      	cmp	r3, #12
 8001e18:	d121      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d11e      	bne.n	8001e5e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e20:	4b34      	ldr	r3, [pc, #208]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0308 	and.w	r3, r3, #8
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d107      	bne.n	8001e3c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e2c:	4b31      	ldr	r3, [pc, #196]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	e005      	b.n	8001e48 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e3c:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 030f 	and.w	r3, r3, #15
 8001e46:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e48:	4a2b      	ldr	r2, [pc, #172]	; (8001ef8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e5c:	e00a      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d102      	bne.n	8001e6a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e64:	4b25      	ldr	r3, [pc, #148]	; (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e66:	61bb      	str	r3, [r7, #24]
 8001e68:	e004      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e72:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	2b0c      	cmp	r3, #12
 8001e78:	d134      	bne.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e7a:	4b1e      	ldr	r3, [pc, #120]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d003      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d003      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0xac>
 8001e90:	e005      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e92:	4b1a      	ldr	r3, [pc, #104]	; (8001efc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e94:	617b      	str	r3, [r7, #20]
      break;
 8001e96:	e005      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e98:	4b19      	ldr	r3, [pc, #100]	; (8001f00 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9a:	617b      	str	r3, [r7, #20]
      break;
 8001e9c:	e002      	b.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	617b      	str	r3, [r7, #20]
      break;
 8001ea2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	091b      	lsrs	r3, r3, #4
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	3301      	adds	r3, #1
 8001eb0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eb2:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	fb03 f202 	mul.w	r2, r3, r2
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ec8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001eca:	4b0a      	ldr	r3, [pc, #40]	; (8001ef4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ecc:	68db      	ldr	r3, [r3, #12]
 8001ece:	0e5b      	lsrs	r3, r3, #25
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eda:	697a      	ldr	r2, [r7, #20]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ee4:	69bb      	ldr	r3, [r7, #24]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3724      	adds	r7, #36	; 0x24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	08003c7c 	.word	0x08003c7c
 8001efc:	00f42400 	.word	0x00f42400
 8001f00:	007a1200 	.word	0x007a1200

08001f04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000000 	.word	0x20000000

08001f1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	f003 0307 	and.w	r3, r3, #7
 8001f30:	4904      	ldr	r1, [pc, #16]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08003c74 	.word	0x08003c74

08001f48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f4c:	f7ff ffda 	bl	8001f04 <HAL_RCC_GetHCLKFreq>
 8001f50:	4602      	mov	r2, r0
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	0adb      	lsrs	r3, r3, #11
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	4904      	ldr	r1, [pc, #16]	; (8001f70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f5e:	5ccb      	ldrb	r3, [r1, r3]
 8001f60:	f003 031f 	and.w	r3, r3, #31
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	08003c74 	.word	0x08003c74

08001f74 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f8c:	f7ff f9b6 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 8001f90:	6178      	str	r0, [r7, #20]
 8001f92:	e014      	b.n	8001fbe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b25      	ldr	r3, [pc, #148]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a24      	ldr	r2, [pc, #144]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001fac:	f7ff f9a6 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 8001fb0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	; (800202c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fc4:	d10b      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d919      	bls.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2ba0      	cmp	r3, #160	; 0xa0
 8001fd0:	d902      	bls.n	8001fd8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	e013      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fd8:	2301      	movs	r3, #1
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e010      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d902      	bls.n	8001fea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	e00a      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b80      	cmp	r3, #128	; 0x80
 8001fee:	d102      	bne.n	8001ff6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
 8001ff4:	e004      	b.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b70      	cmp	r3, #112	; 0x70
 8001ffa:	d101      	bne.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002000:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0207 	bic.w	r2, r3, #7
 8002008:	4909      	ldr	r1, [pc, #36]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002010:	4b07      	ldr	r3, [pc, #28]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	40022000 	.word	0x40022000

08002034 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800203c:	2300      	movs	r3, #0
 800203e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002040:	2300      	movs	r3, #0
 8002042:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800204c:	2b00      	cmp	r3, #0
 800204e:	d031      	beq.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002054:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002058:	d01a      	beq.n	8002090 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800205a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800205e:	d814      	bhi.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002064:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002068:	d10f      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800206a:	4b5d      	ldr	r3, [pc, #372]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800206c:	68db      	ldr	r3, [r3, #12]
 800206e:	4a5c      	ldr	r2, [pc, #368]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002076:	e00c      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	3304      	adds	r3, #4
 800207c:	2100      	movs	r1, #0
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f9ce 	bl	8002420 <RCCEx_PLLSAI1_Config>
 8002084:	4603      	mov	r3, r0
 8002086:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002088:	e003      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	74fb      	strb	r3, [r7, #19]
      break;
 800208e:	e000      	b.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002092:	7cfb      	ldrb	r3, [r7, #19]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d10b      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002098:	4b51      	ldr	r3, [pc, #324]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800209e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020a6:	494e      	ldr	r1, [pc, #312]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80020ae:	e001      	b.n	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020b0:	7cfb      	ldrb	r3, [r7, #19]
 80020b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f000 809e 	beq.w	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c2:	2300      	movs	r3, #0
 80020c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020c6:	4b46      	ldr	r3, [pc, #280]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e000      	b.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020d6:	2300      	movs	r3, #0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d00d      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	4a3f      	ldr	r2, [pc, #252]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e6:	6593      	str	r3, [r2, #88]	; 0x58
 80020e8:	4b3d      	ldr	r3, [pc, #244]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f4:	2301      	movs	r3, #1
 80020f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f8:	4b3a      	ldr	r3, [pc, #232]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a39      	ldr	r2, [pc, #228]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002102:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002104:	f7fe fdd0 	bl	8000ca8 <HAL_GetTick>
 8002108:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800210a:	e009      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210c:	f7fe fdcc 	bl	8000ca8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d902      	bls.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	74fb      	strb	r3, [r7, #19]
        break;
 800211e:	e005      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002120:	4b30      	ldr	r3, [pc, #192]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0ef      	beq.n	800210c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800212c:	7cfb      	ldrb	r3, [r7, #19]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d15a      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002132:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002138:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800213c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d01e      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	429a      	cmp	r2, r3
 800214c:	d019      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800214e:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002158:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800215a:	4b21      	ldr	r3, [pc, #132]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	4a1f      	ldr	r2, [pc, #124]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800216a:	4b1d      	ldr	r3, [pc, #116]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800217a:	4a19      	ldr	r2, [pc, #100]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d016      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fd8c 	bl	8000ca8 <HAL_GetTick>
 8002190:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002192:	e00b      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002194:	f7fe fd88 	bl	8000ca8 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d902      	bls.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	74fb      	strb	r3, [r7, #19]
            break;
 80021aa:	e006      	b.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0ec      	beq.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021ba:	7cfb      	ldrb	r3, [r7, #19]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d10b      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021ce:	4904      	ldr	r1, [pc, #16]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021d6:	e009      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021d8:	7cfb      	ldrb	r3, [r7, #19]
 80021da:	74bb      	strb	r3, [r7, #18]
 80021dc:	e006      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000
 80021e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ec:	7c7b      	ldrb	r3, [r7, #17]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d105      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f2:	4b8a      	ldr	r3, [pc, #552]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f6:	4a89      	ldr	r2, [pc, #548]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800220a:	4b84      	ldr	r3, [pc, #528]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f023 0203 	bic.w	r2, r3, #3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	4980      	ldr	r1, [pc, #512]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00a      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800222c:	4b7b      	ldr	r3, [pc, #492]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 020c 	bic.w	r2, r3, #12
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223a:	4978      	ldr	r1, [pc, #480]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00a      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800224e:	4b73      	ldr	r3, [pc, #460]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	496f      	ldr	r1, [pc, #444]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002270:	4b6a      	ldr	r3, [pc, #424]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800227e:	4967      	ldr	r1, [pc, #412]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002280:	4313      	orrs	r3, r2
 8002282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800228e:	2b00      	cmp	r3, #0
 8002290:	d00a      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002292:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	495e      	ldr	r1, [pc, #376]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d00a      	beq.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c2:	4956      	ldr	r1, [pc, #344]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00a      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022d6:	4b51      	ldr	r3, [pc, #324]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d028      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022f8:	4b48      	ldr	r3, [pc, #288]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4945      	ldr	r1, [pc, #276]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002308:	4313      	orrs	r3, r2
 800230a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002316:	d106      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002318:	4b40      	ldr	r3, [pc, #256]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4a3f      	ldr	r2, [pc, #252]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800231e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002322:	60d3      	str	r3, [r2, #12]
 8002324:	e011      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800232e:	d10c      	bne.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f000 f872 	bl	8002420 <RCCEx_PLLSAI1_Config>
 800233c:	4603      	mov	r3, r0
 800233e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d028      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002356:	4b31      	ldr	r3, [pc, #196]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	492d      	ldr	r1, [pc, #180]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002366:	4313      	orrs	r3, r2
 8002368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002374:	d106      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002376:	4b29      	ldr	r3, [pc, #164]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	4a28      	ldr	r2, [pc, #160]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800237c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002380:	60d3      	str	r3, [r2, #12]
 8002382:	e011      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002388:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800238c:	d10c      	bne.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	3304      	adds	r3, #4
 8002392:	2101      	movs	r1, #1
 8002394:	4618      	mov	r0, r3
 8002396:	f000 f843 	bl	8002420 <RCCEx_PLLSAI1_Config>
 800239a:	4603      	mov	r3, r0
 800239c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800239e:	7cfb      	ldrb	r3, [r7, #19]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01c      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023c2:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023d2:	d10c      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	2102      	movs	r1, #2
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 f820 	bl	8002420 <RCCEx_PLLSAI1_Config>
 80023e0:	4603      	mov	r3, r0
 80023e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80023ea:	7cfb      	ldrb	r3, [r7, #19]
 80023ec:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002400:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002408:	4904      	ldr	r1, [pc, #16]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800240a:	4313      	orrs	r3, r2
 800240c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002410:	7cbb      	ldrb	r3, [r7, #18]
}
 8002412:	4618      	mov	r0, r3
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000

08002420 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800242e:	4b74      	ldr	r3, [pc, #464]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d018      	beq.n	800246c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800243a:	4b71      	ldr	r3, [pc, #452]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	f003 0203 	and.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d10d      	bne.n	8002466 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
       ||
 800244e:	2b00      	cmp	r3, #0
 8002450:	d009      	beq.n	8002466 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002452:	4b6b      	ldr	r3, [pc, #428]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	091b      	lsrs	r3, r3, #4
 8002458:	f003 0307 	and.w	r3, r3, #7
 800245c:	1c5a      	adds	r2, r3, #1
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
       ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d047      	beq.n	80024f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	e044      	b.n	80024f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d018      	beq.n	80024a6 <RCCEx_PLLSAI1_Config+0x86>
 8002474:	2b03      	cmp	r3, #3
 8002476:	d825      	bhi.n	80024c4 <RCCEx_PLLSAI1_Config+0xa4>
 8002478:	2b01      	cmp	r3, #1
 800247a:	d002      	beq.n	8002482 <RCCEx_PLLSAI1_Config+0x62>
 800247c:	2b02      	cmp	r3, #2
 800247e:	d009      	beq.n	8002494 <RCCEx_PLLSAI1_Config+0x74>
 8002480:	e020      	b.n	80024c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002482:	4b5f      	ldr	r3, [pc, #380]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d11d      	bne.n	80024ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002492:	e01a      	b.n	80024ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002494:	4b5a      	ldr	r3, [pc, #360]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249c:	2b00      	cmp	r3, #0
 800249e:	d116      	bne.n	80024ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024a4:	e013      	b.n	80024ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024a6:	4b56      	ldr	r3, [pc, #344]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10f      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024b2:	4b53      	ldr	r3, [pc, #332]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d109      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024c2:	e006      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
      break;
 80024c8:	e004      	b.n	80024d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ca:	bf00      	nop
 80024cc:	e002      	b.n	80024d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024ce:	bf00      	nop
 80024d0:	e000      	b.n	80024d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d10d      	bne.n	80024f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024da:	4b49      	ldr	r3, [pc, #292]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6819      	ldr	r1, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	430b      	orrs	r3, r1
 80024f0:	4943      	ldr	r1, [pc, #268]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d17c      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80024fc:	4b40      	ldr	r3, [pc, #256]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3f      	ldr	r2, [pc, #252]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002502:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002506:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002508:	f7fe fbce 	bl	8000ca8 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800250e:	e009      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002510:	f7fe fbca 	bl	8000ca8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d902      	bls.n	8002524 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	73fb      	strb	r3, [r7, #15]
        break;
 8002522:	e005      	b.n	8002530 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002524:	4b36      	ldr	r3, [pc, #216]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1ef      	bne.n	8002510 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d15f      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d110      	bne.n	800255e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002544:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6892      	ldr	r2, [r2, #8]
 800254c:	0211      	lsls	r1, r2, #8
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	68d2      	ldr	r2, [r2, #12]
 8002552:	06d2      	lsls	r2, r2, #27
 8002554:	430a      	orrs	r2, r1
 8002556:	492a      	ldr	r1, [pc, #168]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002558:	4313      	orrs	r3, r2
 800255a:	610b      	str	r3, [r1, #16]
 800255c:	e027      	b.n	80025ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d112      	bne.n	800258a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002564:	4b26      	ldr	r3, [pc, #152]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800256c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6892      	ldr	r2, [r2, #8]
 8002574:	0211      	lsls	r1, r2, #8
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6912      	ldr	r2, [r2, #16]
 800257a:	0852      	lsrs	r2, r2, #1
 800257c:	3a01      	subs	r2, #1
 800257e:	0552      	lsls	r2, r2, #21
 8002580:	430a      	orrs	r2, r1
 8002582:	491f      	ldr	r1, [pc, #124]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002584:	4313      	orrs	r3, r2
 8002586:	610b      	str	r3, [r1, #16]
 8002588:	e011      	b.n	80025ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800258a:	4b1d      	ldr	r3, [pc, #116]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002592:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	6892      	ldr	r2, [r2, #8]
 800259a:	0211      	lsls	r1, r2, #8
 800259c:	687a      	ldr	r2, [r7, #4]
 800259e:	6952      	ldr	r2, [r2, #20]
 80025a0:	0852      	lsrs	r2, r2, #1
 80025a2:	3a01      	subs	r2, #1
 80025a4:	0652      	lsls	r2, r2, #25
 80025a6:	430a      	orrs	r2, r1
 80025a8:	4915      	ldr	r1, [pc, #84]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025ae:	4b14      	ldr	r3, [pc, #80]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a13      	ldr	r2, [pc, #76]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7fe fb75 	bl	8000ca8 <HAL_GetTick>
 80025be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c0:	e009      	b.n	80025d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025c2:	f7fe fb71 	bl	8000ca8 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d902      	bls.n	80025d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	73fb      	strb	r3, [r7, #15]
          break;
 80025d4:	e005      	b.n	80025e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025d6:	4b0a      	ldr	r3, [pc, #40]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d0ef      	beq.n	80025c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d106      	bne.n	80025f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025e8:	4b05      	ldr	r3, [pc, #20]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000

08002604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b082      	sub	sp, #8
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d101      	bne.n	8002616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e040      	b.n	8002698 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261a:	2b00      	cmp	r3, #0
 800261c:	d106      	bne.n	800262c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f7fe fa4c 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2224      	movs	r2, #36	; 0x24
 8002630:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 0201 	bic.w	r2, r2, #1
 8002640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fc22 	bl	8002e8c <UART_SetConfig>
 8002648:	4603      	mov	r3, r0
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e022      	b.n	8002698 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d002      	beq.n	8002660 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fe42 	bl	80032e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800266e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800267e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 fec9 	bl	8003428 <UART_CheckIdleState>
 8002696:	4603      	mov	r3, r0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026b4:	2b20      	cmp	r3, #32
 80026b6:	f040 8082 	bne.w	80027be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <HAL_UART_Transmit+0x26>
 80026c0:	88fb      	ldrh	r3, [r7, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e07a      	b.n	80027c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_UART_Transmit+0x38>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e073      	b.n	80027c0 <HAL_UART_Transmit+0x120>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2221      	movs	r2, #33	; 0x21
 80026ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80026ee:	f7fe fadb 	bl	8000ca8 <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	88fa      	ldrh	r2, [r7, #6]
 80026f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	88fa      	ldrh	r2, [r7, #6]
 8002700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270c:	d108      	bne.n	8002720 <HAL_UART_Transmit+0x80>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d104      	bne.n	8002720 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	61bb      	str	r3, [r7, #24]
 800271e:	e003      	b.n	8002728 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002724:	2300      	movs	r3, #0
 8002726:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002730:	e02d      	b.n	800278e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	9300      	str	r3, [sp, #0]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2200      	movs	r2, #0
 800273a:	2180      	movs	r1, #128	; 0x80
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 febc 	bl	80034ba <UART_WaitOnFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e039      	b.n	80027c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10b      	bne.n	800276a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	881a      	ldrh	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800275e:	b292      	uxth	r2, r2
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	3302      	adds	r3, #2
 8002766:	61bb      	str	r3, [r7, #24]
 8002768:	e008      	b.n	800277c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	781a      	ldrb	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	b292      	uxth	r2, r2
 8002774:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	3301      	adds	r3, #1
 800277a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1cb      	bne.n	8002732 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2200      	movs	r2, #0
 80027a2:	2140      	movs	r1, #64	; 0x40
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 fe88 	bl	80034ba <UART_WaitOnFlagUntilTimeout>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e005      	b.n	80027c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80027ba:	2300      	movs	r3, #0
 80027bc:	e000      	b.n	80027c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80027be:	2302      	movs	r3, #2
  }
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3720      	adds	r7, #32
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	4613      	mov	r3, r2
 80027d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d142      	bne.n	8002864 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_UART_Receive_IT+0x22>
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e03b      	b.n	8002866 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Receive_IT+0x34>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e034      	b.n	8002866 <HAL_UART_Receive_IT+0x9e>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a18      	ldr	r2, [pc, #96]	; (8002870 <HAL_UART_Receive_IT+0xa8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d01f      	beq.n	8002854 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d018      	beq.n	8002854 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	e853 3f00 	ldrex	r3, [r3]
 800282e:	613b      	str	r3, [r7, #16]
   return(result);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002844:	69f9      	ldr	r1, [r7, #28]
 8002846:	6a3a      	ldr	r2, [r7, #32]
 8002848:	e841 2300 	strex	r3, r2, [r1]
 800284c:	61bb      	str	r3, [r7, #24]
   return(result);
 800284e:	69bb      	ldr	r3, [r7, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e6      	bne.n	8002822 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002854:	88fb      	ldrh	r3, [r7, #6]
 8002856:	461a      	mov	r2, r3
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fef2 	bl	8003644 <UART_Start_Receive_IT>
 8002860:	4603      	mov	r3, r0
 8002862:	e000      	b.n	8002866 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3728      	adds	r7, #40	; 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40008000 	.word	0x40008000

08002874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b0ba      	sub	sp, #232	; 0xe8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800289a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800289e:	f640 030f 	movw	r3, #2063	; 0x80f
 80028a2:	4013      	ands	r3, r2
 80028a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80028a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d115      	bne.n	80028dc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80028b4:	f003 0320 	and.w	r3, r3, #32
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00f      	beq.n	80028dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80028c0:	f003 0320 	and.w	r3, r3, #32
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d009      	beq.n	80028dc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 82a6 	beq.w	8002e1e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	4798      	blx	r3
      }
      return;
 80028da:	e2a0      	b.n	8002e1e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80028dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f000 8117 	beq.w	8002b14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80028e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80028f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80028f6:	4b85      	ldr	r3, [pc, #532]	; (8002b0c <HAL_UART_IRQHandler+0x298>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 810a 	beq.w	8002b14 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d011      	beq.n	8002930 <HAL_UART_IRQHandler+0xbc>
 800290c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002926:	f043 0201 	orr.w	r2, r3, #1
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d011      	beq.n	8002960 <HAL_UART_IRQHandler+0xec>
 800293c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00b      	beq.n	8002960 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2202      	movs	r2, #2
 800294e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002956:	f043 0204 	orr.w	r2, r3, #4
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d011      	beq.n	8002990 <HAL_UART_IRQHandler+0x11c>
 800296c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00b      	beq.n	8002990 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2204      	movs	r2, #4
 800297e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d017      	beq.n	80029cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800299c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a0:	f003 0320 	and.w	r3, r3, #32
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d105      	bne.n	80029b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00b      	beq.n	80029cc <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	2208      	movs	r2, #8
 80029ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029c2:	f043 0208 	orr.w	r2, r3, #8
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d012      	beq.n	80029fe <HAL_UART_IRQHandler+0x18a>
 80029d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00c      	beq.n	80029fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 820c 	beq.w	8002e22 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a0e:	f003 0320 	and.w	r3, r3, #32
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00d      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1a:	f003 0320 	and.w	r3, r3, #32
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d003      	beq.n	8002a32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d005      	beq.n	8002a56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002a4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d04f      	beq.n	8002af6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f000 febe 	bl	80037d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a66:	2b40      	cmp	r3, #64	; 0x40
 8002a68:	d141      	bne.n	8002aee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002a78:	e853 3f00 	ldrex	r3, [r3]
 8002a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3308      	adds	r3, #8
 8002a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002a96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002aa6:	e841 2300 	strex	r3, r2, [r1]
 8002aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1d9      	bne.n	8002a6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d013      	beq.n	8002ae6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	4a13      	ldr	r2, [pc, #76]	; (8002b10 <HAL_UART_IRQHandler+0x29c>)
 8002ac4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7fe fa6b 	bl	8000fa6 <HAL_DMA_Abort_IT>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d017      	beq.n	8002b06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae4:	e00f      	b.n	8002b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f9ba 	bl	8002e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002aec:	e00b      	b.n	8002b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f9b6 	bl	8002e60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af4:	e007      	b.n	8002b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f9b2 	bl	8002e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002b04:	e18d      	b.n	8002e22 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b06:	bf00      	nop
    return;
 8002b08:	e18b      	b.n	8002e22 <HAL_UART_IRQHandler+0x5ae>
 8002b0a:	bf00      	nop
 8002b0c:	04000120 	.word	0x04000120
 8002b10:	0800389f 	.word	0x0800389f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 8146 	bne.w	8002daa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 813f 	beq.w	8002daa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 8138 	beq.w	8002daa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2210      	movs	r2, #16
 8002b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	f040 80b4 	bne.w	8002cba <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002b5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f000 815f 	beq.w	8002e26 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b72:	429a      	cmp	r2, r3
 8002b74:	f080 8157 	bcs.w	8002e26 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	f040 8085 	bne.w	8002c9e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba0:	e853 3f00 	ldrex	r3, [r3]
 8002ba4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ba8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bc2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002bca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002bce:	e841 2300 	strex	r3, r2, [r1]
 8002bd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002bd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d1da      	bne.n	8002b94 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	3308      	adds	r3, #8
 8002be4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be8:	e853 3f00 	ldrex	r3, [r3]
 8002bec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002bee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002bf0:	f023 0301 	bic.w	r3, r3, #1
 8002bf4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002c02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002c06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002c0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e1      	bne.n	8002bde <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3308      	adds	r3, #8
 8002c20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c24:	e853 3f00 	ldrex	r3, [r3]
 8002c28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	3308      	adds	r3, #8
 8002c3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002c3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002c40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002c46:	e841 2300 	strex	r3, r2, [r1]
 8002c4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002c4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1e3      	bne.n	8002c1a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2220      	movs	r2, #32
 8002c56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c66:	e853 3f00 	ldrex	r3, [r3]
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002c6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c6e:	f023 0310 	bic.w	r3, r3, #16
 8002c72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c80:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c82:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002c86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002c88:	e841 2300 	strex	r3, r2, [r1]
 8002c8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002c8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e4      	bne.n	8002c5e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fe f946 	bl	8000f2a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8de 	bl	8002e74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cb8:	e0b5      	b.n	8002e26 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 80a7 	beq.w	8002e2a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002cdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	f000 80a2 	beq.w	8002e2a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	461a      	mov	r2, r3
 8002d04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002d08:	647b      	str	r3, [r7, #68]	; 0x44
 8002d0a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e4      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3308      	adds	r3, #8
 8002d22:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	e853 3f00 	ldrex	r3, [r3]
 8002d2a:	623b      	str	r3, [r7, #32]
   return(result);
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f023 0301 	bic.w	r3, r3, #1
 8002d32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002d40:	633a      	str	r2, [r7, #48]	; 0x30
 8002d42:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002d46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d48:	e841 2300 	strex	r3, r2, [r1]
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1e3      	bne.n	8002d1c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	f023 0310 	bic.w	r3, r3, #16
 8002d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d8c:	69b9      	ldr	r1, [r7, #24]
 8002d8e:	69fa      	ldr	r2, [r7, #28]
 8002d90:	e841 2300 	strex	r3, r2, [r1]
 8002d94:	617b      	str	r3, [r7, #20]
   return(result);
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1e4      	bne.n	8002d66 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002da0:	4619      	mov	r1, r3
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f000 f866 	bl	8002e74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002da8:	e03f      	b.n	8002e2a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00e      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x560>
 8002db6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d008      	beq.n	8002dd4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002dca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f000 ff06 	bl	8003bde <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dd2:	e02d      	b.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00e      	beq.n	8002dfe <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d008      	beq.n	8002dfe <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d01c      	beq.n	8002e2e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
    }
    return;
 8002dfc:	e017      	b.n	8002e2e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d012      	beq.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
 8002e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 fd57 	bl	80038ca <UART_EndTransmit_IT>
    return;
 8002e1c:	e008      	b.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002e1e:	bf00      	nop
 8002e20:	e006      	b.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002e22:	bf00      	nop
 8002e24:	e004      	b.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002e26:	bf00      	nop
 8002e28:	e002      	b.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
      return;
 8002e2a:	bf00      	nop
 8002e2c:	e000      	b.n	8002e30 <HAL_UART_IRQHandler+0x5bc>
    return;
 8002e2e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002e30:	37e8      	adds	r7, #232	; 0xe8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop

08002e38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002e40:	bf00      	nop
 8002e42:	370c      	adds	r7, #12
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b08a      	sub	sp, #40	; 0x28
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	69db      	ldr	r3, [r3, #28]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	4bb4      	ldr	r3, [pc, #720]	; (800318c <UART_SetConfig+0x300>)
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	6812      	ldr	r2, [r2, #0]
 8002ec2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec4:	430b      	orrs	r3, r1
 8002ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	68da      	ldr	r2, [r3, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4aa9      	ldr	r2, [pc, #676]	; (8003190 <UART_SetConfig+0x304>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d004      	beq.n	8002ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4aa0      	ldr	r2, [pc, #640]	; (8003194 <UART_SetConfig+0x308>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d126      	bne.n	8002f64 <UART_SetConfig+0xd8>
 8002f16:	4ba0      	ldr	r3, [pc, #640]	; (8003198 <UART_SetConfig+0x30c>)
 8002f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d81b      	bhi.n	8002f5c <UART_SetConfig+0xd0>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <UART_SetConfig+0xa0>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4d 	.word	0x08002f4d
 8002f34:	08002f45 	.word	0x08002f45
 8002f38:	08002f55 	.word	0x08002f55
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f42:	e080      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002f44:	2302      	movs	r3, #2
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4a:	e07c      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f52:	e078      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002f54:	2308      	movs	r3, #8
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5a:	e074      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002f5c:	2310      	movs	r3, #16
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f62:	e070      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a8c      	ldr	r2, [pc, #560]	; (800319c <UART_SetConfig+0x310>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d138      	bne.n	8002fe0 <UART_SetConfig+0x154>
 8002f6e:	4b8a      	ldr	r3, [pc, #552]	; (8003198 <UART_SetConfig+0x30c>)
 8002f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f74:	f003 030c 	and.w	r3, r3, #12
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d82d      	bhi.n	8002fd8 <UART_SetConfig+0x14c>
 8002f7c:	a201      	add	r2, pc, #4	; (adr r2, 8002f84 <UART_SetConfig+0xf8>)
 8002f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f82:	bf00      	nop
 8002f84:	08002fb9 	.word	0x08002fb9
 8002f88:	08002fd9 	.word	0x08002fd9
 8002f8c:	08002fd9 	.word	0x08002fd9
 8002f90:	08002fd9 	.word	0x08002fd9
 8002f94:	08002fc9 	.word	0x08002fc9
 8002f98:	08002fd9 	.word	0x08002fd9
 8002f9c:	08002fd9 	.word	0x08002fd9
 8002fa0:	08002fd9 	.word	0x08002fd9
 8002fa4:	08002fc1 	.word	0x08002fc1
 8002fa8:	08002fd9 	.word	0x08002fd9
 8002fac:	08002fd9 	.word	0x08002fd9
 8002fb0:	08002fd9 	.word	0x08002fd9
 8002fb4:	08002fd1 	.word	0x08002fd1
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e042      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002fc0:	2302      	movs	r3, #2
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e03e      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002fc8:	2304      	movs	r3, #4
 8002fca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fce:	e03a      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002fd0:	2308      	movs	r3, #8
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	e036      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fde:	e032      	b.n	8003046 <UART_SetConfig+0x1ba>
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a6a      	ldr	r2, [pc, #424]	; (8003190 <UART_SetConfig+0x304>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d12a      	bne.n	8003040 <UART_SetConfig+0x1b4>
 8002fea:	4b6b      	ldr	r3, [pc, #428]	; (8003198 <UART_SetConfig+0x30c>)
 8002fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ff4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ff8:	d01a      	beq.n	8003030 <UART_SetConfig+0x1a4>
 8002ffa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ffe:	d81b      	bhi.n	8003038 <UART_SetConfig+0x1ac>
 8003000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003004:	d00c      	beq.n	8003020 <UART_SetConfig+0x194>
 8003006:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800300a:	d815      	bhi.n	8003038 <UART_SetConfig+0x1ac>
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <UART_SetConfig+0x18c>
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d008      	beq.n	8003028 <UART_SetConfig+0x19c>
 8003016:	e00f      	b.n	8003038 <UART_SetConfig+0x1ac>
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301e:	e012      	b.n	8003046 <UART_SetConfig+0x1ba>
 8003020:	2302      	movs	r3, #2
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003026:	e00e      	b.n	8003046 <UART_SetConfig+0x1ba>
 8003028:	2304      	movs	r3, #4
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800302e:	e00a      	b.n	8003046 <UART_SetConfig+0x1ba>
 8003030:	2308      	movs	r3, #8
 8003032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003036:	e006      	b.n	8003046 <UART_SetConfig+0x1ba>
 8003038:	2310      	movs	r3, #16
 800303a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303e:	e002      	b.n	8003046 <UART_SetConfig+0x1ba>
 8003040:	2310      	movs	r3, #16
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a51      	ldr	r2, [pc, #324]	; (8003190 <UART_SetConfig+0x304>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d17a      	bne.n	8003146 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003050:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003054:	2b08      	cmp	r3, #8
 8003056:	d824      	bhi.n	80030a2 <UART_SetConfig+0x216>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <UART_SetConfig+0x1d4>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003085 	.word	0x08003085
 8003064:	080030a3 	.word	0x080030a3
 8003068:	0800308d 	.word	0x0800308d
 800306c:	080030a3 	.word	0x080030a3
 8003070:	08003093 	.word	0x08003093
 8003074:	080030a3 	.word	0x080030a3
 8003078:	080030a3 	.word	0x080030a3
 800307c:	080030a3 	.word	0x080030a3
 8003080:	0800309b 	.word	0x0800309b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003084:	f7fe ff4a 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003088:	61f8      	str	r0, [r7, #28]
        break;
 800308a:	e010      	b.n	80030ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800308c:	4b44      	ldr	r3, [pc, #272]	; (80031a0 <UART_SetConfig+0x314>)
 800308e:	61fb      	str	r3, [r7, #28]
        break;
 8003090:	e00d      	b.n	80030ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003092:	f7fe feab 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003096:	61f8      	str	r0, [r7, #28]
        break;
 8003098:	e009      	b.n	80030ae <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800309e:	61fb      	str	r3, [r7, #28]
        break;
 80030a0:	e005      	b.n	80030ae <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80030ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 8107 	beq.w	80032c4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d305      	bcc.n	80030d2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d903      	bls.n	80030da <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030d8:	e0f4      	b.n	80032c4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2200      	movs	r2, #0
 80030de:	461c      	mov	r4, r3
 80030e0:	4615      	mov	r5, r2
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	022b      	lsls	r3, r5, #8
 80030ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030f0:	0222      	lsls	r2, r4, #8
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	6849      	ldr	r1, [r1, #4]
 80030f6:	0849      	lsrs	r1, r1, #1
 80030f8:	2000      	movs	r0, #0
 80030fa:	4688      	mov	r8, r1
 80030fc:	4681      	mov	r9, r0
 80030fe:	eb12 0a08 	adds.w	sl, r2, r8
 8003102:	eb43 0b09 	adc.w	fp, r3, r9
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003114:	4650      	mov	r0, sl
 8003116:	4659      	mov	r1, fp
 8003118:	f7fd f858 	bl	80001cc <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800312a:	d308      	bcc.n	800313e <UART_SetConfig+0x2b2>
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003132:	d204      	bcs.n	800313e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	e0c2      	b.n	80032c4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003144:	e0be      	b.n	80032c4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800314e:	d16a      	bne.n	8003226 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003150:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003154:	2b08      	cmp	r3, #8
 8003156:	d834      	bhi.n	80031c2 <UART_SetConfig+0x336>
 8003158:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <UART_SetConfig+0x2d4>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003185 	.word	0x08003185
 8003164:	080031a5 	.word	0x080031a5
 8003168:	080031ad 	.word	0x080031ad
 800316c:	080031c3 	.word	0x080031c3
 8003170:	080031b3 	.word	0x080031b3
 8003174:	080031c3 	.word	0x080031c3
 8003178:	080031c3 	.word	0x080031c3
 800317c:	080031c3 	.word	0x080031c3
 8003180:	080031bb 	.word	0x080031bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003184:	f7fe feca 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 8003188:	61f8      	str	r0, [r7, #28]
        break;
 800318a:	e020      	b.n	80031ce <UART_SetConfig+0x342>
 800318c:	efff69f3 	.word	0xefff69f3
 8003190:	40008000 	.word	0x40008000
 8003194:	40013800 	.word	0x40013800
 8003198:	40021000 	.word	0x40021000
 800319c:	40004400 	.word	0x40004400
 80031a0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031a4:	f7fe fed0 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 80031a8:	61f8      	str	r0, [r7, #28]
        break;
 80031aa:	e010      	b.n	80031ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ac:	4b4c      	ldr	r3, [pc, #304]	; (80032e0 <UART_SetConfig+0x454>)
 80031ae:	61fb      	str	r3, [r7, #28]
        break;
 80031b0:	e00d      	b.n	80031ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031b2:	f7fe fe1b 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 80031b6:	61f8      	str	r0, [r7, #28]
        break;
 80031b8:	e009      	b.n	80031ce <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031be:	61fb      	str	r3, [r7, #28]
        break;
 80031c0:	e005      	b.n	80031ce <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d077      	beq.n	80032c4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005a      	lsls	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	085b      	lsrs	r3, r3, #1
 80031de:	441a      	add	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	2b0f      	cmp	r3, #15
 80031ee:	d916      	bls.n	800321e <UART_SetConfig+0x392>
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f6:	d212      	bcs.n	800321e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f023 030f 	bic.w	r3, r3, #15
 8003200:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	b29b      	uxth	r3, r3
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	b29a      	uxth	r2, r3
 800320e:	8afb      	ldrh	r3, [r7, #22]
 8003210:	4313      	orrs	r3, r2
 8003212:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	8afa      	ldrh	r2, [r7, #22]
 800321a:	60da      	str	r2, [r3, #12]
 800321c:	e052      	b.n	80032c4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003224:	e04e      	b.n	80032c4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003226:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800322a:	2b08      	cmp	r3, #8
 800322c:	d827      	bhi.n	800327e <UART_SetConfig+0x3f2>
 800322e:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <UART_SetConfig+0x3a8>)
 8003230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003234:	08003259 	.word	0x08003259
 8003238:	08003261 	.word	0x08003261
 800323c:	08003269 	.word	0x08003269
 8003240:	0800327f 	.word	0x0800327f
 8003244:	0800326f 	.word	0x0800326f
 8003248:	0800327f 	.word	0x0800327f
 800324c:	0800327f 	.word	0x0800327f
 8003250:	0800327f 	.word	0x0800327f
 8003254:	08003277 	.word	0x08003277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003258:	f7fe fe60 	bl	8001f1c <HAL_RCC_GetPCLK1Freq>
 800325c:	61f8      	str	r0, [r7, #28]
        break;
 800325e:	e014      	b.n	800328a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003260:	f7fe fe72 	bl	8001f48 <HAL_RCC_GetPCLK2Freq>
 8003264:	61f8      	str	r0, [r7, #28]
        break;
 8003266:	e010      	b.n	800328a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003268:	4b1d      	ldr	r3, [pc, #116]	; (80032e0 <UART_SetConfig+0x454>)
 800326a:	61fb      	str	r3, [r7, #28]
        break;
 800326c:	e00d      	b.n	800328a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800326e:	f7fe fdbd 	bl	8001dec <HAL_RCC_GetSysClockFreq>
 8003272:	61f8      	str	r0, [r7, #28]
        break;
 8003274:	e009      	b.n	800328a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800327a:	61fb      	str	r3, [r7, #28]
        break;
 800327c:	e005      	b.n	800328a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003288:	bf00      	nop
    }

    if (pclk != 0U)
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d019      	beq.n	80032c4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	085a      	lsrs	r2, r3, #1
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	441a      	add	r2, r3
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	2b0f      	cmp	r3, #15
 80032a8:	d909      	bls.n	80032be <UART_SetConfig+0x432>
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032b0:	d205      	bcs.n	80032be <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	60da      	str	r2, [r3, #12]
 80032bc:	e002      	b.n	80032c4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2200      	movs	r2, #0
 80032ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032de:	bf00      	nop
 80032e0:	00f42400 	.word	0x00f42400

080032e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d00a      	beq.n	800330e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d00a      	beq.n	8003352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00a      	beq.n	8003374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	f003 0310 	and.w	r3, r3, #16
 800337c:	2b00      	cmp	r3, #0
 800337e:	d00a      	beq.n	8003396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	430a      	orrs	r2, r1
 8003394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d01a      	beq.n	80033fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033e2:	d10a      	bne.n	80033fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	430a      	orrs	r2, r1
 80033f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003402:	2b00      	cmp	r3, #0
 8003404:	d00a      	beq.n	800341c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	605a      	str	r2, [r3, #4]
  }
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af02      	add	r7, sp, #8
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003438:	f7fd fc36 	bl	8000ca8 <HAL_GetTick>
 800343c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0308 	and.w	r3, r3, #8
 8003448:	2b08      	cmp	r3, #8
 800344a:	d10e      	bne.n	800346a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800344c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003450:	9300      	str	r3, [sp, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f82d 	bl	80034ba <UART_WaitOnFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e023      	b.n	80034b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0304 	and.w	r3, r3, #4
 8003474:	2b04      	cmp	r3, #4
 8003476:	d10e      	bne.n	8003496 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003478:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f817 	bl	80034ba <UART_WaitOnFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e00d      	b.n	80034b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2220      	movs	r2, #32
 80034a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b09c      	sub	sp, #112	; 0x70
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	603b      	str	r3, [r7, #0]
 80034c6:	4613      	mov	r3, r2
 80034c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ca:	e0a5      	b.n	8003618 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d2:	f000 80a1 	beq.w	8003618 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fd fbe7 	bl	8000ca8 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <UART_WaitOnFlagUntilTimeout+0x32>
 80034e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d13e      	bne.n	800356a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034f4:	e853 3f00 	ldrex	r3, [r3]
 80034f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003500:	667b      	str	r3, [r7, #100]	; 0x64
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	461a      	mov	r2, r3
 8003508:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800350a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800350c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003510:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003512:	e841 2300 	strex	r3, r2, [r1]
 8003516:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1e6      	bne.n	80034ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003528:	e853 3f00 	ldrex	r3, [r3]
 800352c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800352e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	663b      	str	r3, [r7, #96]	; 0x60
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3308      	adds	r3, #8
 800353c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800353e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800354c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e5      	bne.n	800351e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2220      	movs	r2, #32
 8003556:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2220      	movs	r2, #32
 800355c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e067      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0304 	and.w	r3, r3, #4
 8003574:	2b00      	cmp	r3, #0
 8003576:	d04f      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	69db      	ldr	r3, [r3, #28]
 800357e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003586:	d147      	bne.n	8003618 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003590:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359a:	e853 3f00 	ldrex	r3, [r3]
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	461a      	mov	r2, r3
 80035ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b0:	637b      	str	r3, [r7, #52]	; 0x34
 80035b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e6      	bne.n	8003592 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	e853 3f00 	ldrex	r3, [r3]
 80035d2:	613b      	str	r3, [r7, #16]
   return(result);
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	f023 0301 	bic.w	r3, r3, #1
 80035da:	66bb      	str	r3, [r7, #104]	; 0x68
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	3308      	adds	r3, #8
 80035e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035e4:	623a      	str	r2, [r7, #32]
 80035e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e8:	69f9      	ldr	r1, [r7, #28]
 80035ea:	6a3a      	ldr	r2, [r7, #32]
 80035ec:	e841 2300 	strex	r3, r2, [r1]
 80035f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1e5      	bne.n	80035c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2220      	movs	r2, #32
 8003602:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e010      	b.n	800363a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	69da      	ldr	r2, [r3, #28]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	4013      	ands	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	bf0c      	ite	eq
 8003628:	2301      	moveq	r3, #1
 800362a:	2300      	movne	r3, #0
 800362c:	b2db      	uxtb	r3, r3
 800362e:	461a      	mov	r2, r3
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	429a      	cmp	r2, r3
 8003634:	f43f af4a 	beq.w	80034cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3770      	adds	r7, #112	; 0x70
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003644:	b480      	push	{r7}
 8003646:	b097      	sub	sp, #92	; 0x5c
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	88fa      	ldrh	r2, [r7, #6]
 800365c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003676:	d10e      	bne.n	8003696 <UART_Start_Receive_IT+0x52>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <UART_Start_Receive_IT+0x48>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003686:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800368a:	e02d      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	22ff      	movs	r2, #255	; 0xff
 8003690:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003694:	e028      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10d      	bne.n	80036ba <UART_Start_Receive_IT+0x76>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d104      	bne.n	80036b0 <UART_Start_Receive_IT+0x6c>
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	22ff      	movs	r2, #255	; 0xff
 80036aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036ae:	e01b      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	227f      	movs	r2, #127	; 0x7f
 80036b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036b8:	e016      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036c2:	d10d      	bne.n	80036e0 <UART_Start_Receive_IT+0x9c>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d104      	bne.n	80036d6 <UART_Start_Receive_IT+0x92>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	227f      	movs	r2, #127	; 0x7f
 80036d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036d4:	e008      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	223f      	movs	r2, #63	; 0x3f
 80036da:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80036de:	e003      	b.n	80036e8 <UART_Start_Receive_IT+0xa4>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2222      	movs	r2, #34	; 0x22
 80036f4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	3308      	adds	r3, #8
 80036fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003700:	e853 3f00 	ldrex	r3, [r3]
 8003704:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	f043 0301 	orr.w	r3, r3, #1
 800370c:	657b      	str	r3, [r7, #84]	; 0x54
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	3308      	adds	r3, #8
 8003714:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003716:	64ba      	str	r2, [r7, #72]	; 0x48
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800371c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800371e:	e841 2300 	strex	r3, r2, [r1]
 8003722:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1e5      	bne.n	80036f6 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	d107      	bne.n	8003744 <UART_Start_Receive_IT+0x100>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	691b      	ldr	r3, [r3, #16]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d103      	bne.n	8003744 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4a24      	ldr	r2, [pc, #144]	; (80037d0 <UART_Start_Receive_IT+0x18c>)
 8003740:	665a      	str	r2, [r3, #100]	; 0x64
 8003742:	e002      	b.n	800374a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <UART_Start_Receive_IT+0x190>)
 8003748:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d019      	beq.n	800378e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003762:	e853 3f00 	ldrex	r3, [r3]
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800376e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	461a      	mov	r2, r3
 8003776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003778:	637b      	str	r3, [r7, #52]	; 0x34
 800377a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800377e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003780:	e841 2300 	strex	r3, r2, [r1]
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003788:	2b00      	cmp	r3, #0
 800378a:	d1e6      	bne.n	800375a <UART_Start_Receive_IT+0x116>
 800378c:	e018      	b.n	80037c0 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	e853 3f00 	ldrex	r3, [r3]
 800379a:	613b      	str	r3, [r7, #16]
   return(result);
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f043 0320 	orr.w	r3, r3, #32
 80037a2:	653b      	str	r3, [r7, #80]	; 0x50
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	461a      	mov	r2, r3
 80037aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ac:	623b      	str	r3, [r7, #32]
 80037ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b0:	69f9      	ldr	r1, [r7, #28]
 80037b2:	6a3a      	ldr	r2, [r7, #32]
 80037b4:	e841 2300 	strex	r3, r2, [r1]
 80037b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1e6      	bne.n	800378e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	375c      	adds	r7, #92	; 0x5c
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	08003a7f 	.word	0x08003a7f
 80037d4:	0800391f 	.word	0x0800391f

080037d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037d8:	b480      	push	{r7}
 80037da:	b095      	sub	sp, #84	; 0x54
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037fe:	643b      	str	r3, [r7, #64]	; 0x40
 8003800:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003804:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800380c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e6      	bne.n	80037e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	3308      	adds	r3, #8
 8003818:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	61fb      	str	r3, [r7, #28]
   return(result);
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	f023 0301 	bic.w	r3, r3, #1
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3308      	adds	r3, #8
 8003830:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003832:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003836:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383a:	e841 2300 	strex	r3, r2, [r1]
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1e5      	bne.n	8003812 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800384a:	2b01      	cmp	r3, #1
 800384c:	d118      	bne.n	8003880 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	e853 3f00 	ldrex	r3, [r3]
 800385a:	60bb      	str	r3, [r7, #8]
   return(result);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	f023 0310 	bic.w	r3, r3, #16
 8003862:	647b      	str	r3, [r7, #68]	; 0x44
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	461a      	mov	r2, r3
 800386a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003870:	6979      	ldr	r1, [r7, #20]
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	e841 2300 	strex	r3, r2, [r1]
 8003878:	613b      	str	r3, [r7, #16]
   return(result);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1e6      	bne.n	800384e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003892:	bf00      	nop
 8003894:	3754      	adds	r7, #84	; 0x54
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f7ff facf 	bl	8002e60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b088      	sub	sp, #32
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	e853 3f00 	ldrex	r3, [r3]
 80038de:	60bb      	str	r3, [r7, #8]
   return(result);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038e6:	61fb      	str	r3, [r7, #28]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	461a      	mov	r2, r3
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	61bb      	str	r3, [r7, #24]
 80038f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f4:	6979      	ldr	r1, [r7, #20]
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	e841 2300 	strex	r3, r2, [r1]
 80038fc:	613b      	str	r3, [r7, #16]
   return(result);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1e6      	bne.n	80038d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff fa91 	bl	8002e38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003916:	bf00      	nop
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b096      	sub	sp, #88	; 0x58
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800392c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003934:	2b22      	cmp	r3, #34	; 0x22
 8003936:	f040 8094 	bne.w	8003a62 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003940:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003944:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003948:	b2d9      	uxtb	r1, r3
 800394a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800394e:	b2da      	uxtb	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	400a      	ands	r2, r1
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800395e:	1c5a      	adds	r2, r3, #1
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d179      	bne.n	8003a76 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003996:	653b      	str	r3, [r7, #80]	; 0x50
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	461a      	mov	r2, r3
 800399e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039a0:	647b      	str	r3, [r7, #68]	; 0x44
 80039a2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e6      	bne.n	8003982 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3308      	adds	r3, #8
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	623b      	str	r3, [r7, #32]
   return(result);
 80039c4:	6a3b      	ldr	r3, [r7, #32]
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3308      	adds	r3, #8
 80039d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039d4:	633a      	str	r2, [r7, #48]	; 0x30
 80039d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d12e      	bne.n	8003a5a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0310 	bic.w	r3, r3, #16
 8003a16:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a20:	61fb      	str	r3, [r7, #28]
 8003a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	69b9      	ldr	r1, [r7, #24]
 8003a26:	69fa      	ldr	r2, [r7, #28]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e6      	bne.n	8003a02 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	f003 0310 	and.w	r3, r3, #16
 8003a3e:	2b10      	cmp	r3, #16
 8003a40:	d103      	bne.n	8003a4a <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2210      	movs	r2, #16
 8003a48:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fa0e 	bl	8002e74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a58:	e00d      	b.n	8003a76 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7ff f9f6 	bl	8002e4c <HAL_UART_RxCpltCallback>
}
 8003a60:	e009      	b.n	8003a76 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	8b1b      	ldrh	r3, [r3, #24]
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	b292      	uxth	r2, r2
 8003a74:	831a      	strh	r2, [r3, #24]
}
 8003a76:	bf00      	nop
 8003a78:	3758      	adds	r7, #88	; 0x58
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b096      	sub	sp, #88	; 0x58
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a94:	2b22      	cmp	r3, #34	; 0x22
 8003a96:	f040 8094 	bne.w	8003bc2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003aa0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003aaa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003aae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ab8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003abe:	1c9a      	adds	r2, r3, #2
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d179      	bne.n	8003bd6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	e853 3f00 	ldrex	r3, [r3]
 8003aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	461a      	mov	r2, r3
 8003afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b00:	643b      	str	r3, [r7, #64]	; 0x40
 8003b02:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b08:	e841 2300 	strex	r3, r2, [r1]
 8003b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1e6      	bne.n	8003ae2 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	3308      	adds	r3, #8
 8003b1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b1c:	6a3b      	ldr	r3, [r7, #32]
 8003b1e:	e853 3f00 	ldrex	r3, [r3]
 8003b22:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f023 0301 	bic.w	r3, r3, #1
 8003b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b3c:	e841 2300 	strex	r3, r2, [r1]
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1e5      	bne.n	8003b14 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d12e      	bne.n	8003bba <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	e853 3f00 	ldrex	r3, [r3]
 8003b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f023 0310 	bic.w	r3, r3, #16
 8003b76:	647b      	str	r3, [r7, #68]	; 0x44
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b80:	61bb      	str	r3, [r7, #24]
 8003b82:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b84:	6979      	ldr	r1, [r7, #20]
 8003b86:	69ba      	ldr	r2, [r7, #24]
 8003b88:	e841 2300 	strex	r3, r2, [r1]
 8003b8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1e6      	bne.n	8003b62 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0310 	and.w	r3, r3, #16
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d103      	bne.n	8003baa <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2210      	movs	r2, #16
 8003ba8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff f95e 	bl	8002e74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bb8:	e00d      	b.n	8003bd6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7ff f946 	bl	8002e4c <HAL_UART_RxCpltCallback>
}
 8003bc0:	e009      	b.n	8003bd6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	8b1b      	ldrh	r3, [r3, #24]
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0208 	orr.w	r2, r2, #8
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	831a      	strh	r2, [r3, #24]
}
 8003bd6:	bf00      	nop
 8003bd8:	3758      	adds	r7, #88	; 0x58
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
	...

08003bf4 <__libc_init_array>:
 8003bf4:	b570      	push	{r4, r5, r6, lr}
 8003bf6:	4d0d      	ldr	r5, [pc, #52]	; (8003c2c <__libc_init_array+0x38>)
 8003bf8:	4c0d      	ldr	r4, [pc, #52]	; (8003c30 <__libc_init_array+0x3c>)
 8003bfa:	1b64      	subs	r4, r4, r5
 8003bfc:	10a4      	asrs	r4, r4, #2
 8003bfe:	2600      	movs	r6, #0
 8003c00:	42a6      	cmp	r6, r4
 8003c02:	d109      	bne.n	8003c18 <__libc_init_array+0x24>
 8003c04:	4d0b      	ldr	r5, [pc, #44]	; (8003c34 <__libc_init_array+0x40>)
 8003c06:	4c0c      	ldr	r4, [pc, #48]	; (8003c38 <__libc_init_array+0x44>)
 8003c08:	f000 f820 	bl	8003c4c <_init>
 8003c0c:	1b64      	subs	r4, r4, r5
 8003c0e:	10a4      	asrs	r4, r4, #2
 8003c10:	2600      	movs	r6, #0
 8003c12:	42a6      	cmp	r6, r4
 8003c14:	d105      	bne.n	8003c22 <__libc_init_array+0x2e>
 8003c16:	bd70      	pop	{r4, r5, r6, pc}
 8003c18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c1c:	4798      	blx	r3
 8003c1e:	3601      	adds	r6, #1
 8003c20:	e7ee      	b.n	8003c00 <__libc_init_array+0xc>
 8003c22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c26:	4798      	blx	r3
 8003c28:	3601      	adds	r6, #1
 8003c2a:	e7f2      	b.n	8003c12 <__libc_init_array+0x1e>
 8003c2c:	08003cb4 	.word	0x08003cb4
 8003c30:	08003cb4 	.word	0x08003cb4
 8003c34:	08003cb4 	.word	0x08003cb4
 8003c38:	08003cb8 	.word	0x08003cb8

08003c3c <memset>:
 8003c3c:	4402      	add	r2, r0
 8003c3e:	4603      	mov	r3, r0
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d100      	bne.n	8003c46 <memset+0xa>
 8003c44:	4770      	bx	lr
 8003c46:	f803 1b01 	strb.w	r1, [r3], #1
 8003c4a:	e7f9      	b.n	8003c40 <memset+0x4>

08003c4c <_init>:
 8003c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c4e:	bf00      	nop
 8003c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c52:	bc08      	pop	{r3}
 8003c54:	469e      	mov	lr, r3
 8003c56:	4770      	bx	lr

08003c58 <_fini>:
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c5a:	bf00      	nop
 8003c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c5e:	bc08      	pop	{r3}
 8003c60:	469e      	mov	lr, r3
 8003c62:	4770      	bx	lr
