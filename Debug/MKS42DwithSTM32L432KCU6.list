
MKS42DwithSTM32L432KCU6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d48  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f1c  08003f1c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f1c  08003f1c  00013f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f24  08003f24  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f24  08003f24  00013f24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f28  08003f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  2000000c  08003f38  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08003f38  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9f1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4f  00000000  00000000  0002ca2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002f3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205e3  00000000  00000000  0002fce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ebf8  00000000  00000000  000502cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0226  00000000  00000000  0005eec3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f0e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002794  00000000  00000000  0011f13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08003ebc 	.word	0x08003ebc

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08003ebc 	.word	0x08003ebc

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b974 	b.w	80004cc <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9d08      	ldr	r5, [sp, #32]
 8000202:	4604      	mov	r4, r0
 8000204:	468e      	mov	lr, r1
 8000206:	2b00      	cmp	r3, #0
 8000208:	d14d      	bne.n	80002a6 <__udivmoddi4+0xaa>
 800020a:	428a      	cmp	r2, r1
 800020c:	4694      	mov	ip, r2
 800020e:	d969      	bls.n	80002e4 <__udivmoddi4+0xe8>
 8000210:	fab2 f282 	clz	r2, r2
 8000214:	b152      	cbz	r2, 800022c <__udivmoddi4+0x30>
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	f1c2 0120 	rsb	r1, r2, #32
 800021e:	fa20 f101 	lsr.w	r1, r0, r1
 8000222:	fa0c fc02 	lsl.w	ip, ip, r2
 8000226:	ea41 0e03 	orr.w	lr, r1, r3
 800022a:	4094      	lsls	r4, r2
 800022c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000230:	0c21      	lsrs	r1, r4, #16
 8000232:	fbbe f6f8 	udiv	r6, lr, r8
 8000236:	fa1f f78c 	uxth.w	r7, ip
 800023a:	fb08 e316 	mls	r3, r8, r6, lr
 800023e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000242:	fb06 f107 	mul.w	r1, r6, r7
 8000246:	4299      	cmp	r1, r3
 8000248:	d90a      	bls.n	8000260 <__udivmoddi4+0x64>
 800024a:	eb1c 0303 	adds.w	r3, ip, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 811f 	bcs.w	8000494 <__udivmoddi4+0x298>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 811c 	bls.w	8000494 <__udivmoddi4+0x298>
 800025c:	3e02      	subs	r6, #2
 800025e:	4463      	add	r3, ip
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 f707 	mul.w	r7, r0, r7
 8000274:	42a7      	cmp	r7, r4
 8000276:	d90a      	bls.n	800028e <__udivmoddi4+0x92>
 8000278:	eb1c 0404 	adds.w	r4, ip, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 810a 	bcs.w	8000498 <__udivmoddi4+0x29c>
 8000284:	42a7      	cmp	r7, r4
 8000286:	f240 8107 	bls.w	8000498 <__udivmoddi4+0x29c>
 800028a:	4464      	add	r4, ip
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000292:	1be4      	subs	r4, r4, r7
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa4>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xc2>
 80002aa:	2d00      	cmp	r5, #0
 80002ac:	f000 80ef 	beq.w	800048e <__udivmoddi4+0x292>
 80002b0:	2600      	movs	r6, #0
 80002b2:	e9c5 0100 	strd	r0, r1, [r5]
 80002b6:	4630      	mov	r0, r6
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f683 	clz	r6, r3
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	d14a      	bne.n	800035c <__udivmoddi4+0x160>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd4>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80f9 	bhi.w	80004c2 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469e      	mov	lr, r3
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa4>
 80002de:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa4>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xec>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 8092 	bne.w	8000416 <__udivmoddi4+0x21a>
 80002f2:	eba1 010c 	sub.w	r1, r1, ip
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2601      	movs	r6, #1
 8000300:	0c20      	lsrs	r0, r4, #16
 8000302:	fbb1 f3f7 	udiv	r3, r1, r7
 8000306:	fb07 1113 	mls	r1, r7, r3, r1
 800030a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030e:	fb0e f003 	mul.w	r0, lr, r3
 8000312:	4288      	cmp	r0, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x12c>
 8000316:	eb1c 0101 	adds.w	r1, ip, r1
 800031a:	f103 38ff 	add.w	r8, r3, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x12a>
 8000320:	4288      	cmp	r0, r1
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2c0>
 8000326:	4643      	mov	r3, r8
 8000328:	1a09      	subs	r1, r1, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000330:	fb07 1110 	mls	r1, r7, r0, r1
 8000334:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x156>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 31ff 	add.w	r1, r0, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x154>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000350:	4608      	mov	r0, r1
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035a:	e79c      	b.n	8000296 <__udivmoddi4+0x9a>
 800035c:	f1c6 0720 	rsb	r7, r6, #32
 8000360:	40b3      	lsls	r3, r6
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa20 f407 	lsr.w	r4, r0, r7
 800036e:	fa01 f306 	lsl.w	r3, r1, r6
 8000372:	431c      	orrs	r4, r3
 8000374:	40f9      	lsrs	r1, r7
 8000376:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037a:	fa00 f306 	lsl.w	r3, r0, r6
 800037e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000382:	0c20      	lsrs	r0, r4, #16
 8000384:	fa1f fe8c 	uxth.w	lr, ip
 8000388:	fb09 1118 	mls	r1, r9, r8, r1
 800038c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000390:	fb08 f00e 	mul.w	r0, r8, lr
 8000394:	4288      	cmp	r0, r1
 8000396:	fa02 f206 	lsl.w	r2, r2, r6
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b8>
 800039c:	eb1c 0101 	adds.w	r1, ip, r1
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2bc>
 80003a8:	4288      	cmp	r0, r1
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2bc>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4461      	add	r1, ip
 80003b4:	1a09      	subs	r1, r1, r0
 80003b6:	b2a4      	uxth	r4, r4
 80003b8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003bc:	fb09 1110 	mls	r1, r9, r0, r1
 80003c0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c8:	458e      	cmp	lr, r1
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1e2>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2b4>
 80003d6:	458e      	cmp	lr, r1
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2b4>
 80003da:	3802      	subs	r0, #2
 80003dc:	4461      	add	r1, ip
 80003de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e2:	fba0 9402 	umull	r9, r4, r0, r2
 80003e6:	eba1 010e 	sub.w	r1, r1, lr
 80003ea:	42a1      	cmp	r1, r4
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46a6      	mov	lr, r4
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x2a4>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x2a0>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x212>
 80003f6:	ebb3 0208 	subs.w	r2, r3, r8
 80003fa:	eb61 010e 	sbc.w	r1, r1, lr
 80003fe:	fa01 f707 	lsl.w	r7, r1, r7
 8000402:	fa22 f306 	lsr.w	r3, r2, r6
 8000406:	40f1      	lsrs	r1, r6
 8000408:	431f      	orrs	r7, r3
 800040a:	e9c5 7100 	strd	r7, r1, [r5]
 800040e:	2600      	movs	r6, #0
 8000410:	4631      	mov	r1, r6
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	f1c2 0320 	rsb	r3, r2, #32
 800041a:	40d8      	lsrs	r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa21 f303 	lsr.w	r3, r1, r3
 8000424:	4091      	lsls	r1, r2
 8000426:	4301      	orrs	r1, r0
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb3 f0f7 	udiv	r0, r3, r7
 8000434:	fb07 3610 	mls	r6, r7, r0, r3
 8000438:	0c0b      	lsrs	r3, r1, #16
 800043a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043e:	fb00 f60e 	mul.w	r6, r0, lr
 8000442:	429e      	cmp	r6, r3
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x260>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b8>
 8000454:	429e      	cmp	r6, r3
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b8>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1b9b      	subs	r3, r3, r6
 800045e:	b289      	uxth	r1, r1
 8000460:	fbb3 f6f7 	udiv	r6, r3, r7
 8000464:	fb07 3316 	mls	r3, r7, r6, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb06 f30e 	mul.w	r3, r6, lr
 8000470:	428b      	cmp	r3, r1
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x28a>
 8000474:	eb1c 0101 	adds.w	r1, ip, r1
 8000478:	f106 38ff 	add.w	r8, r6, #4294967295
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800047e:	428b      	cmp	r3, r1
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000482:	3e02      	subs	r6, #2
 8000484:	4461      	add	r1, ip
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0x104>
 800048e:	462e      	mov	r6, r5
 8000490:	4628      	mov	r0, r5
 8000492:	e705      	b.n	80002a0 <__udivmoddi4+0xa4>
 8000494:	4606      	mov	r6, r0
 8000496:	e6e3      	b.n	8000260 <__udivmoddi4+0x64>
 8000498:	4618      	mov	r0, r3
 800049a:	e6f8      	b.n	800028e <__udivmoddi4+0x92>
 800049c:	454b      	cmp	r3, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f8>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a8:	3801      	subs	r0, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f8>
 80004ac:	4646      	mov	r6, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x28a>
 80004b0:	4620      	mov	r0, r4
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1e2>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x260>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b8>
 80004bc:	3b02      	subs	r3, #2
 80004be:	4461      	add	r1, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x12c>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e709      	b.n	80002da <__udivmoddi4+0xde>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x156>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UART_RxCpltCallback>:
int32_t read_rotation = 0;
float angle = 0;
int16_t read_error = 0;
float angle_err = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	memcpy(receive+indx, buff, 1);
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <HAL_UART_RxCpltCallback+0x70>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	461a      	mov	r2, r3
 80004de:	4b19      	ldr	r3, [pc, #100]	; (8000544 <HAL_UART_RxCpltCallback+0x74>)
 80004e0:	4413      	add	r3, r2
 80004e2:	4a19      	ldr	r2, [pc, #100]	; (8000548 <HAL_UART_RxCpltCallback+0x78>)
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	701a      	strb	r2, [r3, #0]
	indx++;
 80004e8:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_UART_RxCpltCallback+0x70>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	3301      	adds	r3, #1
 80004ee:	b2da      	uxtb	r2, r3
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <HAL_UART_RxCpltCallback+0x70>)
 80004f2:	701a      	strb	r2, [r3, #0]
	if(indx >= 9 || indx > receive_length){
 80004f4:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_UART_RxCpltCallback+0x70>)
 80004f6:	781b      	ldrb	r3, [r3, #0]
 80004f8:	2b08      	cmp	r3, #8
 80004fa:	d805      	bhi.n	8000508 <HAL_UART_RxCpltCallback+0x38>
 80004fc:	4b10      	ldr	r3, [pc, #64]	; (8000540 <HAL_UART_RxCpltCallback+0x70>)
 80004fe:	781a      	ldrb	r2, [r3, #0]
 8000500:	4b12      	ldr	r3, [pc, #72]	; (800054c <HAL_UART_RxCpltCallback+0x7c>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	429a      	cmp	r2, r3
 8000506:	d905      	bls.n	8000514 <HAL_UART_RxCpltCallback+0x44>
		indx = 0;
 8000508:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <HAL_UART_RxCpltCallback+0x70>)
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
		status = UART_error;
 800050e:	4b10      	ldr	r3, [pc, #64]	; (8000550 <HAL_UART_RxCpltCallback+0x80>)
 8000510:	2203      	movs	r2, #3
 8000512:	701a      	strb	r2, [r3, #0]
	}
	if(indx == receive_length){
 8000514:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <HAL_UART_RxCpltCallback+0x70>)
 8000516:	781a      	ldrb	r2, [r3, #0]
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <HAL_UART_RxCpltCallback+0x7c>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	429a      	cmp	r2, r3
 800051e:	d105      	bne.n	800052c <HAL_UART_RxCpltCallback+0x5c>
		indx = 0;
 8000520:	4b07      	ldr	r3, [pc, #28]	; (8000540 <HAL_UART_RxCpltCallback+0x70>)
 8000522:	2200      	movs	r2, #0
 8000524:	701a      	strb	r2, [r3, #0]
		status = UART_ready;
 8000526:	4b0a      	ldr	r3, [pc, #40]	; (8000550 <HAL_UART_RxCpltCallback+0x80>)
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Receive_IT(huart, buff, 1);
 800052c:	2201      	movs	r2, #1
 800052e:	4906      	ldr	r1, [pc, #24]	; (8000548 <HAL_UART_RxCpltCallback+0x78>)
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	f002 f9cf 	bl	80028d4 <HAL_UART_Receive_IT>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	20000042 	.word	0x20000042
 8000544:	20000034 	.word	0x20000034
 8000548:	20000040 	.word	0x20000040
 800054c:	20000029 	.word	0x20000029
 8000550:	20000043 	.word	0x20000043

08000554 <CRC_calc>:

uint8_t CRC_calc(uint8_t length){
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
	uint8_t sum = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length; i++){
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	e009      	b.n	800057c <CRC_calc+0x28>
		sum += transmit[i];
 8000568:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <CRC_calc+0x40>)
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	4413      	add	r3, r2
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	7bfb      	ldrb	r3, [r7, #15]
 8000572:	4413      	add	r3, r2
 8000574:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < length; i++){
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	3301      	adds	r3, #1
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	68ba      	ldr	r2, [r7, #8]
 8000580:	429a      	cmp	r2, r3
 8000582:	dbf1      	blt.n	8000568 <CRC_calc+0x14>
	}
	return sum;
 8000584:	7bfb      	ldrb	r3, [r7, #15]
}
 8000586:	4618      	mov	r0, r3
 8000588:	3714      	adds	r7, #20
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	2000002c 	.word	0x2000002c

08000598 <MKS_init>:

void MKS_init(void){
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	  HAL_UART_Init(&huart1);
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <MKS_init+0x34>)
 800059e:	f002 f8dd 	bl	800275c <HAL_UART_Init>
	  flag = true;
 80005a2:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <MKS_init+0x38>)
 80005a4:	2201      	movs	r2, #1
 80005a6:	701a      	strb	r2, [r3, #0]
	  indx = 0;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <MKS_init+0x3c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive_IT(&huart1, buff, 1);
 80005ae:	2201      	movs	r2, #1
 80005b0:	4909      	ldr	r1, [pc, #36]	; (80005d8 <MKS_init+0x40>)
 80005b2:	4806      	ldr	r0, [pc, #24]	; (80005cc <MKS_init+0x34>)
 80005b4:	f002 f98e 	bl	80028d4 <HAL_UART_Receive_IT>
	  do{ }while(status != UART_ready);
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <MKS_init+0x44>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1fb      	bne.n	80005b8 <MKS_init+0x20>
	  MKS_set_param(Enable_move, 0x01);
 80005c0:	2101      	movs	r1, #1
 80005c2:	20f3      	movs	r0, #243	; 0xf3
 80005c4:	f000 f85e 	bl	8000684 <MKS_set_param>
}
 80005c8:	bf00      	nop
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	20000060 	.word	0x20000060
 80005d0:	20000028 	.word	0x20000028
 80005d4:	20000042 	.word	0x20000042
 80005d8:	20000040 	.word	0x20000040
 80005dc:	20000043 	.word	0x20000043

080005e0 <MKS_read_param>:

void MKS_read_param(uint8_t param, uint8_t length_of_param){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	460a      	mov	r2, r1
 80005ea:	71fb      	strb	r3, [r7, #7]
 80005ec:	4613      	mov	r3, r2
 80005ee:	71bb      	strb	r3, [r7, #6]
	if(status == UART_ready){
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MKS_read_param+0x60>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d118      	bne.n	800062a <MKS_read_param+0x4a>
		status = UART_processing;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MKS_read_param+0x60>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
		transmit[0] = Address;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MKS_read_param+0x64>)
 8000600:	22e0      	movs	r2, #224	; 0xe0
 8000602:	701a      	strb	r2, [r3, #0]
		transmit[1] = param;
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <MKS_read_param+0x64>)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	7053      	strb	r3, [r2, #1]
		transmit[2] = CRC_calc(2);
 800060a:	2002      	movs	r0, #2
 800060c:	f7ff ffa2 	bl	8000554 <CRC_calc>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	4b0b      	ldr	r3, [pc, #44]	; (8000644 <MKS_read_param+0x64>)
 8000616:	709a      	strb	r2, [r3, #2]
		receive_length = length_of_param;
 8000618:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <MKS_read_param+0x68>)
 800061a:	79bb      	ldrb	r3, [r7, #6]
 800061c:	7013      	strb	r3, [r2, #0]
		HAL_UART_Transmit_IT(Used_UART, transmit, 3);
 800061e:	2203      	movs	r2, #3
 8000620:	4908      	ldr	r1, [pc, #32]	; (8000644 <MKS_read_param+0x64>)
 8000622:	480a      	ldr	r0, [pc, #40]	; (800064c <MKS_read_param+0x6c>)
 8000624:	f002 f8e8 	bl	80027f8 <HAL_UART_Transmit_IT>
	}else{
		if(status != UART_error){
			status = UART_busy;
		}
	}
}
 8000628:	e006      	b.n	8000638 <MKS_read_param+0x58>
		if(status != UART_error){
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <MKS_read_param+0x60>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b03      	cmp	r3, #3
 8000630:	d002      	beq.n	8000638 <MKS_read_param+0x58>
			status = UART_busy;
 8000632:	4b03      	ldr	r3, [pc, #12]	; (8000640 <MKS_read_param+0x60>)
 8000634:	2202      	movs	r2, #2
 8000636:	701a      	strb	r2, [r3, #0]
}
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000043 	.word	0x20000043
 8000644:	2000002c 	.word	0x2000002c
 8000648:	20000029 	.word	0x20000029
 800064c:	20000060 	.word	0x20000060

08000650 <MKS_read_param_F>:

void MKS_read_param_F(uint8_t param, uint8_t length_of_param){
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	71fb      	strb	r3, [r7, #7]
 800065c:	4613      	mov	r3, r2
 800065e:	71bb      	strb	r3, [r7, #6]
	do{
		MKS_read_param(param, length_of_param);
 8000660:	79ba      	ldrb	r2, [r7, #6]
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	4611      	mov	r1, r2
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff ffba 	bl	80005e0 <MKS_read_param>
	}while(status == UART_busy);
 800066c:	4b04      	ldr	r3, [pc, #16]	; (8000680 <MKS_read_param_F+0x30>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d0f5      	beq.n	8000660 <MKS_read_param_F+0x10>
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	20000043 	.word	0x20000043

08000684 <MKS_set_param>:


void MKS_set_param(uint8_t param, uint8_t value){
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	if(status == UART_ready){
 8000694:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MKS_set_param+0x68>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d11b      	bne.n	80006d4 <MKS_set_param+0x50>
		status = UART_processing;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MKS_set_param+0x68>)
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
		transmit[0] = Address;
 80006a2:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MKS_set_param+0x6c>)
 80006a4:	22e0      	movs	r2, #224	; 0xe0
 80006a6:	701a      	strb	r2, [r3, #0]
		transmit[1] = param;
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <MKS_set_param+0x6c>)
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	7053      	strb	r3, [r2, #1]
		transmit[2] = value;
 80006ae:	4a10      	ldr	r2, [pc, #64]	; (80006f0 <MKS_set_param+0x6c>)
 80006b0:	79bb      	ldrb	r3, [r7, #6]
 80006b2:	7093      	strb	r3, [r2, #2]
		transmit[3] = CRC_calc(3);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f7ff ff4d 	bl	8000554 <CRC_calc>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <MKS_set_param+0x6c>)
 80006c0:	70da      	strb	r2, [r3, #3]
		receive_length = response_length;
 80006c2:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MKS_set_param+0x70>)
 80006c4:	2203      	movs	r2, #3
 80006c6:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(Used_UART, transmit, 4);
 80006c8:	2204      	movs	r2, #4
 80006ca:	4909      	ldr	r1, [pc, #36]	; (80006f0 <MKS_set_param+0x6c>)
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <MKS_set_param+0x74>)
 80006ce:	f002 f893 	bl	80027f8 <HAL_UART_Transmit_IT>
	}else{
		if(status != UART_error){
			status = UART_busy;
		}
	}
}
 80006d2:	e006      	b.n	80006e2 <MKS_set_param+0x5e>
		if(status != UART_error){
 80006d4:	4b05      	ldr	r3, [pc, #20]	; (80006ec <MKS_set_param+0x68>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	d002      	beq.n	80006e2 <MKS_set_param+0x5e>
			status = UART_busy;
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <MKS_set_param+0x68>)
 80006de:	2202      	movs	r2, #2
 80006e0:	701a      	strb	r2, [r3, #0]
}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000043 	.word	0x20000043
 80006f0:	2000002c 	.word	0x2000002c
 80006f4:	20000029 	.word	0x20000029
 80006f8:	20000060 	.word	0x20000060

080006fc <MKS_set_param_F>:

void MKS_set_param_F(uint8_t param, uint8_t value){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	460a      	mov	r2, r1
 8000706:	71fb      	strb	r3, [r7, #7]
 8000708:	4613      	mov	r3, r2
 800070a:	71bb      	strb	r3, [r7, #6]
	do{
		MKS_set_param(param, value);
 800070c:	79ba      	ldrb	r2, [r7, #6]
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ffb6 	bl	8000684 <MKS_set_param>
	}while(status == UART_busy);
 8000718:	4b04      	ldr	r3, [pc, #16]	; (800072c <MKS_set_param_F+0x30>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d0f5      	beq.n	800070c <MKS_set_param_F+0x10>
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000043 	.word	0x20000043

08000730 <MKS_set_rotation_speed>:
	do{
		MKS_rotate(rot, speed, clockwise);
	}while(status == UART_busy);
}

void MKS_set_rotation_speed(uint8_t speed, bool clockwise){
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	4603      	mov	r3, r0
 8000738:	460a      	mov	r2, r1
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	4613      	mov	r3, r2
 800073e:	71bb      	strb	r3, [r7, #6]
	if(status == UART_ready){
 8000740:	4b1b      	ldr	r3, [pc, #108]	; (80007b0 <MKS_set_rotation_speed+0x80>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d127      	bne.n	8000798 <MKS_set_rotation_speed+0x68>
		status = UART_processing;
 8000748:	4b19      	ldr	r3, [pc, #100]	; (80007b0 <MKS_set_rotation_speed+0x80>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
		if(clockwise){
 800074e:	79bb      	ldrb	r3, [r7, #6]
 8000750:	2b00      	cmp	r3, #0
 8000752:	d004      	beq.n	800075e <MKS_set_rotation_speed+0x2e>
			speed &= 0x7F;
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	e003      	b.n	8000766 <MKS_set_rotation_speed+0x36>
		}else{
			speed |= 0x80;
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000764:	71fb      	strb	r3, [r7, #7]
		}
		transmit[0] = Address;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MKS_set_rotation_speed+0x84>)
 8000768:	22e0      	movs	r2, #224	; 0xe0
 800076a:	701a      	strb	r2, [r3, #0]
		transmit[1] = Set_rotation;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MKS_set_rotation_speed+0x84>)
 800076e:	22f6      	movs	r2, #246	; 0xf6
 8000770:	705a      	strb	r2, [r3, #1]
		transmit[2] = (uint8_t)speed;
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <MKS_set_rotation_speed+0x84>)
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	7093      	strb	r3, [r2, #2]
		transmit[3] = CRC_calc(3);
 8000778:	2003      	movs	r0, #3
 800077a:	f7ff feeb 	bl	8000554 <CRC_calc>
 800077e:	4603      	mov	r3, r0
 8000780:	461a      	mov	r2, r3
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MKS_set_rotation_speed+0x84>)
 8000784:	70da      	strb	r2, [r3, #3]
		receive_length = response_length;
 8000786:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MKS_set_rotation_speed+0x88>)
 8000788:	2203      	movs	r2, #3
 800078a:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(Used_UART, transmit, 4);
 800078c:	2204      	movs	r2, #4
 800078e:	4909      	ldr	r1, [pc, #36]	; (80007b4 <MKS_set_rotation_speed+0x84>)
 8000790:	480a      	ldr	r0, [pc, #40]	; (80007bc <MKS_set_rotation_speed+0x8c>)
 8000792:	f002 f831 	bl	80027f8 <HAL_UART_Transmit_IT>
	}else{
		if(status != UART_error){
			status = UART_busy;
		}
	}
}
 8000796:	e006      	b.n	80007a6 <MKS_set_rotation_speed+0x76>
		if(status != UART_error){
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MKS_set_rotation_speed+0x80>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d002      	beq.n	80007a6 <MKS_set_rotation_speed+0x76>
			status = UART_busy;
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <MKS_set_rotation_speed+0x80>)
 80007a2:	2202      	movs	r2, #2
 80007a4:	701a      	strb	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	3708      	adds	r7, #8
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000043 	.word	0x20000043
 80007b4:	2000002c 	.word	0x2000002c
 80007b8:	20000029 	.word	0x20000029
 80007bc:	20000060 	.word	0x20000060

080007c0 <MKS_set_rotation_speed_F>:

void MKS_set_rotation_speed_F(uint8_t speed, bool clockwise){
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	4603      	mov	r3, r0
 80007c8:	460a      	mov	r2, r1
 80007ca:	71fb      	strb	r3, [r7, #7]
 80007cc:	4613      	mov	r3, r2
 80007ce:	71bb      	strb	r3, [r7, #6]
	do{
		MKS_set_rotation_speed(speed, clockwise);
 80007d0:	79ba      	ldrb	r2, [r7, #6]
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	4611      	mov	r1, r2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffaa 	bl	8000730 <MKS_set_rotation_speed>
	}while(status == UART_busy);
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <MKS_set_rotation_speed_F+0x30>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d0f5      	beq.n	80007d0 <MKS_set_rotation_speed_F+0x10>
}
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000043 	.word	0x20000043

080007f4 <MKS_stop>:

void MKS_stop(void){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	if(status == UART_ready){
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MKS_stop+0x50>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d118      	bne.n	8000832 <MKS_stop+0x3e>
		status = UART_processing;
 8000800:	4b10      	ldr	r3, [pc, #64]	; (8000844 <MKS_stop+0x50>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
		transmit[0] = Address;
 8000806:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MKS_stop+0x54>)
 8000808:	22e0      	movs	r2, #224	; 0xe0
 800080a:	701a      	strb	r2, [r3, #0]
		transmit[1] = Stop;
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MKS_stop+0x54>)
 800080e:	22f7      	movs	r2, #247	; 0xf7
 8000810:	705a      	strb	r2, [r3, #1]
		transmit[2] = CRC_calc(2);
 8000812:	2002      	movs	r0, #2
 8000814:	f7ff fe9e 	bl	8000554 <CRC_calc>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MKS_stop+0x54>)
 800081e:	709a      	strb	r2, [r3, #2]
		receive_length = response_length;
 8000820:	4b0a      	ldr	r3, [pc, #40]	; (800084c <MKS_stop+0x58>)
 8000822:	2203      	movs	r2, #3
 8000824:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit_IT(Used_UART, transmit, 3);
 8000826:	2203      	movs	r2, #3
 8000828:	4907      	ldr	r1, [pc, #28]	; (8000848 <MKS_stop+0x54>)
 800082a:	4809      	ldr	r0, [pc, #36]	; (8000850 <MKS_stop+0x5c>)
 800082c:	f001 ffe4 	bl	80027f8 <HAL_UART_Transmit_IT>
	}else{
		if(status != UART_error){
			status = UART_busy;
		}
	}
}
 8000830:	e006      	b.n	8000840 <MKS_stop+0x4c>
		if(status != UART_error){
 8000832:	4b04      	ldr	r3, [pc, #16]	; (8000844 <MKS_stop+0x50>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b03      	cmp	r3, #3
 8000838:	d002      	beq.n	8000840 <MKS_stop+0x4c>
			status = UART_busy;
 800083a:	4b02      	ldr	r3, [pc, #8]	; (8000844 <MKS_stop+0x50>)
 800083c:	2202      	movs	r2, #2
 800083e:	701a      	strb	r2, [r3, #0]
}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000043 	.word	0x20000043
 8000848:	2000002c 	.word	0x2000002c
 800084c:	20000029 	.word	0x20000029
 8000850:	20000060 	.word	0x20000060

08000854 <MKS_stop_F>:

void MKS_stop_F(void){
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
	do{
		MKS_stop();
 8000858:	f7ff ffcc 	bl	80007f4 <MKS_stop>
	}while(status == UART_busy);
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <MKS_stop_F+0x18>)
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b02      	cmp	r3, #2
 8000862:	d0f9      	beq.n	8000858 <MKS_stop_F+0x4>
}
 8000864:	bf00      	nop
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000043 	.word	0x20000043

08000870 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_GPIO_Init+0x2c>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <MX_GPIO_Init+0x2c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_GPIO_Init+0x2c>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]

}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	40021000 	.word	0x40021000

080008a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a4:	f000 fa43 	bl	8000d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a8:	f000 f8c6 	bl	8000a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ac:	f7ff ffe0 	bl	8000870 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008b0:	f000 f984 	bl	8000bbc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MKS_init();
 80008b4:	f7ff fe70 	bl	8000598 <MKS_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(read_rotation < 400000 && read_rotation > -400000){
 80008b8:	4b51      	ldr	r3, [pc, #324]	; (8000a00 <main+0x160>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a51      	ldr	r2, [pc, #324]	; (8000a04 <main+0x164>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	dc0a      	bgt.n	80008d8 <main+0x38>
 80008c2:	4b4f      	ldr	r3, [pc, #316]	; (8000a00 <main+0x160>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a50      	ldr	r2, [pc, #320]	; (8000a08 <main+0x168>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	db05      	blt.n	80008d8 <main+0x38>
		  //MKS_rotate(18, 15, flag);
		  MKS_set_rotation_speed_F(10, flag);
 80008cc:	4b4f      	ldr	r3, [pc, #316]	; (8000a0c <main+0x16c>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	4619      	mov	r1, r3
 80008d2:	200a      	movs	r0, #10
 80008d4:	f7ff ff74 	bl	80007c0 <MKS_set_rotation_speed_F>
	  }
	  MKS_read_param_F(Position_angle, Position_angle_length);
 80008d8:	2106      	movs	r1, #6
 80008da:	2036      	movs	r0, #54	; 0x36
 80008dc:	f7ff feb8 	bl	8000650 <MKS_read_param_F>
	  read_rotation = (int32_t)((receive[1] << 24) + (receive[2] << 16) + (receive[3] << 8) + receive[4]);
 80008e0:	4b4b      	ldr	r3, [pc, #300]	; (8000a10 <main+0x170>)
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	061a      	lsls	r2, r3, #24
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <main+0x170>)
 80008e8:	789b      	ldrb	r3, [r3, #2]
 80008ea:	041b      	lsls	r3, r3, #16
 80008ec:	441a      	add	r2, r3
 80008ee:	4b48      	ldr	r3, [pc, #288]	; (8000a10 <main+0x170>)
 80008f0:	78db      	ldrb	r3, [r3, #3]
 80008f2:	021b      	lsls	r3, r3, #8
 80008f4:	4413      	add	r3, r2
 80008f6:	4a46      	ldr	r2, [pc, #280]	; (8000a10 <main+0x170>)
 80008f8:	7912      	ldrb	r2, [r2, #4]
 80008fa:	4413      	add	r3, r2
 80008fc:	4a40      	ldr	r2, [pc, #256]	; (8000a00 <main+0x160>)
 80008fe:	6013      	str	r3, [r2, #0]
	  angle = (float)(read_rotation)/(encoder_quality/one_rotation_in_degrees);
 8000900:	4b3f      	ldr	r3, [pc, #252]	; (8000a00 <main+0x160>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	ee07 3a90 	vmov	s15, r3
 8000908:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800090c:	eddf 6a41 	vldr	s13, [pc, #260]	; 8000a14 <main+0x174>
 8000910:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000914:	4b40      	ldr	r3, [pc, #256]	; (8000a18 <main+0x178>)
 8000916:	edc3 7a00 	vstr	s15, [r3]
	  MKS_read_param_F(Position_error, Position_error_length);
 800091a:	2104      	movs	r1, #4
 800091c:	2039      	movs	r0, #57	; 0x39
 800091e:	f7ff fe97 	bl	8000650 <MKS_read_param_F>
	  read_error = (int16_t)((receive[1] << 8) + (receive[2]));
 8000922:	4b3b      	ldr	r3, [pc, #236]	; (8000a10 <main+0x170>)
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	b29b      	uxth	r3, r3
 8000928:	021b      	lsls	r3, r3, #8
 800092a:	b29a      	uxth	r2, r3
 800092c:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <main+0x170>)
 800092e:	789b      	ldrb	r3, [r3, #2]
 8000930:	b29b      	uxth	r3, r3
 8000932:	4413      	add	r3, r2
 8000934:	b29b      	uxth	r3, r3
 8000936:	b21a      	sxth	r2, r3
 8000938:	4b38      	ldr	r3, [pc, #224]	; (8000a1c <main+0x17c>)
 800093a:	801a      	strh	r2, [r3, #0]
	  angle_err = (float)(read_error)/(encoder_quality/one_rotation_in_degrees);
 800093c:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <main+0x17c>)
 800093e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000942:	ee07 3a90 	vmov	s15, r3
 8000946:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800094a:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000a14 <main+0x174>
 800094e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000952:	4b33      	ldr	r3, [pc, #204]	; (8000a20 <main+0x180>)
 8000954:	edc3 7a00 	vstr	s15, [r3]
	  MKS_read_param_F(En_value, En_value_length);
 8000958:	2108      	movs	r1, #8
 800095a:	2030      	movs	r0, #48	; 0x30
 800095c:	f7ff fe78 	bl	8000650 <MKS_read_param_F>
	  HAL_Delay(10);
 8000960:	200a      	movs	r0, #10
 8000962:	f000 fa59 	bl	8000e18 <HAL_Delay>
	  encoder_rotations = (int32_t)((receive[1] << 24) + (receive[2] << 16) + (receive[3] << 8) + receive[4]);
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <main+0x170>)
 8000968:	785b      	ldrb	r3, [r3, #1]
 800096a:	061a      	lsls	r2, r3, #24
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <main+0x170>)
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	041b      	lsls	r3, r3, #16
 8000972:	441a      	add	r2, r3
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <main+0x170>)
 8000976:	78db      	ldrb	r3, [r3, #3]
 8000978:	021b      	lsls	r3, r3, #8
 800097a:	4413      	add	r3, r2
 800097c:	4a24      	ldr	r2, [pc, #144]	; (8000a10 <main+0x170>)
 800097e:	7912      	ldrb	r2, [r2, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <main+0x184>)
 8000984:	6013      	str	r3, [r2, #0]
	  encoder_value = (uint16_t)((receive[5] << 8) + receive[6]);
 8000986:	4b22      	ldr	r3, [pc, #136]	; (8000a10 <main+0x170>)
 8000988:	795b      	ldrb	r3, [r3, #5]
 800098a:	b29b      	uxth	r3, r3
 800098c:	021b      	lsls	r3, r3, #8
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b1f      	ldr	r3, [pc, #124]	; (8000a10 <main+0x170>)
 8000992:	799b      	ldrb	r3, [r3, #6]
 8000994:	b29b      	uxth	r3, r3
 8000996:	4413      	add	r3, r2
 8000998:	b29a      	uxth	r2, r3
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <main+0x188>)
 800099c:	801a      	strh	r2, [r3, #0]
	  angle_en = (float)(encoder_value)/(encoder_quality/one_rotation_in_degrees);
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <main+0x188>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	ee07 3a90 	vmov	s15, r3
 80009a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80009aa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000a14 <main+0x174>
 80009ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009b2:	4b1e      	ldr	r3, [pc, #120]	; (8000a2c <main+0x18c>)
 80009b4:	edc3 7a00 	vstr	s15, [r3]
	  if(encoder_rotations >= 1){
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <main+0x184>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dd04      	ble.n	80009ca <main+0x12a>
		  flag = true;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <main+0x16c>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	701a      	strb	r2, [r3, #0]
		  MKS_stop_F();
 80009c6:	f7ff ff45 	bl	8000854 <MKS_stop_F>
	  }
	  if(encoder_rotations <= -1){
 80009ca:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <main+0x184>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	da04      	bge.n	80009dc <main+0x13c>
		  flag = false;
 80009d2:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <main+0x16c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	701a      	strb	r2, [r3, #0]
		  MKS_stop_F();
 80009d8:	f7ff ff3c 	bl	8000854 <MKS_stop_F>
	  }
	  if(read_rotation > 800000 || read_rotation < -800000){
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <main+0x160>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a13      	ldr	r2, [pc, #76]	; (8000a30 <main+0x190>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	dc05      	bgt.n	80009f2 <main+0x152>
 80009e6:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <main+0x160>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4a12      	ldr	r2, [pc, #72]	; (8000a34 <main+0x194>)
 80009ec:	4293      	cmp	r3, r2
 80009ee:	f6bf af63 	bge.w	80008b8 <main+0x18>
		  MKS_stop_F();
 80009f2:	f7ff ff2f 	bl	8000854 <MKS_stop_F>
		  MKS_set_param_F(Enable_move, 0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	20f3      	movs	r0, #243	; 0xf3
 80009fa:	f7ff fe7f 	bl	80006fc <MKS_set_param_F>
	  if(read_rotation < 400000 && read_rotation > -400000){
 80009fe:	e75b      	b.n	80008b8 <main+0x18>
 8000a00:	20000050 	.word	0x20000050
 8000a04:	00061a7f 	.word	0x00061a7f
 8000a08:	fff9e581 	.word	0xfff9e581
 8000a0c:	20000028 	.word	0x20000028
 8000a10:	20000034 	.word	0x20000034
 8000a14:	43360b61 	.word	0x43360b61
 8000a18:	20000054 	.word	0x20000054
 8000a1c:	20000058 	.word	0x20000058
 8000a20:	2000005c 	.word	0x2000005c
 8000a24:	20000048 	.word	0x20000048
 8000a28:	20000044 	.word	0x20000044
 8000a2c:	2000004c 	.word	0x2000004c
 8000a30:	000c3500 	.word	0x000c3500
 8000a34:	fff3cb00 	.word	0xfff3cb00

08000a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b096      	sub	sp, #88	; 0x58
 8000a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	2244      	movs	r2, #68	; 0x44
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f003 fa30 	bl	8003eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4c:	463b      	mov	r3, r7
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a5e:	f000 fd07 	bl	8001470 <HAL_PWREx_ControlVoltageScaling>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a68:	f000 f838 	bl	8000adc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a6c:	2310      	movs	r3, #16
 8000a6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a78:	2360      	movs	r3, #96	; 0x60
 8000a7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a80:	2301      	movs	r3, #1
 8000a82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a84:	2301      	movs	r3, #1
 8000a86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a88:	2328      	movs	r3, #40	; 0x28
 8000a8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a8c:	2307      	movs	r3, #7
 8000a8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a90:	2302      	movs	r3, #2
 8000a92:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a94:	2302      	movs	r3, #2
 8000a96:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fd3d 	bl	800151c <HAL_RCC_OscConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000aa8:	f000 f818 	bl	8000adc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aac:	230f      	movs	r3, #15
 8000aae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f001 f93d 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000ad0:	f000 f804 	bl	8000adc <Error_Handler>
  }
}
 8000ad4:	bf00      	nop
 8000ad6:	3758      	adds	r7, #88	; 0x58
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <Error_Handler+0x8>
	...

08000ae8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <HAL_MspInit+0x44>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a0e      	ldr	r2, [pc, #56]	; (8000b2c <HAL_MspInit+0x44>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_MspInit+0x44>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_MspInit+0x44>)
 8000b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_MspInit+0x44>)
 8000b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b10:	6593      	str	r3, [r2, #88]	; 0x58
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_MspInit+0x44>)
 8000b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1a:	603b      	str	r3, [r7, #0]
 8000b1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	40021000 	.word	0x40021000

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f92c 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <USART1_IRQHandler+0x10>)
 8000b8a:	f001 fef9 	bl	8002980 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000060 	.word	0x20000060

08000b98 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bc0:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <MX_USART1_UART_Init+0x5c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bc6:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <MX_USART1_UART_Init+0x58>)
 8000c00:	f001 fdac 	bl	800275c <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c0a:	f7ff ff67 	bl	8000adc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000060 	.word	0x20000060
 8000c18:	40013800 	.word	0x40013800

08000c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b09e      	sub	sp, #120	; 0x78
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0310 	add.w	r3, r7, #16
 8000c38:	2254      	movs	r2, #84	; 0x54
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f003 f935 	bl	8003eac <memset>
  if(uartHandle->Instance==USART1)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <HAL_UART_MspInit+0xb8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d13f      	bne.n	8000ccc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c50:	2300      	movs	r3, #0
 8000c52:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f001 fa97 	bl	800218c <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c64:	f7ff ff3a 	bl	8000adc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c68:	4b1b      	ldr	r3, [pc, #108]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6c:	4a1a      	ldr	r2, [pc, #104]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c72:	6613      	str	r3, [r2, #96]	; 0x60
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c7c:	60fb      	str	r3, [r7, #12]
 8000c7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c86:	f043 0301 	orr.w	r3, r3, #1
 8000c8a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_UART_MspInit+0xbc>)
 8000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	60bb      	str	r3, [r7, #8]
 8000c96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c98:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c9c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000caa:	2307      	movs	r3, #7
 8000cac:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f000 fa62 	bl	8001180 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 10, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	210a      	movs	r1, #10
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 f9a8 	bl	8001016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc6:	2025      	movs	r0, #37	; 0x25
 8000cc8:	f000 f9c1 	bl	800104e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000ccc:	bf00      	nop
 8000cce:	3778      	adds	r7, #120	; 0x78
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	40021000 	.word	0x40021000

08000cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ce0:	f7ff ff5a 	bl	8000b98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	; (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	; (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f003 f8ab 	bl	8003e64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d0e:	f7ff fdc7 	bl	80008a0 <main>

08000d12 <LoopForever>:

LoopForever:
    b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d20:	08003f2c 	.word	0x08003f2c
  ldr r2, =_sbss
 8000d24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d28:	200000e8 	.word	0x200000e8

08000d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC1_IRQHandler>

08000d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d34:	2300      	movs	r3, #0
 8000d36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d38:	2003      	movs	r0, #3
 8000d3a:	f000 f961 	bl	8001000 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3e:	200f      	movs	r0, #15
 8000d40:	f000 f80e 	bl	8000d60 <HAL_InitTick>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d002      	beq.n	8000d50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	e001      	b.n	8000d54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d50:	f7ff feca 	bl	8000ae8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_InitTick+0x6c>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d023      	beq.n	8000dbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d74:	4b16      	ldr	r3, [pc, #88]	; (8000dd0 <HAL_InitTick+0x70>)
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_InitTick+0x6c>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f96d 	bl	800106a <HAL_SYSTICK_Config>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d10f      	bne.n	8000db6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b0f      	cmp	r3, #15
 8000d9a:	d809      	bhi.n	8000db0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	f04f 30ff 	mov.w	r0, #4294967295
 8000da4:	f000 f937 	bl	8001016 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_InitTick+0x74>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
 8000dae:	e007      	b.n	8000dc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	73fb      	strb	r3, [r7, #15]
 8000db4:	e004      	b.n	8000dc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
 8000db8:	73fb      	strb	r3, [r7, #15]
 8000dba:	e001      	b.n	8000dc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000008 	.word	0x20000008
 8000dd0:	20000000 	.word	0x20000000
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	200000e4 	.word	0x200000e4

08000e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200000e4 	.word	0x200000e4

08000e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e20:	f7ff ffee 	bl	8000e00 <HAL_GetTick>
 8000e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e30:	d005      	beq.n	8000e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e32:	4b0a      	ldr	r3, [pc, #40]	; (8000e5c <HAL_Delay+0x44>)
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	461a      	mov	r2, r3
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	4413      	add	r3, r2
 8000e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e3e:	bf00      	nop
 8000e40:	f7ff ffde 	bl	8000e00 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d8f7      	bhi.n	8000e40 <HAL_Delay+0x28>
  {
  }
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3710      	adds	r7, #16
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000008 	.word	0x20000008

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	db0b      	blt.n	8000eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	f003 021f 	and.w	r2, r3, #31
 8000edc:	4907      	ldr	r1, [pc, #28]	; (8000efc <__NVIC_EnableIRQ+0x38>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	095b      	lsrs	r3, r3, #5
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eee:	bf00      	nop
 8000ef0:	370c      	adds	r7, #12
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100

08000f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	db0a      	blt.n	8000f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	490c      	ldr	r1, [pc, #48]	; (8000f4c <__NVIC_SetPriority+0x4c>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	0112      	lsls	r2, r2, #4
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	440b      	add	r3, r1
 8000f24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f28:	e00a      	b.n	8000f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	4908      	ldr	r1, [pc, #32]	; (8000f50 <__NVIC_SetPriority+0x50>)
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	3b04      	subs	r3, #4
 8000f38:	0112      	lsls	r2, r2, #4
 8000f3a:	b2d2      	uxtb	r2, r2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	761a      	strb	r2, [r3, #24]
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	e000e100 	.word	0xe000e100
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b089      	sub	sp, #36	; 0x24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f1c3 0307 	rsb	r3, r3, #7
 8000f6e:	2b04      	cmp	r3, #4
 8000f70:	bf28      	it	cs
 8000f72:	2304      	movcs	r3, #4
 8000f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	3304      	adds	r3, #4
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d902      	bls.n	8000f84 <NVIC_EncodePriority+0x30>
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	3b03      	subs	r3, #3
 8000f82:	e000      	b.n	8000f86 <NVIC_EncodePriority+0x32>
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 32ff 	mov.w	r2, #4294967295
 8000f8c:	69bb      	ldr	r3, [r7, #24]
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43da      	mvns	r2, r3
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	401a      	ands	r2, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa6:	43d9      	mvns	r1, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fac:	4313      	orrs	r3, r2
         );
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3724      	adds	r7, #36	; 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
	...

08000fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fcc:	d301      	bcc.n	8000fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00f      	b.n	8000ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <SysTick_Config+0x40>)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fda:	210f      	movs	r1, #15
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f7ff ff8e 	bl	8000f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe4:	4b05      	ldr	r3, [pc, #20]	; (8000ffc <SysTick_Config+0x40>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fea:	4b04      	ldr	r3, [pc, #16]	; (8000ffc <SysTick_Config+0x40>)
 8000fec:	2207      	movs	r2, #7
 8000fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ff0:	2300      	movs	r3, #0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	e000e010 	.word	0xe000e010

08001000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff29 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b086      	sub	sp, #24
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	60b9      	str	r1, [r7, #8]
 8001020:	607a      	str	r2, [r7, #4]
 8001022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001028:	f7ff ff3e 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 800102c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800102e:	687a      	ldr	r2, [r7, #4]
 8001030:	68b9      	ldr	r1, [r7, #8]
 8001032:	6978      	ldr	r0, [r7, #20]
 8001034:	f7ff ff8e 	bl	8000f54 <NVIC_EncodePriority>
 8001038:	4602      	mov	r2, r0
 800103a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103e:	4611      	mov	r1, r2
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ff5d 	bl	8000f00 <__NVIC_SetPriority>
}
 8001046:	bf00      	nop
 8001048:	3718      	adds	r7, #24
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	4603      	mov	r3, r0
 8001056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff ff31 	bl	8000ec4 <__NVIC_EnableIRQ>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b082      	sub	sp, #8
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa2 	bl	8000fbc <SysTick_Config>
 8001078:	4603      	mov	r3, r0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001082:	b480      	push	{r7}
 8001084:	b085      	sub	sp, #20
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d008      	beq.n	80010ac <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2204      	movs	r2, #4
 800109e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e022      	b.n	80010f2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f022 020e 	bic.w	r2, r2, #14
 80010ba:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0201 	bic.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d0:	f003 021c 	and.w	r2, r3, #28
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	2101      	movs	r1, #1
 80010da:	fa01 f202 	lsl.w	r2, r1, r2
 80010de:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2200      	movs	r2, #0
 80010ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010f0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3714      	adds	r7, #20
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b084      	sub	sp, #16
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001106:	2300      	movs	r3, #0
 8001108:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b02      	cmp	r3, #2
 8001114:	d005      	beq.n	8001122 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2204      	movs	r2, #4
 800111a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800111c:	2301      	movs	r3, #1
 800111e:	73fb      	strb	r3, [r7, #15]
 8001120:	e029      	b.n	8001176 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 020e 	bic.w	r2, r2, #14
 8001130:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0201 	bic.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f003 021c 	and.w	r2, r3, #28
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	4798      	blx	r3
    }
  }
  return status;
 8001176:	7bfb      	ldrb	r3, [r7, #15]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b087      	sub	sp, #28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118e:	e148      	b.n	8001422 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	2101      	movs	r1, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	fa01 f303 	lsl.w	r3, r1, r3
 800119c:	4013      	ands	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 813a 	beq.w	800141c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f003 0303 	and.w	r3, r3, #3
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	d005      	beq.n	80011c0 <HAL_GPIO_Init+0x40>
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d130      	bne.n	8001222 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	693a      	ldr	r2, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	68da      	ldr	r2, [r3, #12]
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011f6:	2201      	movs	r2, #1
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	091b      	lsrs	r3, r3, #4
 800120c:	f003 0201 	and.w	r2, r3, #1
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	693a      	ldr	r2, [r7, #16]
 8001218:	4313      	orrs	r3, r2
 800121a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b03      	cmp	r3, #3
 800122c:	d017      	beq.n	800125e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	68db      	ldr	r3, [r3, #12]
 8001232:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	2203      	movs	r2, #3
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	fa02 f303 	lsl.w	r3, r2, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4313      	orrs	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	f003 0303 	and.w	r3, r3, #3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d123      	bne.n	80012b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3208      	adds	r2, #8
 8001272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001276:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	220f      	movs	r2, #15
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	43db      	mvns	r3, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4013      	ands	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	691a      	ldr	r2, [r3, #16]
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	693a      	ldr	r2, [r7, #16]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	08da      	lsrs	r2, r3, #3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3208      	adds	r2, #8
 80012ac:	6939      	ldr	r1, [r7, #16]
 80012ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	2203      	movs	r2, #3
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 0203 	and.w	r2, r3, #3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 8094 	beq.w	800141c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f4:	4b52      	ldr	r3, [pc, #328]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80012f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f8:	4a51      	ldr	r2, [pc, #324]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 80012fa:	f043 0301 	orr.w	r3, r3, #1
 80012fe:	6613      	str	r3, [r2, #96]	; 0x60
 8001300:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <HAL_GPIO_Init+0x2c0>)
 8001302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130c:	4a4d      	ldr	r2, [pc, #308]	; (8001444 <HAL_GPIO_Init+0x2c4>)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	089b      	lsrs	r3, r3, #2
 8001312:	3302      	adds	r3, #2
 8001314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	220f      	movs	r2, #15
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001336:	d00d      	beq.n	8001354 <HAL_GPIO_Init+0x1d4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a43      	ldr	r2, [pc, #268]	; (8001448 <HAL_GPIO_Init+0x2c8>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d007      	beq.n	8001350 <HAL_GPIO_Init+0x1d0>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a42      	ldr	r2, [pc, #264]	; (800144c <HAL_GPIO_Init+0x2cc>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d101      	bne.n	800134c <HAL_GPIO_Init+0x1cc>
 8001348:	2302      	movs	r3, #2
 800134a:	e004      	b.n	8001356 <HAL_GPIO_Init+0x1d6>
 800134c:	2307      	movs	r3, #7
 800134e:	e002      	b.n	8001356 <HAL_GPIO_Init+0x1d6>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <HAL_GPIO_Init+0x1d6>
 8001354:	2300      	movs	r3, #0
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	f002 0203 	and.w	r2, r2, #3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4093      	lsls	r3, r2
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001366:	4937      	ldr	r1, [pc, #220]	; (8001444 <HAL_GPIO_Init+0x2c4>)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001374:	4b36      	ldr	r3, [pc, #216]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001376:	689b      	ldr	r3, [r3, #8]
 8001378:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	43db      	mvns	r3, r3
 800137e:	693a      	ldr	r2, [r7, #16]
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d003      	beq.n	8001398 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001390:	693a      	ldr	r2, [r7, #16]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001398:	4a2d      	ldr	r2, [pc, #180]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800139e:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4313      	orrs	r3, r2
 80013c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c2:	4a23      	ldr	r2, [pc, #140]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	693a      	ldr	r2, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ec:	4a18      	ldr	r2, [pc, #96]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013f2:	4b17      	ldr	r3, [pc, #92]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4013      	ands	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4313      	orrs	r3, r2
 8001414:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_GPIO_Init+0x2d0>)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	2b00      	cmp	r3, #0
 800142e:	f47f aeaf 	bne.w	8001190 <HAL_GPIO_Init+0x10>
  }
}
 8001432:	bf00      	nop
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	40021000 	.word	0x40021000
 8001444:	40010000 	.word	0x40010000
 8001448:	48000400 	.word	0x48000400
 800144c:	48000800 	.word	0x48000800
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <HAL_PWREx_GetVoltageRange+0x18>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001460:	4618      	mov	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40007000 	.word	0x40007000

08001470 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800147e:	d130      	bne.n	80014e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800148c:	d038      	beq.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001496:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001498:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2232      	movs	r2, #50	; 0x32
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	4a1b      	ldr	r2, [pc, #108]	; (8001518 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9b      	lsrs	r3, r3, #18
 80014b0:	3301      	adds	r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b4:	e002      	b.n	80014bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c8:	d102      	bne.n	80014d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d1f2      	bne.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d2:	695b      	ldr	r3, [r3, #20]
 80014d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014dc:	d110      	bne.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e00f      	b.n	8001502 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ee:	d007      	beq.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014f8:	4a05      	ldr	r2, [pc, #20]	; (8001510 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40007000 	.word	0x40007000
 8001514:	20000000 	.word	0x20000000
 8001518:	431bde83 	.word	0x431bde83

0800151c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d102      	bne.n	8001530 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	f000 bc02 	b.w	8001d34 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001530:	4b96      	ldr	r3, [pc, #600]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 030c 	and.w	r3, r3, #12
 8001538:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800153a:	4b94      	ldr	r3, [pc, #592]	; (800178c <HAL_RCC_OscConfig+0x270>)
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f003 0310 	and.w	r3, r3, #16
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 80e4 	beq.w	800171a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d007      	beq.n	8001568 <HAL_RCC_OscConfig+0x4c>
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	f040 808b 	bne.w	8001676 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b01      	cmp	r3, #1
 8001564:	f040 8087 	bne.w	8001676 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001568:	4b88      	ldr	r3, [pc, #544]	; (800178c <HAL_RCC_OscConfig+0x270>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <HAL_RCC_OscConfig+0x64>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e3d9      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a1a      	ldr	r2, [r3, #32]
 8001584:	4b81      	ldr	r3, [pc, #516]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0308 	and.w	r3, r3, #8
 800158c:	2b00      	cmp	r3, #0
 800158e:	d004      	beq.n	800159a <HAL_RCC_OscConfig+0x7e>
 8001590:	4b7e      	ldr	r3, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001598:	e005      	b.n	80015a6 <HAL_RCC_OscConfig+0x8a>
 800159a:	4b7c      	ldr	r3, [pc, #496]	; (800178c <HAL_RCC_OscConfig+0x270>)
 800159c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015a0:	091b      	lsrs	r3, r3, #4
 80015a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d223      	bcs.n	80015f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 fd8c 	bl	80020cc <RCC_SetFlashLatencyFromMSIRange>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e3ba      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015be:	4b73      	ldr	r3, [pc, #460]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a72      	ldr	r2, [pc, #456]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b70      	ldr	r3, [pc, #448]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	496d      	ldr	r1, [pc, #436]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015dc:	4b6b      	ldr	r3, [pc, #428]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	4968      	ldr	r1, [pc, #416]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80015ec:	4313      	orrs	r3, r2
 80015ee:	604b      	str	r3, [r1, #4]
 80015f0:	e025      	b.n	800163e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015f2:	4b66      	ldr	r3, [pc, #408]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a65      	ldr	r2, [pc, #404]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	4b63      	ldr	r3, [pc, #396]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	4960      	ldr	r1, [pc, #384]	; (800178c <HAL_RCC_OscConfig+0x270>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001610:	4b5e      	ldr	r3, [pc, #376]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	69db      	ldr	r3, [r3, #28]
 800161c:	021b      	lsls	r3, r3, #8
 800161e:	495b      	ldr	r1, [pc, #364]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fd4c 	bl	80020cc <RCC_SetFlashLatencyFromMSIRange>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e37a      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800163e:	f000 fc81 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001642:	4602      	mov	r2, r0
 8001644:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	4950      	ldr	r1, [pc, #320]	; (8001790 <HAL_RCC_OscConfig+0x274>)
 8001650:	5ccb      	ldrb	r3, [r1, r3]
 8001652:	f003 031f 	and.w	r3, r3, #31
 8001656:	fa22 f303 	lsr.w	r3, r2, r3
 800165a:	4a4e      	ldr	r2, [pc, #312]	; (8001794 <HAL_RCC_OscConfig+0x278>)
 800165c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800165e:	4b4e      	ldr	r3, [pc, #312]	; (8001798 <HAL_RCC_OscConfig+0x27c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fb7c 	bl	8000d60 <HAL_InitTick>
 8001668:	4603      	mov	r3, r0
 800166a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800166c:	7bfb      	ldrb	r3, [r7, #15]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d052      	beq.n	8001718 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001672:	7bfb      	ldrb	r3, [r7, #15]
 8001674:	e35e      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	699b      	ldr	r3, [r3, #24]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d032      	beq.n	80016e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800167e:	4b43      	ldr	r3, [pc, #268]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a42      	ldr	r2, [pc, #264]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800168a:	f7ff fbb9 	bl	8000e00 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001692:	f7ff fbb5 	bl	8000e00 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e347      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016a4:	4b39      	ldr	r3, [pc, #228]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b0:	4b36      	ldr	r3, [pc, #216]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a35      	ldr	r2, [pc, #212]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016b6:	f043 0308 	orr.w	r3, r3, #8
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	4b33      	ldr	r3, [pc, #204]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4930      	ldr	r1, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	492b      	ldr	r1, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	604b      	str	r3, [r1, #4]
 80016e2:	e01a      	b.n	800171a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016e4:	4b29      	ldr	r3, [pc, #164]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a28      	ldr	r2, [pc, #160]	; (800178c <HAL_RCC_OscConfig+0x270>)
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016f0:	f7ff fb86 	bl	8000e00 <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016f8:	f7ff fb82 	bl	8000e00 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e314      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_RCC_OscConfig+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x1dc>
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001718:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b00      	cmp	r3, #0
 8001724:	d073      	beq.n	800180e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	2b08      	cmp	r3, #8
 800172a:	d005      	beq.n	8001738 <HAL_RCC_OscConfig+0x21c>
 800172c:	69bb      	ldr	r3, [r7, #24]
 800172e:	2b0c      	cmp	r3, #12
 8001730:	d10e      	bne.n	8001750 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d10b      	bne.n	8001750 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d063      	beq.n	800180c <HAL_RCC_OscConfig+0x2f0>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d15f      	bne.n	800180c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e2f1      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001758:	d106      	bne.n	8001768 <HAL_RCC_OscConfig+0x24c>
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_RCC_OscConfig+0x270>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e025      	b.n	80017b4 <HAL_RCC_OscConfig+0x298>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001770:	d114      	bne.n	800179c <HAL_RCC_OscConfig+0x280>
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001778:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a02      	ldr	r2, [pc, #8]	; (800178c <HAL_RCC_OscConfig+0x270>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e013      	b.n	80017b4 <HAL_RCC_OscConfig+0x298>
 800178c:	40021000 	.word	0x40021000
 8001790:	08003ed4 	.word	0x08003ed4
 8001794:	20000000 	.word	0x20000000
 8001798:	20000004 	.word	0x20000004
 800179c:	4ba0      	ldr	r3, [pc, #640]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a9f      	ldr	r2, [pc, #636]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80017a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017a6:	6013      	str	r3, [r2, #0]
 80017a8:	4b9d      	ldr	r3, [pc, #628]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a9c      	ldr	r2, [pc, #624]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80017ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fb20 	bl	8000e00 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fb1c 	bl	8000e00 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e2ae      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d6:	4b92      	ldr	r3, [pc, #584]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d0f0      	beq.n	80017c4 <HAL_RCC_OscConfig+0x2a8>
 80017e2:	e014      	b.n	800180e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb0c 	bl	8000e00 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017ec:	f7ff fb08 	bl	8000e00 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b64      	cmp	r3, #100	; 0x64
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e29a      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fe:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x2d0>
 800180a:	e000      	b.n	800180e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800180c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d060      	beq.n	80018dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	2b04      	cmp	r3, #4
 800181e:	d005      	beq.n	800182c <HAL_RCC_OscConfig+0x310>
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b0c      	cmp	r3, #12
 8001824:	d119      	bne.n	800185a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	2b02      	cmp	r3, #2
 800182a:	d116      	bne.n	800185a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182c:	4b7c      	ldr	r3, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001834:	2b00      	cmp	r3, #0
 8001836:	d005      	beq.n	8001844 <HAL_RCC_OscConfig+0x328>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d101      	bne.n	8001844 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e277      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001844:	4b76      	ldr	r3, [pc, #472]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	061b      	lsls	r3, r3, #24
 8001852:	4973      	ldr	r1, [pc, #460]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001858:	e040      	b.n	80018dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d023      	beq.n	80018aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001862:	4b6f      	ldr	r3, [pc, #444]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6e      	ldr	r2, [pc, #440]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186e:	f7ff fac7 	bl	8000e00 <HAL_GetTick>
 8001872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001876:	f7ff fac3 	bl	8000e00 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e255      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001888:	4b65      	ldr	r3, [pc, #404]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001894:	4b62      	ldr	r3, [pc, #392]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	061b      	lsls	r3, r3, #24
 80018a2:	495f      	ldr	r1, [pc, #380]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80018a4:	4313      	orrs	r3, r2
 80018a6:	604b      	str	r3, [r1, #4]
 80018a8:	e018      	b.n	80018dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018aa:	4b5d      	ldr	r3, [pc, #372]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a5c      	ldr	r2, [pc, #368]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80018b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b6:	f7ff faa3 	bl	8000e00 <HAL_GetTick>
 80018ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018bc:	e008      	b.n	80018d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018be:	f7ff fa9f 	bl	8000e00 <HAL_GetTick>
 80018c2:	4602      	mov	r2, r0
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	1ad3      	subs	r3, r2, r3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d901      	bls.n	80018d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018cc:	2303      	movs	r3, #3
 80018ce:	e231      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018d0:	4b53      	ldr	r3, [pc, #332]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1f0      	bne.n	80018be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d03c      	beq.n	8001962 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	695b      	ldr	r3, [r3, #20]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d01c      	beq.n	800192a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f0:	4b4b      	ldr	r3, [pc, #300]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80018f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f6:	4a4a      	ldr	r2, [pc, #296]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fa7e 	bl	8000e00 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fa7a 	bl	8000e00 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e20c      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800191a:	4b41      	ldr	r3, [pc, #260]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 800191c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ef      	beq.n	8001908 <HAL_RCC_OscConfig+0x3ec>
 8001928:	e01b      	b.n	8001962 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800192a:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 800192c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001930:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7ff fa61 	bl	8000e00 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff fa5d 	bl	8000e00 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1ef      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001954:	4b32      	ldr	r3, [pc, #200]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1ef      	bne.n	8001942 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 80a6 	beq.w	8001abc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001974:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d10d      	bne.n	800199c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001984:	4a26      	ldr	r2, [pc, #152]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001986:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800198a:	6593      	str	r3, [r2, #88]	; 0x58
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 800198e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001998:	2301      	movs	r3, #1
 800199a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800199c:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <HAL_RCC_OscConfig+0x508>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d118      	bne.n	80019da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019a8:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <HAL_RCC_OscConfig+0x508>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1d      	ldr	r2, [pc, #116]	; (8001a24 <HAL_RCC_OscConfig+0x508>)
 80019ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019b4:	f7ff fa24 	bl	8000e00 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019bc:	f7ff fa20 	bl	8000e00 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1b2      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_RCC_OscConfig+0x508>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0f0      	beq.n	80019bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d108      	bne.n	80019f4 <HAL_RCC_OscConfig+0x4d8>
 80019e2:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80019e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e8:	4a0d      	ldr	r2, [pc, #52]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f2:	e029      	b.n	8001a48 <HAL_RCC_OscConfig+0x52c>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d115      	bne.n	8001a28 <HAL_RCC_OscConfig+0x50c>
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 80019fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a02:	4a07      	ldr	r2, [pc, #28]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001a04:	f043 0304 	orr.w	r3, r3, #4
 8001a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a0c:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a12:	4a03      	ldr	r2, [pc, #12]	; (8001a20 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a1c:	e014      	b.n	8001a48 <HAL_RCC_OscConfig+0x52c>
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40007000 	.word	0x40007000
 8001a28:	4b9a      	ldr	r3, [pc, #616]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2e:	4a99      	ldr	r2, [pc, #612]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a38:	4b96      	ldr	r3, [pc, #600]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	4a95      	ldr	r2, [pc, #596]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001a40:	f023 0304 	bic.w	r3, r3, #4
 8001a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d016      	beq.n	8001a7e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9d6 	bl	8000e00 <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff f9d2 	bl	8000e00 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e162      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a6e:	4b89      	ldr	r3, [pc, #548]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d0ed      	beq.n	8001a58 <HAL_RCC_OscConfig+0x53c>
 8001a7c:	e015      	b.n	8001aaa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f9bf 	bl	8000e00 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a84:	e00a      	b.n	8001a9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a86:	f7ff f9bb 	bl	8000e00 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d901      	bls.n	8001a9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e14b      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a9c:	4b7d      	ldr	r3, [pc, #500]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1ed      	bne.n	8001a86 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aaa:	7ffb      	ldrb	r3, [r7, #31]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d105      	bne.n	8001abc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ab0:	4b78      	ldr	r3, [pc, #480]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	4a77      	ldr	r2, [pc, #476]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d03c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d01c      	beq.n	8001b0a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ad0:	4b70      	ldr	r3, [pc, #448]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ad6:	4a6f      	ldr	r2, [pc, #444]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001ad8:	f043 0301 	orr.w	r3, r3, #1
 8001adc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae0:	f7ff f98e 	bl	8000e00 <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae8:	f7ff f98a 	bl	8000e00 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e11c      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001afa:	4b66      	ldr	r3, [pc, #408]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ef      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x5cc>
 8001b08:	e01b      	b.n	8001b42 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b0a:	4b62      	ldr	r3, [pc, #392]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001b0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b10:	4a60      	ldr	r2, [pc, #384]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001b12:	f023 0301 	bic.w	r3, r3, #1
 8001b16:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b1a:	f7ff f971 	bl	8000e00 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b22:	f7ff f96d 	bl	8000e00 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0ff      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b34:	4b57      	ldr	r3, [pc, #348]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d1ef      	bne.n	8001b22 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80f3 	beq.w	8001d32 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	f040 80c9 	bne.w	8001ce8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b56:	4b4f      	ldr	r3, [pc, #316]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	f003 0203 	and.w	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d12c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b74:	3b01      	subs	r3, #1
 8001b76:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d123      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b86:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d11b      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d113      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba6:	085b      	lsrs	r3, r3, #1
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d109      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	085b      	lsrs	r3, r3, #1
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d06b      	beq.n	8001c9c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b0c      	cmp	r3, #12
 8001bc8:	d062      	beq.n	8001c90 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bca:	4b32      	ldr	r3, [pc, #200]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e0ac      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bda:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a2d      	ldr	r2, [pc, #180]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001be0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be6:	f7ff f90b 	bl	8000e00 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff f907 	bl	8000e00 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e099      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c00:	4b24      	ldr	r3, [pc, #144]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1f0      	bne.n	8001bee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <HAL_RCC_OscConfig+0x77c>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	0112      	lsls	r2, r2, #4
 8001c20:	4311      	orrs	r1, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c26:	0212      	lsls	r2, r2, #8
 8001c28:	4311      	orrs	r1, r2
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c2e:	0852      	lsrs	r2, r2, #1
 8001c30:	3a01      	subs	r2, #1
 8001c32:	0552      	lsls	r2, r2, #21
 8001c34:	4311      	orrs	r1, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c3a:	0852      	lsrs	r2, r2, #1
 8001c3c:	3a01      	subs	r2, #1
 8001c3e:	0652      	lsls	r2, r2, #25
 8001c40:	4311      	orrs	r1, r2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c46:	06d2      	lsls	r2, r2, #27
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	4912      	ldr	r1, [pc, #72]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c5c:	4b0d      	ldr	r3, [pc, #52]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c68:	f7ff f8ca 	bl	8000e00 <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f8c6 	bl	8000e00 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e058      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <HAL_RCC_OscConfig+0x778>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8e:	e050      	b.n	8001d32 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e04f      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
 8001c94:	40021000 	.word	0x40021000
 8001c98:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d144      	bne.n	8001d32 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a23      	ldr	r2, [pc, #140]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001cae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cb4:	4b21      	ldr	r3, [pc, #132]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	4a20      	ldr	r2, [pc, #128]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cc0:	f7ff f89e 	bl	8000e00 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc8:	f7ff f89a 	bl	8000e00 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e02c      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cda:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x7ac>
 8001ce6:	e024      	b.n	8001d32 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2b0c      	cmp	r3, #12
 8001cec:	d01f      	beq.n	8001d2e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a12      	ldr	r2, [pc, #72]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001cf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfa:	f7ff f881 	bl	8000e00 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff f87d 	bl	8000e00 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e00f      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1f0      	bne.n	8001d02 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4905      	ldr	r1, [pc, #20]	; (8001d3c <HAL_RCC_OscConfig+0x820>)
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_OscConfig+0x824>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
 8001d2c:	e001      	b.n	8001d32 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	feeefffc 	.word	0xfeeefffc

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0e7      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4970      	ldr	r1, [pc, #448]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0cf      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d908      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4960      	ldr	r1, [pc, #384]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d04c      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d121      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0a6      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d115      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e09a      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dfa:	4b4e      	ldr	r3, [pc, #312]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e08e      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e086      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4943      	ldr	r1, [pc, #268]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2c:	f7fe ffe8 	bl	8000e00 <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7fe ffe4 	bl	8000e00 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e06e      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d208      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	492b      	ldr	r1, [pc, #172]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d210      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4923      	ldr	r1, [pc, #140]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e036      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4918      	ldr	r1, [pc, #96]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4910      	ldr	r1, [pc, #64]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef8:	f000 f824 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	490b      	ldr	r1, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1f4>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001f16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1fc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe ff1f 	bl	8000d60 <HAL_InitTick>
 8001f22:	4603      	mov	r3, r0
 8001f24:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f26:	7afb      	ldrb	r3, [r7, #11]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08003ed4 	.word	0x08003ed4
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x34>
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d121      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11e      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f78:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f84:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e005      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e004      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d134      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0xa6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fe8:	e005      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fec:	617b      	str	r3, [r7, #20]
      break;
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff2:	617b      	str	r3, [r7, #20]
      break;
 8001ff4:	e002      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	fb03 f202 	mul.w	r2, r3, r2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	0e5b      	lsrs	r3, r3, #25
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	3301      	adds	r3, #1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800203c:	69bb      	ldr	r3, [r7, #24]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	08003eec 	.word	0x08003eec
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200

0800205c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_GetHCLKFreq+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000000 	.word	0x20000000

08002074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002078:	f7ff fff0 	bl	800205c <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4904      	ldr	r1, [pc, #16]	; (800209c <HAL_RCC_GetPCLK1Freq+0x28>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	08003ee4 	.word	0x08003ee4

080020a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020a4:	f7ff ffda 	bl	800205c <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0adb      	lsrs	r3, r3, #11
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4904      	ldr	r1, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08003ee4 	.word	0x08003ee4

080020cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020e4:	f7ff f9b6 	bl	8001454 <HAL_PWREx_GetVoltageRange>
 80020e8:	6178      	str	r0, [r7, #20]
 80020ea:	e014      	b.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6593      	str	r3, [r2, #88]	; 0x58
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002104:	f7ff f9a6 	bl	8001454 <HAL_PWREx_GetVoltageRange>
 8002108:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211c:	d10b      	bne.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d919      	bls.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2ba0      	cmp	r3, #160	; 0xa0
 8002128:	d902      	bls.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800212a:	2302      	movs	r3, #2
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e013      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e010      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d902      	bls.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800213c:	2303      	movs	r3, #3
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e00a      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b80      	cmp	r3, #128	; 0x80
 8002146:	d102      	bne.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002148:	2302      	movs	r3, #2
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e004      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b70      	cmp	r3, #112	; 0x70
 8002152:	d101      	bne.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002154:	2301      	movs	r3, #1
 8002156:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 0207 	bic.w	r2, r3, #7
 8002160:	4909      	ldr	r1, [pc, #36]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	429a      	cmp	r2, r3
 8002174:	d001      	beq.n	800217a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	40022000 	.word	0x40022000

0800218c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002194:	2300      	movs	r3, #0
 8002196:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002198:	2300      	movs	r3, #0
 800219a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d031      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b0:	d01a      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80021b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b6:	d814      	bhi.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d009      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c0:	d10f      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80021c2:	4b5d      	ldr	r3, [pc, #372]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	4a5c      	ldr	r2, [pc, #368]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021cc:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ce:	e00c      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f9ce 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e0:	e003      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	74fb      	strb	r3, [r7, #19]
      break;
 80021e6:	e000      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80021e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ea:	7cfb      	ldrb	r3, [r7, #19]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10b      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021f0:	4b51      	ldr	r3, [pc, #324]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021fe:	494e      	ldr	r1, [pc, #312]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002206:	e001      	b.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002214:	2b00      	cmp	r3, #0
 8002216:	f000 809e 	beq.w	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	2300      	movs	r3, #0
 800221c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800221e:	4b46      	ldr	r3, [pc, #280]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800222e:	2300      	movs	r3, #0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d00d      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b40      	ldr	r3, [pc, #256]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a3f      	ldr	r2, [pc, #252]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b3d      	ldr	r3, [pc, #244]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800224c:	2301      	movs	r3, #1
 800224e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002250:	4b3a      	ldr	r3, [pc, #232]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a39      	ldr	r2, [pc, #228]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800225a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800225c:	f7fe fdd0 	bl	8000e00 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002262:	e009      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002264:	f7fe fdcc 	bl	8000e00 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d902      	bls.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	74fb      	strb	r3, [r7, #19]
        break;
 8002276:	e005      	b.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002280:	2b00      	cmp	r3, #0
 8002282:	d0ef      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002284:	7cfb      	ldrb	r3, [r7, #19]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d15a      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800228a:	4b2b      	ldr	r3, [pc, #172]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800228c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002290:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002294:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01e      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d019      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022b0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80022b2:	4b21      	ldr	r3, [pc, #132]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022c2:	4b1d      	ldr	r3, [pc, #116]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c8:	4a1b      	ldr	r2, [pc, #108]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022d2:	4a19      	ldr	r2, [pc, #100]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d016      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fd8c 	bl	8000e00 <HAL_GetTick>
 80022e8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ea:	e00b      	b.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ec:	f7fe fd88 	bl	8000e00 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d902      	bls.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	74fb      	strb	r3, [r7, #19]
            break;
 8002302:	e006      	b.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ec      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002312:	7cfb      	ldrb	r3, [r7, #19]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d10b      	bne.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002318:	4b07      	ldr	r3, [pc, #28]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002326:	4904      	ldr	r1, [pc, #16]	; (8002338 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002328:	4313      	orrs	r3, r2
 800232a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800232e:	e009      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002330:	7cfb      	ldrb	r3, [r7, #19]
 8002332:	74bb      	strb	r3, [r7, #18]
 8002334:	e006      	b.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002336:	bf00      	nop
 8002338:	40021000 	.word	0x40021000
 800233c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002344:	7c7b      	ldrb	r3, [r7, #17]
 8002346:	2b01      	cmp	r3, #1
 8002348:	d105      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800234a:	4b8a      	ldr	r3, [pc, #552]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a89      	ldr	r2, [pc, #548]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002362:	4b84      	ldr	r3, [pc, #528]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002368:	f023 0203 	bic.w	r2, r3, #3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	4980      	ldr	r1, [pc, #512]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002384:	4b7b      	ldr	r3, [pc, #492]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238a:	f023 020c 	bic.w	r2, r3, #12
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002392:	4978      	ldr	r1, [pc, #480]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0320 	and.w	r3, r3, #32
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00a      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023a6:	4b73      	ldr	r3, [pc, #460]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b4:	496f      	ldr	r1, [pc, #444]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00a      	beq.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023c8:	4b6a      	ldr	r3, [pc, #424]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	4967      	ldr	r1, [pc, #412]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d00a      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023ea:	4b62      	ldr	r3, [pc, #392]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f8:	495e      	ldr	r1, [pc, #376]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800240c:	4b59      	ldr	r3, [pc, #356]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002412:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241a:	4956      	ldr	r1, [pc, #344]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800241c:	4313      	orrs	r3, r2
 800241e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800242e:	4b51      	ldr	r3, [pc, #324]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243c:	494d      	ldr	r1, [pc, #308]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d028      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002450:	4b48      	ldr	r3, [pc, #288]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	4945      	ldr	r1, [pc, #276]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002460:	4313      	orrs	r3, r2
 8002462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800246e:	d106      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002470:	4b40      	ldr	r3, [pc, #256]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	4a3f      	ldr	r2, [pc, #252]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800247a:	60d3      	str	r3, [r2, #12]
 800247c:	e011      	b.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002486:	d10c      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3304      	adds	r3, #4
 800248c:	2101      	movs	r1, #1
 800248e:	4618      	mov	r0, r3
 8002490:	f000 f872 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800249e:	7cfb      	ldrb	r3, [r7, #19]
 80024a0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d028      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024ae:	4b31      	ldr	r3, [pc, #196]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024bc:	492d      	ldr	r1, [pc, #180]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024cc:	d106      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024ce:	4b29      	ldr	r3, [pc, #164]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	4a28      	ldr	r2, [pc, #160]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024d8:	60d3      	str	r3, [r2, #12]
 80024da:	e011      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2101      	movs	r1, #1
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 f843 	bl	8002578 <RCCEx_PLLSAI1_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024f6:	7cfb      	ldrb	r3, [r7, #19]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80024fc:	7cfb      	ldrb	r3, [r7, #19]
 80024fe:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01c      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800250e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002512:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	4916      	ldr	r1, [pc, #88]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251c:	4313      	orrs	r3, r2
 800251e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002526:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800252a:	d10c      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	2102      	movs	r1, #2
 8002532:	4618      	mov	r0, r3
 8002534:	f000 f820 	bl	8002578 <RCCEx_PLLSAI1_Config>
 8002538:	4603      	mov	r3, r0
 800253a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800253c:	7cfb      	ldrb	r3, [r7, #19]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002552:	4b08      	ldr	r3, [pc, #32]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002558:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002560:	4904      	ldr	r1, [pc, #16]	; (8002574 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002568:	7cbb      	ldrb	r3, [r7, #18]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3718      	adds	r7, #24
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002586:	4b74      	ldr	r3, [pc, #464]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d018      	beq.n	80025c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002592:	4b71      	ldr	r3, [pc, #452]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	f003 0203 	and.w	r2, r3, #3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d10d      	bne.n	80025be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
       ||
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80025aa:	4b6b      	ldr	r3, [pc, #428]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	1c5a      	adds	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
       ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d047      	beq.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e044      	b.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d018      	beq.n	80025fe <RCCEx_PLLSAI1_Config+0x86>
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d825      	bhi.n	800261c <RCCEx_PLLSAI1_Config+0xa4>
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d002      	beq.n	80025da <RCCEx_PLLSAI1_Config+0x62>
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d009      	beq.n	80025ec <RCCEx_PLLSAI1_Config+0x74>
 80025d8:	e020      	b.n	800261c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025da:	4b5f      	ldr	r3, [pc, #380]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11d      	bne.n	8002622 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ea:	e01a      	b.n	8002622 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025ec:	4b5a      	ldr	r3, [pc, #360]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d116      	bne.n	8002626 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025fc:	e013      	b.n	8002626 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025fe:	4b56      	ldr	r3, [pc, #344]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260a:	4b53      	ldr	r3, [pc, #332]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800261a:	e006      	b.n	800262a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e004      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002622:	bf00      	nop
 8002624:	e002      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800262a:	bf00      	nop
    }

    if(status == HAL_OK)
 800262c:	7bfb      	ldrb	r3, [r7, #15]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002632:	4b49      	ldr	r3, [pc, #292]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6819      	ldr	r1, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	3b01      	subs	r3, #1
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	430b      	orrs	r3, r1
 8002648:	4943      	ldr	r1, [pc, #268]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800264a:	4313      	orrs	r3, r2
 800264c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d17c      	bne.n	800274e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002654:	4b40      	ldr	r3, [pc, #256]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a3f      	ldr	r2, [pc, #252]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800265a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800265e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002660:	f7fe fbce 	bl	8000e00 <HAL_GetTick>
 8002664:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002666:	e009      	b.n	800267c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002668:	f7fe fbca 	bl	8000e00 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d902      	bls.n	800267c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	73fb      	strb	r3, [r7, #15]
        break;
 800267a:	e005      	b.n	8002688 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1ef      	bne.n	8002668 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002688:	7bfb      	ldrb	r3, [r7, #15]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d15f      	bne.n	800274e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d110      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002694:	4b30      	ldr	r3, [pc, #192]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	68d2      	ldr	r2, [r2, #12]
 80026aa:	06d2      	lsls	r2, r2, #27
 80026ac:	430a      	orrs	r2, r1
 80026ae:	492a      	ldr	r1, [pc, #168]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	610b      	str	r3, [r1, #16]
 80026b4:	e027      	b.n	8002706 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d112      	bne.n	80026e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026bc:	4b26      	ldr	r3, [pc, #152]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026be:	691b      	ldr	r3, [r3, #16]
 80026c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80026c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6912      	ldr	r2, [r2, #16]
 80026d2:	0852      	lsrs	r2, r2, #1
 80026d4:	3a01      	subs	r2, #1
 80026d6:	0552      	lsls	r2, r2, #21
 80026d8:	430a      	orrs	r2, r1
 80026da:	491f      	ldr	r1, [pc, #124]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	610b      	str	r3, [r1, #16]
 80026e0:	e011      	b.n	8002706 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80026ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	0211      	lsls	r1, r2, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6952      	ldr	r2, [r2, #20]
 80026f8:	0852      	lsrs	r2, r2, #1
 80026fa:	3a01      	subs	r2, #1
 80026fc:	0652      	lsls	r2, r2, #25
 80026fe:	430a      	orrs	r2, r1
 8002700:	4915      	ldr	r1, [pc, #84]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002702:	4313      	orrs	r3, r2
 8002704:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002706:	4b14      	ldr	r3, [pc, #80]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a13      	ldr	r2, [pc, #76]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002710:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fe fb75 	bl	8000e00 <HAL_GetTick>
 8002716:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002718:	e009      	b.n	800272e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800271a:	f7fe fb71 	bl	8000e00 <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d902      	bls.n	800272e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	73fb      	strb	r3, [r7, #15]
          break;
 800272c:	e005      	b.n	800273a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800272e:	4b0a      	ldr	r3, [pc, #40]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d0ef      	beq.n	800271a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800273a:	7bfb      	ldrb	r3, [r7, #15]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002740:	4b05      	ldr	r3, [pc, #20]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002742:	691a      	ldr	r2, [r3, #16]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	4903      	ldr	r1, [pc, #12]	; (8002758 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800274e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d101      	bne.n	800276e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e040      	b.n	80027f0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002772:	2b00      	cmp	r3, #0
 8002774:	d106      	bne.n	8002784 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7fe fa4c 	bl	8000c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2224      	movs	r2, #36	; 0x24
 8002788:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fbf2 	bl	8002f84 <UART_SetConfig>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e022      	b.n	80027f0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d002      	beq.n	80027b8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 fe12 	bl	80033dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689a      	ldr	r2, [r3, #8]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 fe99 	bl	8003520 <UART_CheckIdleState>
 80027ee:	4603      	mov	r3, r0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b08b      	sub	sp, #44	; 0x2c
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	4613      	mov	r3, r2
 8002804:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800280a:	2b20      	cmp	r3, #32
 800280c:	d156      	bne.n	80028bc <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d002      	beq.n	800281a <HAL_UART_Transmit_IT+0x22>
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e04f      	b.n	80028be <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_UART_Transmit_IT+0x34>
 8002828:	2302      	movs	r3, #2
 800282a:	e048      	b.n	80028be <HAL_UART_Transmit_IT+0xc6>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	88fa      	ldrh	r2, [r7, #6]
 800283e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	88fa      	ldrh	r2, [r7, #6]
 8002846:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2221      	movs	r2, #33	; 0x21
 800285c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002866:	d107      	bne.n	8002878 <HAL_UART_Transmit_IT+0x80>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d103      	bne.n	8002878 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4a16      	ldr	r2, [pc, #88]	; (80028cc <HAL_UART_Transmit_IT+0xd4>)
 8002874:	669a      	str	r2, [r3, #104]	; 0x68
 8002876:	e002      	b.n	800287e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a15      	ldr	r2, [pc, #84]	; (80028d0 <HAL_UART_Transmit_IT+0xd8>)
 800287c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	e853 3f00 	ldrex	r3, [r3]
 8002892:	613b      	str	r3, [r7, #16]
   return(result);
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800289a:	627b      	str	r3, [r7, #36]	; 0x24
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	461a      	mov	r2, r3
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a8:	69f9      	ldr	r1, [r7, #28]
 80028aa:	6a3a      	ldr	r2, [r7, #32]
 80028ac:	e841 2300 	strex	r3, r2, [r1]
 80028b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80028b2:	69bb      	ldr	r3, [r7, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d1e6      	bne.n	8002886 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	e000      	b.n	80028be <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
  }
}
 80028be:	4618      	mov	r0, r3
 80028c0:	372c      	adds	r7, #44	; 0x2c
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	08003a7b 	.word	0x08003a7b
 80028d0:	080039c3 	.word	0x080039c3

080028d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	; 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	4613      	mov	r3, r2
 80028e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d142      	bne.n	8002970 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d002      	beq.n	80028f6 <HAL_UART_Receive_IT+0x22>
 80028f0:	88fb      	ldrh	r3, [r7, #6]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e03b      	b.n	8002972 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_UART_Receive_IT+0x34>
 8002904:	2302      	movs	r3, #2
 8002906:	e034      	b.n	8002972 <HAL_UART_Receive_IT+0x9e>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2200      	movs	r2, #0
 8002914:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <HAL_UART_Receive_IT+0xa8>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d01f      	beq.n	8002960 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d018      	beq.n	8002960 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	e853 3f00 	ldrex	r3, [r3]
 800293a:	613b      	str	r3, [r7, #16]
   return(result);
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002942:	627b      	str	r3, [r7, #36]	; 0x24
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	461a      	mov	r2, r3
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	623b      	str	r3, [r7, #32]
 800294e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002950:	69f9      	ldr	r1, [r7, #28]
 8002952:	6a3a      	ldr	r2, [r7, #32]
 8002954:	e841 2300 	strex	r3, r2, [r1]
 8002958:	61bb      	str	r3, [r7, #24]
   return(result);
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e6      	bne.n	800292e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002960:	88fb      	ldrh	r3, [r7, #6]
 8002962:	461a      	mov	r2, r3
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 fee8 	bl	800373c <UART_Start_Receive_IT>
 800296c:	4603      	mov	r3, r0
 800296e:	e000      	b.n	8002972 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	3728      	adds	r7, #40	; 0x28
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	40008000 	.word	0x40008000

08002980 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b0ba      	sub	sp, #232	; 0xe8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029aa:	f640 030f 	movw	r3, #2063	; 0x80f
 80029ae:	4013      	ands	r3, r2
 80029b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d115      	bne.n	80029e8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00f      	beq.n	80029e8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d009      	beq.n	80029e8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 82a6 	beq.w	8002f2a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	4798      	blx	r3
      }
      return;
 80029e6:	e2a0      	b.n	8002f2a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80029e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 8117 	beq.w	8002c20 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a02:	4b85      	ldr	r3, [pc, #532]	; (8002c18 <HAL_UART_IRQHandler+0x298>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	f000 810a 	beq.w	8002c20 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d011      	beq.n	8002a3c <HAL_UART_IRQHandler+0xbc>
 8002a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d011      	beq.n	8002a6c <HAL_UART_IRQHandler+0xec>
 8002a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a62:	f043 0204 	orr.w	r2, r3, #4
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d011      	beq.n	8002a9c <HAL_UART_IRQHandler+0x11c>
 8002a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2204      	movs	r2, #4
 8002a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a92:	f043 0202 	orr.w	r2, r3, #2
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa0:	f003 0308 	and.w	r3, r3, #8
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d017      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d105      	bne.n	8002ac0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ab4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ab8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00b      	beq.n	8002ad8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ace:	f043 0208 	orr.w	r2, r3, #8
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d012      	beq.n	8002b0a <HAL_UART_IRQHandler+0x18a>
 8002ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00c      	beq.n	8002b0a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b00:	f043 0220 	orr.w	r2, r3, #32
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 820c 	beq.w	8002f2e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00d      	beq.n	8002b3e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b52:	2b40      	cmp	r3, #64	; 0x40
 8002b54:	d005      	beq.n	8002b62 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d04f      	beq.n	8002c02 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 feb4 	bl	80038d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b72:	2b40      	cmp	r3, #64	; 0x40
 8002b74:	d141      	bne.n	8002bfa <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002b84:	e853 3f00 	ldrex	r3, [r3]
 8002b88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002b8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3308      	adds	r3, #8
 8002b9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ba2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002baa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bb2:	e841 2300 	strex	r3, r2, [r1]
 8002bb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1d9      	bne.n	8002b76 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d013      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bce:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <HAL_UART_IRQHandler+0x29c>)
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f7fe fa91 	bl	80010fe <HAL_DMA_Abort_IT>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d017      	beq.n	8002c12 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002bec:	4610      	mov	r0, r2
 8002bee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf0:	e00f      	b.n	8002c12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9b0 	bl	8002f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bf8:	e00b      	b.n	8002c12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f9ac 	bl	8002f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c00:	e007      	b.n	8002c12 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f9a8 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002c10:	e18d      	b.n	8002f2e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c12:	bf00      	nop
    return;
 8002c14:	e18b      	b.n	8002f2e <HAL_UART_IRQHandler+0x5ae>
 8002c16:	bf00      	nop
 8002c18:	04000120 	.word	0x04000120
 8002c1c:	08003997 	.word	0x08003997

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 8146 	bne.w	8002eb6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c2e:	f003 0310 	and.w	r3, r3, #16
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	f000 813f 	beq.w	8002eb6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f000 8138 	beq.w	8002eb6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2210      	movs	r2, #16
 8002c4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c58:	2b40      	cmp	r3, #64	; 0x40
 8002c5a:	f040 80b4 	bne.w	8002dc6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c6a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 815f 	beq.w	8002f32 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002c7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	f080 8157 	bcs.w	8002f32 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 8085 	bne.w	8002daa <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002cda:	e841 2300 	strex	r3, r2, [r1]
 8002cde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1da      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3308      	adds	r3, #8
 8002cf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	3308      	adds	r3, #8
 8002d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e1      	bne.n	8002cea <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	3308      	adds	r3, #8
 8002d2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d30:	e853 3f00 	ldrex	r3, [r3]
 8002d34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	3308      	adds	r3, #8
 8002d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e3      	bne.n	8002d26 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d72:	e853 3f00 	ldrex	r3, [r3]
 8002d76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002d78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d7a:	f023 0310 	bic.w	r3, r3, #16
 8002d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	461a      	mov	r2, r3
 8002d88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002d92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d94:	e841 2300 	strex	r3, r2, [r1]
 8002d98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d1e4      	bne.n	8002d6a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe f96c 	bl	8001082 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 f8d4 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002dc4:	e0b5      	b.n	8002f32 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 80a7 	beq.w	8002f36 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 80a2 	beq.w	8002f36 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e14:	647b      	str	r3, [r7, #68]	; 0x44
 8002e16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e4      	bne.n	8002df2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e32:	e853 3f00 	ldrex	r3, [r3]
 8002e36:	623b      	str	r3, [r7, #32]
   return(result);
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	f023 0301 	bic.w	r3, r3, #1
 8002e3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	3308      	adds	r3, #8
 8002e48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e4c:	633a      	str	r2, [r7, #48]	; 0x30
 8002e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e3      	bne.n	8002e28 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2220      	movs	r2, #32
 8002e64:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f023 0310 	bic.w	r3, r3, #16
 8002e86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e98:	69b9      	ldr	r1, [r7, #24]
 8002e9a:	69fa      	ldr	r2, [r7, #28]
 8002e9c:	e841 2300 	strex	r3, r2, [r1]
 8002ea0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d1e4      	bne.n	8002e72 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ea8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002eac:	4619      	mov	r1, r3
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f85c 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eb4:	e03f      	b.n	8002f36 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002eb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x560>
 8002ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d008      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ed6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 ffb8 	bl	8003e4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ede:	e02d      	b.n	8002f3c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d008      	beq.n	8002f0a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01c      	beq.n	8002f3a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	4798      	blx	r3
    }
    return;
 8002f08:	e017      	b.n	8002f3a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d012      	beq.n	8002f3c <HAL_UART_IRQHandler+0x5bc>
 8002f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fe09 	bl	8003b3a <UART_EndTransmit_IT>
    return;
 8002f28:	e008      	b.n	8002f3c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f2a:	bf00      	nop
 8002f2c:	e006      	b.n	8002f3c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002f2e:	bf00      	nop
 8002f30:	e004      	b.n	8002f3c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f32:	bf00      	nop
 8002f34:	e002      	b.n	8002f3c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f36:	bf00      	nop
 8002f38:	e000      	b.n	8002f3c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002f3a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f3c:	37e8      	adds	r7, #232	; 0xe8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop

08002f44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f88:	b08a      	sub	sp, #40	; 0x28
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	4bb4      	ldr	r3, [pc, #720]	; (8003284 <UART_SetConfig+0x300>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	6812      	ldr	r2, [r2, #0]
 8002fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4aa9      	ldr	r2, [pc, #676]	; (8003288 <UART_SetConfig+0x304>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d004      	beq.n	8002ff0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a1b      	ldr	r3, [r3, #32]
 8002fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fec:	4313      	orrs	r3, r2
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	430a      	orrs	r2, r1
 8003002:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4aa0      	ldr	r2, [pc, #640]	; (800328c <UART_SetConfig+0x308>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d126      	bne.n	800305c <UART_SetConfig+0xd8>
 800300e:	4ba0      	ldr	r3, [pc, #640]	; (8003290 <UART_SetConfig+0x30c>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d81b      	bhi.n	8003054 <UART_SetConfig+0xd0>
 800301c:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <UART_SetConfig+0xa0>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003035 	.word	0x08003035
 8003028:	08003045 	.word	0x08003045
 800302c:	0800303d 	.word	0x0800303d
 8003030:	0800304d 	.word	0x0800304d
 8003034:	2301      	movs	r3, #1
 8003036:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800303a:	e080      	b.n	800313e <UART_SetConfig+0x1ba>
 800303c:	2302      	movs	r3, #2
 800303e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003042:	e07c      	b.n	800313e <UART_SetConfig+0x1ba>
 8003044:	2304      	movs	r3, #4
 8003046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800304a:	e078      	b.n	800313e <UART_SetConfig+0x1ba>
 800304c:	2308      	movs	r3, #8
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003052:	e074      	b.n	800313e <UART_SetConfig+0x1ba>
 8003054:	2310      	movs	r3, #16
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305a:	e070      	b.n	800313e <UART_SetConfig+0x1ba>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a8c      	ldr	r2, [pc, #560]	; (8003294 <UART_SetConfig+0x310>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d138      	bne.n	80030d8 <UART_SetConfig+0x154>
 8003066:	4b8a      	ldr	r3, [pc, #552]	; (8003290 <UART_SetConfig+0x30c>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306c:	f003 030c 	and.w	r3, r3, #12
 8003070:	2b0c      	cmp	r3, #12
 8003072:	d82d      	bhi.n	80030d0 <UART_SetConfig+0x14c>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <UART_SetConfig+0xf8>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030b1 	.word	0x080030b1
 8003080:	080030d1 	.word	0x080030d1
 8003084:	080030d1 	.word	0x080030d1
 8003088:	080030d1 	.word	0x080030d1
 800308c:	080030c1 	.word	0x080030c1
 8003090:	080030d1 	.word	0x080030d1
 8003094:	080030d1 	.word	0x080030d1
 8003098:	080030d1 	.word	0x080030d1
 800309c:	080030b9 	.word	0x080030b9
 80030a0:	080030d1 	.word	0x080030d1
 80030a4:	080030d1 	.word	0x080030d1
 80030a8:	080030d1 	.word	0x080030d1
 80030ac:	080030c9 	.word	0x080030c9
 80030b0:	2300      	movs	r3, #0
 80030b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b6:	e042      	b.n	800313e <UART_SetConfig+0x1ba>
 80030b8:	2302      	movs	r3, #2
 80030ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030be:	e03e      	b.n	800313e <UART_SetConfig+0x1ba>
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c6:	e03a      	b.n	800313e <UART_SetConfig+0x1ba>
 80030c8:	2308      	movs	r3, #8
 80030ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ce:	e036      	b.n	800313e <UART_SetConfig+0x1ba>
 80030d0:	2310      	movs	r3, #16
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d6:	e032      	b.n	800313e <UART_SetConfig+0x1ba>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a6a      	ldr	r2, [pc, #424]	; (8003288 <UART_SetConfig+0x304>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d12a      	bne.n	8003138 <UART_SetConfig+0x1b4>
 80030e2:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <UART_SetConfig+0x30c>)
 80030e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80030ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f0:	d01a      	beq.n	8003128 <UART_SetConfig+0x1a4>
 80030f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80030f6:	d81b      	bhi.n	8003130 <UART_SetConfig+0x1ac>
 80030f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030fc:	d00c      	beq.n	8003118 <UART_SetConfig+0x194>
 80030fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003102:	d815      	bhi.n	8003130 <UART_SetConfig+0x1ac>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <UART_SetConfig+0x18c>
 8003108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310c:	d008      	beq.n	8003120 <UART_SetConfig+0x19c>
 800310e:	e00f      	b.n	8003130 <UART_SetConfig+0x1ac>
 8003110:	2300      	movs	r3, #0
 8003112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003116:	e012      	b.n	800313e <UART_SetConfig+0x1ba>
 8003118:	2302      	movs	r3, #2
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800311e:	e00e      	b.n	800313e <UART_SetConfig+0x1ba>
 8003120:	2304      	movs	r3, #4
 8003122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003126:	e00a      	b.n	800313e <UART_SetConfig+0x1ba>
 8003128:	2308      	movs	r3, #8
 800312a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312e:	e006      	b.n	800313e <UART_SetConfig+0x1ba>
 8003130:	2310      	movs	r3, #16
 8003132:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003136:	e002      	b.n	800313e <UART_SetConfig+0x1ba>
 8003138:	2310      	movs	r3, #16
 800313a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a51      	ldr	r2, [pc, #324]	; (8003288 <UART_SetConfig+0x304>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d17a      	bne.n	800323e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800314c:	2b08      	cmp	r3, #8
 800314e:	d824      	bhi.n	800319a <UART_SetConfig+0x216>
 8003150:	a201      	add	r2, pc, #4	; (adr r2, 8003158 <UART_SetConfig+0x1d4>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	0800317d 	.word	0x0800317d
 800315c:	0800319b 	.word	0x0800319b
 8003160:	08003185 	.word	0x08003185
 8003164:	0800319b 	.word	0x0800319b
 8003168:	0800318b 	.word	0x0800318b
 800316c:	0800319b 	.word	0x0800319b
 8003170:	0800319b 	.word	0x0800319b
 8003174:	0800319b 	.word	0x0800319b
 8003178:	08003193 	.word	0x08003193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800317c:	f7fe ff7a 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 8003180:	61f8      	str	r0, [r7, #28]
        break;
 8003182:	e010      	b.n	80031a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003184:	4b44      	ldr	r3, [pc, #272]	; (8003298 <UART_SetConfig+0x314>)
 8003186:	61fb      	str	r3, [r7, #28]
        break;
 8003188:	e00d      	b.n	80031a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800318a:	f7fe fedb 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 800318e:	61f8      	str	r0, [r7, #28]
        break;
 8003190:	e009      	b.n	80031a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003196:	61fb      	str	r3, [r7, #28]
        break;
 8003198:	e005      	b.n	80031a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8107 	beq.w	80033bc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	69fa      	ldr	r2, [r7, #28]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d305      	bcc.n	80031ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031c4:	69fa      	ldr	r2, [r7, #28]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d903      	bls.n	80031d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031d0:	e0f4      	b.n	80033bc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	2200      	movs	r2, #0
 80031d6:	461c      	mov	r4, r3
 80031d8:	4615      	mov	r5, r2
 80031da:	f04f 0200 	mov.w	r2, #0
 80031de:	f04f 0300 	mov.w	r3, #0
 80031e2:	022b      	lsls	r3, r5, #8
 80031e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80031e8:	0222      	lsls	r2, r4, #8
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	6849      	ldr	r1, [r1, #4]
 80031ee:	0849      	lsrs	r1, r1, #1
 80031f0:	2000      	movs	r0, #0
 80031f2:	4688      	mov	r8, r1
 80031f4:	4681      	mov	r9, r0
 80031f6:	eb12 0a08 	adds.w	sl, r2, r8
 80031fa:	eb43 0b09 	adc.w	fp, r3, r9
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	607a      	str	r2, [r7, #4]
 8003208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800320c:	4650      	mov	r0, sl
 800320e:	4659      	mov	r1, fp
 8003210:	f7fc ffdc 	bl	80001cc <__aeabi_uldivmod>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4613      	mov	r3, r2
 800321a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003222:	d308      	bcc.n	8003236 <UART_SetConfig+0x2b2>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800322a:	d204      	bcs.n	8003236 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	e0c2      	b.n	80033bc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800323c:	e0be      	b.n	80033bc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003246:	d16a      	bne.n	800331e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003248:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800324c:	2b08      	cmp	r3, #8
 800324e:	d834      	bhi.n	80032ba <UART_SetConfig+0x336>
 8003250:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <UART_SetConfig+0x2d4>)
 8003252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003256:	bf00      	nop
 8003258:	0800327d 	.word	0x0800327d
 800325c:	0800329d 	.word	0x0800329d
 8003260:	080032a5 	.word	0x080032a5
 8003264:	080032bb 	.word	0x080032bb
 8003268:	080032ab 	.word	0x080032ab
 800326c:	080032bb 	.word	0x080032bb
 8003270:	080032bb 	.word	0x080032bb
 8003274:	080032bb 	.word	0x080032bb
 8003278:	080032b3 	.word	0x080032b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800327c:	f7fe fefa 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 8003280:	61f8      	str	r0, [r7, #28]
        break;
 8003282:	e020      	b.n	80032c6 <UART_SetConfig+0x342>
 8003284:	efff69f3 	.word	0xefff69f3
 8003288:	40008000 	.word	0x40008000
 800328c:	40013800 	.word	0x40013800
 8003290:	40021000 	.word	0x40021000
 8003294:	40004400 	.word	0x40004400
 8003298:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800329c:	f7fe ff00 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 80032a0:	61f8      	str	r0, [r7, #28]
        break;
 80032a2:	e010      	b.n	80032c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032a4:	4b4c      	ldr	r3, [pc, #304]	; (80033d8 <UART_SetConfig+0x454>)
 80032a6:	61fb      	str	r3, [r7, #28]
        break;
 80032a8:	e00d      	b.n	80032c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032aa:	f7fe fe4b 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 80032ae:	61f8      	str	r0, [r7, #28]
        break;
 80032b0:	e009      	b.n	80032c6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032b6:	61fb      	str	r3, [r7, #28]
        break;
 80032b8:	e005      	b.n	80032c6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d077      	beq.n	80033bc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005a      	lsls	r2, r3, #1
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	085b      	lsrs	r3, r3, #1
 80032d6:	441a      	add	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	2b0f      	cmp	r3, #15
 80032e6:	d916      	bls.n	8003316 <UART_SetConfig+0x392>
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032ee:	d212      	bcs.n	8003316 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	f023 030f 	bic.w	r3, r3, #15
 80032f8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	085b      	lsrs	r3, r3, #1
 80032fe:	b29b      	uxth	r3, r3
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	b29a      	uxth	r2, r3
 8003306:	8afb      	ldrh	r3, [r7, #22]
 8003308:	4313      	orrs	r3, r2
 800330a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	8afa      	ldrh	r2, [r7, #22]
 8003312:	60da      	str	r2, [r3, #12]
 8003314:	e052      	b.n	80033bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800331c:	e04e      	b.n	80033bc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800331e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003322:	2b08      	cmp	r3, #8
 8003324:	d827      	bhi.n	8003376 <UART_SetConfig+0x3f2>
 8003326:	a201      	add	r2, pc, #4	; (adr r2, 800332c <UART_SetConfig+0x3a8>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003351 	.word	0x08003351
 8003330:	08003359 	.word	0x08003359
 8003334:	08003361 	.word	0x08003361
 8003338:	08003377 	.word	0x08003377
 800333c:	08003367 	.word	0x08003367
 8003340:	08003377 	.word	0x08003377
 8003344:	08003377 	.word	0x08003377
 8003348:	08003377 	.word	0x08003377
 800334c:	0800336f 	.word	0x0800336f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003350:	f7fe fe90 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 8003354:	61f8      	str	r0, [r7, #28]
        break;
 8003356:	e014      	b.n	8003382 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003358:	f7fe fea2 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 800335c:	61f8      	str	r0, [r7, #28]
        break;
 800335e:	e010      	b.n	8003382 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003360:	4b1d      	ldr	r3, [pc, #116]	; (80033d8 <UART_SetConfig+0x454>)
 8003362:	61fb      	str	r3, [r7, #28]
        break;
 8003364:	e00d      	b.n	8003382 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003366:	f7fe fded 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 800336a:	61f8      	str	r0, [r7, #28]
        break;
 800336c:	e009      	b.n	8003382 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800336e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003372:	61fb      	str	r3, [r7, #28]
        break;
 8003374:	e005      	b.n	8003382 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003380:	bf00      	nop
    }

    if (pclk != 0U)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d019      	beq.n	80033bc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	085a      	lsrs	r2, r3, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	441a      	add	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	fbb2 f3f3 	udiv	r3, r2, r3
 800339a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	2b0f      	cmp	r3, #15
 80033a0:	d909      	bls.n	80033b6 <UART_SetConfig+0x432>
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a8:	d205      	bcs.n	80033b6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60da      	str	r2, [r3, #12]
 80033b4:	e002      	b.n	80033bc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2200      	movs	r2, #0
 80033c6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033c8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	3728      	adds	r7, #40	; 0x28
 80033d0:	46bd      	mov	sp, r7
 80033d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d6:	bf00      	nop
 80033d8:	00f42400 	.word	0x00f42400

080033dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	f003 0301 	and.w	r3, r3, #1
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00a      	beq.n	8003406 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	430a      	orrs	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00a      	beq.n	8003428 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	430a      	orrs	r2, r1
 8003426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	f003 0304 	and.w	r3, r3, #4
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00a      	beq.n	800346c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d00a      	beq.n	800348e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f003 0320 	and.w	r3, r3, #32
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01a      	beq.n	80034f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034da:	d10a      	bne.n	80034f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	605a      	str	r2, [r3, #4]
  }
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af02      	add	r7, sp, #8
 8003526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003530:	f7fd fc66 	bl	8000e00 <HAL_GetTick>
 8003534:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b08      	cmp	r3, #8
 8003542:	d10e      	bne.n	8003562 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003544:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 f82d 	bl	80035b2 <UART_WaitOnFlagUntilTimeout>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e023      	b.n	80035aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d10e      	bne.n	800358e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003570:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f817 	bl	80035b2 <UART_WaitOnFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e00d      	b.n	80035aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2220      	movs	r2, #32
 8003592:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3710      	adds	r7, #16
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b09c      	sub	sp, #112	; 0x70
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	60f8      	str	r0, [r7, #12]
 80035ba:	60b9      	str	r1, [r7, #8]
 80035bc:	603b      	str	r3, [r7, #0]
 80035be:	4613      	mov	r3, r2
 80035c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c2:	e0a5      	b.n	8003710 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	f000 80a1 	beq.w	8003710 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035ce:	f7fd fc17 	bl	8000e00 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035da:	429a      	cmp	r2, r3
 80035dc:	d302      	bcc.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80035de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d13e      	bne.n	8003662 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035ec:	e853 3f00 	ldrex	r3, [r3]
 80035f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80035f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80035f8:	667b      	str	r3, [r7, #100]	; 0x64
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	461a      	mov	r2, r3
 8003600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003602:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003604:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003606:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800360a:	e841 2300 	strex	r3, r2, [r1]
 800360e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1e6      	bne.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	3308      	adds	r3, #8
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	663b      	str	r3, [r7, #96]	; 0x60
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3308      	adds	r3, #8
 8003634:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003636:	64ba      	str	r2, [r7, #72]	; 0x48
 8003638:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800363c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003644:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e5      	bne.n	8003616 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e067      	b.n	8003732 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d04f      	beq.n	8003710 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800367a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800367e:	d147      	bne.n	8003710 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003688:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800369e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	461a      	mov	r2, r3
 80036a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a8:	637b      	str	r3, [r7, #52]	; 0x34
 80036aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e6      	bne.n	800368a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	3308      	adds	r3, #8
 80036c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	e853 3f00 	ldrex	r3, [r3]
 80036ca:	613b      	str	r3, [r7, #16]
   return(result);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	f023 0301 	bic.w	r3, r3, #1
 80036d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3308      	adds	r3, #8
 80036da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80036dc:	623a      	str	r2, [r7, #32]
 80036de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036e0:	69f9      	ldr	r1, [r7, #28]
 80036e2:	6a3a      	ldr	r2, [r7, #32]
 80036e4:	e841 2300 	strex	r3, r2, [r1]
 80036e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d1e5      	bne.n	80036bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2220      	movs	r2, #32
 80036fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2220      	movs	r2, #32
 8003700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e010      	b.n	8003732 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	69da      	ldr	r2, [r3, #28]
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	4013      	ands	r3, r2
 800371a:	68ba      	ldr	r2, [r7, #8]
 800371c:	429a      	cmp	r2, r3
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	429a      	cmp	r2, r3
 800372c:	f43f af4a 	beq.w	80035c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003730:	2300      	movs	r3, #0
}
 8003732:	4618      	mov	r0, r3
 8003734:	3770      	adds	r7, #112	; 0x70
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
	...

0800373c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800373c:	b480      	push	{r7}
 800373e:	b097      	sub	sp, #92	; 0x5c
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	4613      	mov	r3, r2
 8003748:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	68ba      	ldr	r2, [r7, #8]
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	88fa      	ldrh	r2, [r7, #6]
 8003754:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	88fa      	ldrh	r2, [r7, #6]
 800375c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800376e:	d10e      	bne.n	800378e <UART_Start_Receive_IT+0x52>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d105      	bne.n	8003784 <UART_Start_Receive_IT+0x48>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800377e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003782:	e02d      	b.n	80037e0 <UART_Start_Receive_IT+0xa4>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	22ff      	movs	r2, #255	; 0xff
 8003788:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800378c:	e028      	b.n	80037e0 <UART_Start_Receive_IT+0xa4>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10d      	bne.n	80037b2 <UART_Start_Receive_IT+0x76>
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <UART_Start_Receive_IT+0x6c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	22ff      	movs	r2, #255	; 0xff
 80037a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037a6:	e01b      	b.n	80037e0 <UART_Start_Receive_IT+0xa4>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	227f      	movs	r2, #127	; 0x7f
 80037ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037b0:	e016      	b.n	80037e0 <UART_Start_Receive_IT+0xa4>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037ba:	d10d      	bne.n	80037d8 <UART_Start_Receive_IT+0x9c>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	691b      	ldr	r3, [r3, #16]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d104      	bne.n	80037ce <UART_Start_Receive_IT+0x92>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	227f      	movs	r2, #127	; 0x7f
 80037c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037cc:	e008      	b.n	80037e0 <UART_Start_Receive_IT+0xa4>
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	223f      	movs	r2, #63	; 0x3f
 80037d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80037d6:	e003      	b.n	80037e0 <UART_Start_Receive_IT+0xa4>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2222      	movs	r2, #34	; 0x22
 80037ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3308      	adds	r3, #8
 80037f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	657b      	str	r3, [r7, #84]	; 0x54
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3308      	adds	r3, #8
 800380c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800380e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003810:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003814:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800381c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e5      	bne.n	80037ee <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d107      	bne.n	800383c <UART_Start_Receive_IT+0x100>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d103      	bne.n	800383c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4a24      	ldr	r2, [pc, #144]	; (80038c8 <UART_Start_Receive_IT+0x18c>)
 8003838:	665a      	str	r2, [r3, #100]	; 0x64
 800383a:	e002      	b.n	8003842 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a23      	ldr	r2, [pc, #140]	; (80038cc <UART_Start_Receive_IT+0x190>)
 8003840:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d019      	beq.n	8003886 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003862:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003866:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	461a      	mov	r2, r3
 800386e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003870:	637b      	str	r3, [r7, #52]	; 0x34
 8003872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003878:	e841 2300 	strex	r3, r2, [r1]
 800387c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d1e6      	bne.n	8003852 <UART_Start_Receive_IT+0x116>
 8003884:	e018      	b.n	80038b8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	e853 3f00 	ldrex	r3, [r3]
 8003892:	613b      	str	r3, [r7, #16]
   return(result);
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	f043 0320 	orr.w	r3, r3, #32
 800389a:	653b      	str	r3, [r7, #80]	; 0x50
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	461a      	mov	r2, r3
 80038a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038a4:	623b      	str	r3, [r7, #32]
 80038a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a8:	69f9      	ldr	r1, [r7, #28]
 80038aa:	6a3a      	ldr	r2, [r7, #32]
 80038ac:	e841 2300 	strex	r3, r2, [r1]
 80038b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e6      	bne.n	8003886 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	375c      	adds	r7, #92	; 0x5c
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	08003cef 	.word	0x08003cef
 80038cc:	08003b8f 	.word	0x08003b8f

080038d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b095      	sub	sp, #84	; 0x54
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e0:	e853 3f00 	ldrex	r3, [r3]
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	461a      	mov	r2, r3
 80038f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038f6:	643b      	str	r3, [r7, #64]	; 0x40
 80038f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1e6      	bne.n	80038d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	3308      	adds	r3, #8
 8003910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	e853 3f00 	ldrex	r3, [r3]
 8003918:	61fb      	str	r3, [r7, #28]
   return(result);
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f023 0301 	bic.w	r3, r3, #1
 8003920:	64bb      	str	r3, [r7, #72]	; 0x48
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	3308      	adds	r3, #8
 8003928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800392a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800392c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003932:	e841 2300 	strex	r3, r2, [r1]
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e5      	bne.n	800390a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	2b01      	cmp	r3, #1
 8003944:	d118      	bne.n	8003978 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	60bb      	str	r3, [r7, #8]
   return(result);
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f023 0310 	bic.w	r3, r3, #16
 800395a:	647b      	str	r3, [r7, #68]	; 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003968:	6979      	ldr	r1, [r7, #20]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	e841 2300 	strex	r3, r2, [r1]
 8003970:	613b      	str	r3, [r7, #16]
   return(result);
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d1e6      	bne.n	8003946 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2220      	movs	r2, #32
 800397c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	665a      	str	r2, [r3, #100]	; 0x64
}
 800398a:	bf00      	nop
 800398c:	3754      	adds	r7, #84	; 0x54
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b084      	sub	sp, #16
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039b4:	68f8      	ldr	r0, [r7, #12]
 80039b6:	f7ff facf 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b08f      	sub	sp, #60	; 0x3c
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ce:	2b21      	cmp	r3, #33	; 0x21
 80039d0:	d14d      	bne.n	8003a6e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d132      	bne.n	8003a44 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e4:	6a3b      	ldr	r3, [r7, #32]
 80039e6:	e853 3f00 	ldrex	r3, [r3]
 80039ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f2:	637b      	str	r3, [r7, #52]	; 0x34
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	461a      	mov	r2, r3
 80039fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039fe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a04:	e841 2300 	strex	r3, r2, [r1]
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1e6      	bne.n	80039de <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	e853 3f00 	ldrex	r3, [r3]
 8003a1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a24:	633b      	str	r3, [r7, #48]	; 0x30
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	61bb      	str	r3, [r7, #24]
 8003a30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a32:	6979      	ldr	r1, [r7, #20]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	e841 2300 	strex	r3, r2, [r1]
 8003a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1e6      	bne.n	8003a10 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003a42:	e014      	b.n	8003a6e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a62:	b29b      	uxth	r3, r3
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003a6e:	bf00      	nop
 8003a70:	373c      	adds	r7, #60	; 0x3c
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b091      	sub	sp, #68	; 0x44
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a86:	2b21      	cmp	r3, #33	; 0x21
 8003a88:	d151      	bne.n	8003b2e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d132      	bne.n	8003afc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	623b      	str	r3, [r7, #32]
   return(result);
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	461a      	mov	r2, r3
 8003ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003abc:	e841 2300 	strex	r3, r2, [r1]
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e6      	bne.n	8003a96 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	e853 3f00 	ldrex	r3, [r3]
 8003ad4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aea:	69b9      	ldr	r1, [r7, #24]
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	e841 2300 	strex	r3, r2, [r1]
 8003af2:	617b      	str	r3, [r7, #20]
   return(result);
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1e6      	bne.n	8003ac8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003afa:	e018      	b.n	8003b2e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b00:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	881a      	ldrh	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b0e:	b292      	uxth	r2, r2
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b16:	1c9a      	adds	r2, r3, #2
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3b01      	subs	r3, #1
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003b2e:	bf00      	nop
 8003b30:	3744      	adds	r7, #68	; 0x44
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b088      	sub	sp, #32
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b56:	61fb      	str	r3, [r7, #28]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	61bb      	str	r3, [r7, #24]
 8003b62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6979      	ldr	r1, [r7, #20]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e6      	bne.n	8003b42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2220      	movs	r2, #32
 8003b78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff f9df 	bl	8002f44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b86:	bf00      	nop
 8003b88:	3720      	adds	r7, #32
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b096      	sub	sp, #88	; 0x58
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003b9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ba4:	2b22      	cmp	r3, #34	; 0x22
 8003ba6:	f040 8094 	bne.w	8003cd2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003bb0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003bb4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003bb8:	b2d9      	uxtb	r1, r3
 8003bba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003bbe:	b2da      	uxtb	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc4:	400a      	ands	r2, r1
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bda:	b29b      	uxth	r3, r3
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d179      	bne.n	8003ce6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfa:	e853 3f00 	ldrex	r3, [r3]
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c06:	653b      	str	r3, [r7, #80]	; 0x50
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c10:	647b      	str	r3, [r7, #68]	; 0x44
 8003c12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c18:	e841 2300 	strex	r3, r2, [r1]
 8003c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1e6      	bne.n	8003bf2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	3308      	adds	r3, #8
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2e:	e853 3f00 	ldrex	r3, [r3]
 8003c32:	623b      	str	r3, [r7, #32]
   return(result);
 8003c34:	6a3b      	ldr	r3, [r7, #32]
 8003c36:	f023 0301 	bic.w	r3, r3, #1
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3308      	adds	r3, #8
 8003c42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c44:	633a      	str	r2, [r7, #48]	; 0x30
 8003c46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c4c:	e841 2300 	strex	r3, r2, [r1]
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1e5      	bne.n	8003c24 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d12e      	bne.n	8003cca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f023 0310 	bic.w	r3, r3, #16
 8003c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	69b9      	ldr	r1, [r7, #24]
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e6      	bne.n	8003c72 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d103      	bne.n	8003cba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2210      	movs	r2, #16
 8003cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f7ff f952 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003cc8:	e00d      	b.n	8003ce6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fc fc00 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 8003cd0:	e009      	b.n	8003ce6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	8b1b      	ldrh	r3, [r3, #24]
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0208 	orr.w	r2, r2, #8
 8003ce2:	b292      	uxth	r2, r2
 8003ce4:	831a      	strh	r2, [r3, #24]
}
 8003ce6:	bf00      	nop
 8003ce8:	3758      	adds	r7, #88	; 0x58
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b096      	sub	sp, #88	; 0x58
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003cfc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d04:	2b22      	cmp	r3, #34	; 0x22
 8003d06:	f040 8094 	bne.w	8003e32 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d10:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d1a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003d1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d22:	4013      	ands	r3, r2
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2e:	1c9a      	adds	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d179      	bne.n	8003e46 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5a:	e853 3f00 	ldrex	r3, [r3]
 8003d5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d70:	643b      	str	r3, [r7, #64]	; 0x40
 8003d72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d78:	e841 2300 	strex	r3, r2, [r1]
 8003d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d1e6      	bne.n	8003d52 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	3308      	adds	r3, #8
 8003d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	e853 3f00 	ldrex	r3, [r3]
 8003d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f023 0301 	bic.w	r3, r3, #1
 8003d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3308      	adds	r3, #8
 8003da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003da4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dac:	e841 2300 	strex	r3, r2, [r1]
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1e5      	bne.n	8003d84 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d12e      	bne.n	8003e2a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	f023 0310 	bic.w	r3, r3, #16
 8003de6:	647b      	str	r3, [r7, #68]	; 0x44
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df0:	61bb      	str	r3, [r7, #24]
 8003df2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df4:	6979      	ldr	r1, [r7, #20]
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1e6      	bne.n	8003dd2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f003 0310 	and.w	r3, r3, #16
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d103      	bne.n	8003e1a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2210      	movs	r2, #16
 8003e18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e20:	4619      	mov	r1, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f7ff f8a2 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003e28:	e00d      	b.n	8003e46 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f7fc fb50 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 8003e30:	e009      	b.n	8003e46 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	8b1b      	ldrh	r3, [r3, #24]
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0208 	orr.w	r2, r2, #8
 8003e42:	b292      	uxth	r2, r2
 8003e44:	831a      	strh	r2, [r3, #24]
}
 8003e46:	bf00      	nop
 8003e48:	3758      	adds	r7, #88	; 0x58
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
	...

08003e64 <__libc_init_array>:
 8003e64:	b570      	push	{r4, r5, r6, lr}
 8003e66:	4d0d      	ldr	r5, [pc, #52]	; (8003e9c <__libc_init_array+0x38>)
 8003e68:	4c0d      	ldr	r4, [pc, #52]	; (8003ea0 <__libc_init_array+0x3c>)
 8003e6a:	1b64      	subs	r4, r4, r5
 8003e6c:	10a4      	asrs	r4, r4, #2
 8003e6e:	2600      	movs	r6, #0
 8003e70:	42a6      	cmp	r6, r4
 8003e72:	d109      	bne.n	8003e88 <__libc_init_array+0x24>
 8003e74:	4d0b      	ldr	r5, [pc, #44]	; (8003ea4 <__libc_init_array+0x40>)
 8003e76:	4c0c      	ldr	r4, [pc, #48]	; (8003ea8 <__libc_init_array+0x44>)
 8003e78:	f000 f820 	bl	8003ebc <_init>
 8003e7c:	1b64      	subs	r4, r4, r5
 8003e7e:	10a4      	asrs	r4, r4, #2
 8003e80:	2600      	movs	r6, #0
 8003e82:	42a6      	cmp	r6, r4
 8003e84:	d105      	bne.n	8003e92 <__libc_init_array+0x2e>
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
 8003e88:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e8c:	4798      	blx	r3
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7ee      	b.n	8003e70 <__libc_init_array+0xc>
 8003e92:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e96:	4798      	blx	r3
 8003e98:	3601      	adds	r6, #1
 8003e9a:	e7f2      	b.n	8003e82 <__libc_init_array+0x1e>
 8003e9c:	08003f24 	.word	0x08003f24
 8003ea0:	08003f24 	.word	0x08003f24
 8003ea4:	08003f24 	.word	0x08003f24
 8003ea8:	08003f28 	.word	0x08003f28

08003eac <memset>:
 8003eac:	4402      	add	r2, r0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d100      	bne.n	8003eb6 <memset+0xa>
 8003eb4:	4770      	bx	lr
 8003eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eba:	e7f9      	b.n	8003eb0 <memset+0x4>

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	bf00      	nop
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	bf00      	nop
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
